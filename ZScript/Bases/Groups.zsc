/*IDEA: Maybe find a way to integrate the order system my marines and vehicles independently use - into this new group system, finally taking the feature out of its'
semi-built-in code limbo.*/

//Base data class for NPC groups, accessed by NPCs to find data like the group they're in, other members in it, its' leader, if a member died, etc.
//All NPC groups are stored in an associative array in KAI_EventHandler for easy lookup.
//$GZDB_SKIP
Class KAI_NPCGroup Play
{
	Mixin KAI_CheckFunctions;
	KAI_EventHandler Handler;
	
	String GroupName; //The name of the group. Doesn't do anything on its' own. IDEA: Maybe figure a way out to visually print the groups' name over its' members ?
	Array<Actor> Members; //The groups' members. If the group is emtpy, the janitor in KAI_EventHandler removes it.
	Actor Leader; //The head honcho of the group. Should be in the Members list too. Can be any actor, mainly in case a player is leading NPCs around or something.
	Actor OldLeader; //The last leader the NPC group had. Useful for comparing the new and previous leader for example.
	
	Enum NPCGroupFlags
	{
		NPCGRP_EVERYONEDIED = 1 << 0, //Everyone in the group is dead. May be useful once this feature is complete for stuff like setting the first NPC revived as the leader.
		NPCGRP_NOMEMBEREVENT= 1 << 1, //Group members aren't also individually alerted of events through the OnGroupEvent() virtual.
		NPCGRP_NOICONS		= 1 << 2, //Members of this group never have any icons over their heads.
		//No idea what other group flags to add yet, if any.
	}
	
	//Group flags and its' setters and getters
	Protected NPCGroupFlags Flags;
	Void ChangeNPCGroupFlags (Int Set, Int Remove)
	{
		Int OldFlags = Flags;
		Flags |= Set;
		Flags &= ~Remove;
		//While NOICONS is true, they don't update, so if the flag is turned back off, update the icons to match any status changes that occured while it was still on.
		If (OldFlags & NPCGRP_NOICONS && !(Flags & NPCGRP_NOICONS))
			UpdateGroupIcons();
	}
	Int GetNPCGroupFlags() {Return Flags;}
	
	//Group icon handling
	TextureID MemberIcon, DeadMemberIcon, LeaderIcon, DeadLeaderIcon, PlayerIcon, DeadPlayerIcon; //Group icon TextureIDs.
	Vector2 IconScale; //The scale that the icons are spawned at.
	Array <KAI_GroupIcon> MemberIcons; //NOTE: Only tracks normal icons, player icons aren't tracked, since a player will not suddenly stop being one.
	
	KAI_GroupIcon AddGroupIcon (Actor ToWho)
	{
		//Pointer casting hell.
		KAI_GroupIcon Icon = KAI_GroupIcon(Level.SpawnVisualThinker ("KAI_GroupIcon"));
		If (Icon)
		{
			Icon.Scale = IconScale;
			Icon.Owner = ToWho;
			Icon.Group = Self;
			
			If (ToWho == Leader)
				Icon.Texture = LeaderIcon;
			Else
				Icon.Texture = MemberIcon;
			
			If (ToWho.Player)
			{
				Icon.PlayerIcon = KAI_GroupIcon(Level.SpawnVisualThinker ("KAI_GroupPlayerIcon"));
				Icon.PlayerIcon.Texture = PlayerIcon;
				Icon.PlayerIcon.Owner = ToWho;
				KAI_GroupPlayerIcon(Icon.PlayerIcon).Master = Icon;
				Icon.PlayerIcon.Group = Self;
				Icon.PlayerIcon.Scale = IconScale;
			}
			
			MemberIcons.Push (Icon); //Keep track of member icons to be able to update them at once.
			
			Return Icon;
		}
		Return Null;
	}
	
	Void RemoveGroupIcon (KAI_GroupIcon Icon)
	{
		If (!Icon) Return;
		
		Int RemoveIndex;
		If ((RemoveIndex = MemberIcons.Find(Icon)) != MemberIcons.Size())
		{
			//Icon.Destroy();
			MemberIcons.Delete (RemoveIndex);
		}
		Return;
	}
	
	//Change the graphics the GroupIcons show based on the status of each member and if they're just a member, the leader, and/or a player.
	Void UpdateGroupIcons ()
	{
		If ((GetNPCGroupFlags() & NPCGRP_NOICONS))
			Return;
		ForEach (Icon : MemberIcons)
		{
			If (Icon.Owner.Health <= 0)
			{
				If (Icon.Owner == Leader)
					Icon.Texture = DeadLeaderIcon;
				Else
					Icon.Texture = DeadMemberIcon;
				
				If (Icon.Owner.Player)
					Icon.PlayerIcon.Texture = DeadPlayerIcon;
			}
			Else
			{
				If (Icon.Owner == Leader)
					Icon.Texture = LeaderIcon;
				Else
					Icon.Texture = MemberIcon;
				
				If (Icon.Owner.Player)
					Icon.PlayerIcon.Texture = PlayerIcon;
			}
		}
	}
	
	//Debug function for printing the groups variables into the console, also returns the debug string.
	String PrintGroupInfo (Bool DontPrint = False, String ColorCode = "l")
	{
		String DebugInfo;
		DebugInfo.AppendFormat ("\c[%s]KAI NPC Group name: %s | Pointer: %p | Class: %s\n",ColorCode,GroupName,Self,GetClassName());
		DebugInfo.AppendFormat ("\c[%s]Members:\n",ColorCode);
		ForEach (Member : Members)
		{
			If (!Member) Continue;
			DebugInfo.AppendFormat ("\c[%s]%p, Class: %s, Member index %d\n",ColorCode,Member,Member.GetClassName(),Members.Find(Member));
			If (Member == Leader)
			{
				DebugInfo.DeleteLastCharacter(); //Backspacing
				DebugInfo.AppendFormat ("\c[%s] <= Group leader\n",ColorCode);
			}
			If (Member == OldLeader)
			{
				DebugInfo.DeleteLastCharacter();
				DebugInfo.AppendFormat ("\c[%s] <= Previous group leader\n",ColorCode);
			}
			If (!(Member Is "KAI_Actor"))
			{
				DebugInfo.DeleteLastCharacter();
				DebugInfo.AppendFormat ("\c[%s], Non-KAI NPC\n",ColorCode);
			}
			If (Member.Player)
			{
				DebugInfo.DeleteLastCharacter();
				DebugInfo.AppendFormat ("\c[%s], Is a player (%s)\n",ColorCode,Member.Player.GetUsername());
			}
			If (IsDead(Member))
			{
				DebugInfo.DeleteLastCharacter();
				DebugInfo.AppendFormat ("\c[%s], Dead\n",ColorCode);
			}
		}
		DebugInfo.AppendFormat ("\c[%s]Group flags:",ColorCode);
		If (Flags & NPCGRP_EVERYONEDIED)
			DebugInfo.AppendFormat ("\c[%s]NPCGRP_EVERYONEDIED ",ColorCode);
		If (Flags & NPCGRP_NOMEMBEREVENT)
			DebugInfo.AppendFormat ("\c[%s]| NPCGRP_NOMEMBEREVENT ",ColorCode);
		If (Flags & NPCGRP_NOICONS)
			DebugInfo.AppendFormat ("\c[%s]| NPCGRP_NOICONS ",ColorCode);
		DebugInfo.AppendFormat ("\n\c[%s]Group icon names:\n",ColorCode);
		DebugInfo.AppendFormat ("	\c[%s]Member icon: %s\n",ColorCode,TexMan.GetName(MemberIcon));
		DebugInfo.AppendFormat ("	\c[%s]Dead member icon: %s\n",ColorCode,TexMan.GetName(DeadMemberIcon));
		DebugInfo.AppendFormat ("	\c[%s]Leader icon: %s\n",ColorCode,TexMan.GetName(LeaderIcon));
		DebugInfo.AppendFormat ("	\c[%s]Dead leader icon: %s\n",ColorCode,TexMan.GetName(DeadLeaderIcon));
		DebugInfo.AppendFormat ("	\c[%s]Player icon: %s\n",ColorCode,TexMan.GetName(PlayerIcon));
		DebugInfo.AppendFormat ("	\c[%s]Dead player icon: %s\n",ColorCode,TexMan.GetName(DeadPlayerIcon));
		If (!DontPrint) Console.Printf (DebugInfo);
		Return DebugInfo;
	}
	
	//Actually create a group of NPCs. Functions like a constructor for the NPC Group class.
	//Default group parameters: These are relevant for making a group with the base group class, and for passing the basic parameters any custom group still needs.
		//GroupName: The name of the group, totally optional and decorative.
		//Members: An array of pointers to all the members to add to the group.
		//Leader: The actor to set as the leader of the group, the actor will be automatically be added as a group member, so it doesn't need to be in Members[].
		//Flags: The flags to pass to the group.
	//Custom group parameters: These are the parameters used for creating custom groups with their own behavior.
		/*GroupClass: This variable is special, it specifies what instance of KAI_NPCGroup to create, can be used to create a child class instead, this is useful
		for say, making a group using a class that simply has custom virtual overrides, like for events.*/
	Static KAI_NPCGroup CreateGroup (Name GroupName, Array<Actor> Members, Actor Leader, NPCGroupFlags Flags, Class<KAI_NPCGroup> GroupClass = "KAI_NPCGroup")
	{
		Let Group = KAI_NPCGroup(New (GroupClass));
		
		If (!Group)
		{
			Console.PrintfEx (PRINT_HIGH,"KAI_NPCGroup.CreateGroup(): Failed to create new instance of %s, returning null.",GroupClass);
			Return Null;
		}
		
		Group.PreInitialize();
		
		ForEach (Member : Members) //Add members, after checking them one by one to make sure they aren't corpses or props.
		{
			If (Member == Leader) Continue; //Don't add the leader yet.
			Group.AddNPCToGroup(Member);
		}
		
		//Group has no leader at all, try to use the fallback.
		If (!Leader && !(Leader = Group.LeaderFallback()))
		{
			Console.PrintfEx (PRINT_HIGH,"KAI_NPCGroup.CreateGroup(): Failed to create new instance of %s, there's no assigned leader, nor could LeaderFallback() find one.",GroupClass.GetClassName());
			Group.Destroy();
			Return Null;
		}
		
		Group.ChangeLeader(Leader);
		Group.GroupName = GroupName;
		
		/*//Add leader to the group separetely. If they they weren't added, abort group creation.
		If (!Group.AddNPCToGroup(Group.Leader))
		{
			Console.PrintfEx (PRINT_HIGH,"KAI_NPCGroup.CreateGroup(): Failed to create new instance of %s, couldn't add leader %p to group.",GroupClass.GetClassName(),Group.Leader);
			Group.Destroy();
			Return Null;
		}*/		
		
		Group.ChangeNPCGroupFlags (Flags,0); //Pass group flags.
		
		Group.Handler = KAI_EventHandler(EventHandler.Find("KAI_EventHandler")); //Find the library's handler, basically just to access the NPCGroups map.
		
		Group.Handler.AddNPCGroup(Group); //Add group to group map.
		Group.PostInitialize(); //Call any custom initialization code.
		Console.Printf ("KAI_NPCGroup.CreateGroup(): Made group %p with leader %p and %d members",Group,Group.Leader,Group.Members.Size());
		
		Return Group; //Return our new group.
	}
	
	//ACS wrapper for CreateGroup, the members are set by TID, and the leader is the scripts' activator.
	Static Bool CreateGroupACS (Actor Activator, String GroupName, Int MemberTID, Int Flags = 0, String GroupClass = "KAI_NPCGroup")
	{
		Array <Actor> Members;
		Actor CurMember;
		Let MemberSearch = Level.CreateActorIterator (MemberTID); //Find members by TID, these will still be filtered out by AddNPCToGroup(), so no assigning props.
		While ((CurMember = MemberSearch.Next()))
			Members.Push(CurMember);
		Return (KAI_NPCGroup.CreateGroup(GroupName,Members,Activator,Flags,GroupClass));
	}
	
	//VIRTUAL METHODS
	//Called by CreateGroup() early when a group forms, can be used to potentially pass custom code, and set variables like group icon TextureIDs.
	Virtual Void PreInitialize()
	{
		MemberIcon = TexMan.CheckForTexture ("GRPICON1");
		DeadMemberIcon = TexMan.CheckForTexture ("GRPICON4");
		LeaderIcon = TexMan.CheckForTexture ("GRPICON2");
		DeadLeaderIcon = TexMan.CheckForTexture ("GRPICON5");
		PlayerIcon = TexMan.CheckForTexture ("GRPICON3");
		DeadPlayerIcon = TexMan.CheckForTexture ("GRPICON6");
		IconScale = (0.75,0.75);
	}
	
	//Called by CreateGroup() after the group is fully generated.
	Virtual Void PostInitialize(){}
	
	Enum GroupEventTypes
	{
		GRPEVNT_NONE	= 0, //No event occured.
		GRPEVNT_DEATH	= 1, //A member died.
		GRPEVNT_ERASED	= 2, //A member was erased from existence.
		GRPEVNT_REVIVAL	= 3, //A member was resurrected.
		GRPEVNT_JOIN	= 4, //A new member joined the group.
		GRPEVNT_LEFT	= 5, //A member left the group.
		GRPEVNT_NEWLEADER=6, //The group has a new leader.
	}
	
	Virtual Void HandleGroupEvent (Int EventType, Actor Affected)
	{
		If (EventType == GRPEVNT_NONE || !Affected) //Nothingburger
			Return;
		
		AlertMembersOfEvent (EventType, Affected);
		
		//By default, the only event the stock group class handles is the death or erasure of the group leader, using the stock LeaderFallback() virtual.
		If (Affected == Leader && (EventType == GRPEVNT_DEATH || EventType == GRPEVNT_ERASED))
			ChangeLeader(LeaderFallBack());
		
		If (EventType == GRPEVNT_REVIVAL) //A member is alive again, clearly not EVERYONE'S dead anymore.
		{
			If (Affected != Leader)
			{
				//The resurrected member is hostile to the leader, like if it was revived by an enemy Archvile.
				If (Leader Is "KAI_Actor" && KAI_Actor(Leader).IsActorHostile(Affected)
				|| !(Leader Is "KAI_Actor") && Leader.IsHostile(Affected))
					RemoveNPCFromGroup (Affected);
			}
			ChangeNPCGroupFlags (0,NPCGRP_EVERYONEDIED);
		}
		
		UpdateGroupIcons(); //Basically every single event changes the group icons in some way.
	}
	
	//In case of there being no leader, as long as there are members, pick the strongest member as a new leader. Can be overriden.
	//Used by the default handling of death and erasure events, and also by CreateGroup() if no leader was passed.
	Virtual Actor LeaderFallback ()
	{
		If (!Members.Size()) //Don't even have any members.
		{
			Destroy();
			Return Null;
		}
		
		Return GetStrongestMember();
	}
	
	Bool QuickDestruction; //The group instance is erased without trying to find its' entry in the group map. Used by the janitor script thing.
	
	Override Void OnDestroy()
	{
		If (QuickDestruction) Return;
		If (!Handler) Handler = KAI_EventHandler(EventHandler.Find("KAI_EventHandler"));
		If (!Handler) Return; //No library handler found ? What the fuck ?
		
		ForEach (K, V : Handler.NPCGroups) //Remove self from group map.
		{
			If (V == Self)
				Handler.NPCGroups.Remove(K);
		}
	}
	
	//MEMBER MANAGEMENT FUNCTIONS
	
	Void AlertMembersOfEvent (Int EventType, Actor Affected)
	{
		//Only alert individual members of events if the group allows it. NOTE: Only works for KAI NPCs.
		If (!(GetNPCGroupFlags() & NPCGRP_NOMEMBEREVENT))
		{
			ForEach (Member : Members)
			{
				If (Member Is "KAI_Actor")
					KAI_Actor(Member).HandleNPCGroupEvent (EventType, Affected, Self);
			}
		}
	}
	
	//Return the strongest member in the group based on the default AssessThreatLevel() virtual. Can be set to not count players as stronger based on not being NPCs.
	Actor GetStrongestMember (Bool NoPlayers = False)
	{
		Map <Int, Actor> Powerscaling;
		KAI_Actor Reference = KAI_Actor(Actor.Spawn("ThreatAssess"));
		ForEach (Member : Members)
		{
			If (IsDead(Member)) Continue; //Corpses aren't exactly dangerous, excluding diseases.
			Powerscaling.Insert (Reference.AssessThreatLevel(Member,!NoPlayers), Member);
		}
		Reference.Destroy();
		
		Actor DaBiggestBird; //Current member found to be the strongest.
		Int BiggestThreat;
		
		ForEach (K, V : Powerscaling)
		{
			Int CurThreat = K;
			If (BiggestThreat < K) //Found bigger fish.
			{
				BiggestThreat = K;
				DaBiggestBird = V;
			}
		}
		If (KAI_DebugPrintMessages)console.printf ("the strongest member of the group is %p",dabiggestbird);
		Return /*Im*/DaBiggestBird;
	}
	
	//https://www.youtube.com/watch?v=3WM1XNdJufI
	Bool AreWeAllDead()
	{
		Bool Ded = True;
		ForEach (Member : Members)
		{
			If (Member.Player ? Member.Player.Health : Member.Health > 0) //NOTE: We can't use IsDead() here, because the playerstate isn't updated to PST_DEAD fast enough.
			{
				Ded = False;
				Break;
			}
		}
		Return Ded;
	}
	
	//Add a living thing to the group. Returns true if successfully added.
	Bool AddNPCToGroup (Actor Recruit)
	{
		If (!Recruit || IsInanimateObject(Recruit) || IsDead(Recruit)) Return False;
		
		If (Members.Find(Recruit) == Members.Size())
		{
			Members.Push (Recruit);
			//Add this group to the NPCs' group list, if it's not in that array already for some reason.
			If (Recruit Is "KAI_Actor" && KAI_Actor(Recruit).Groups.Find(Self) == KAI_Actor(Recruit).Groups.Size())
				KAI_Actor(Recruit).Groups.Push(Self);
			
			//Adding non-KAI actor (Like an external NPC or player) to the group.
			If (!(Recruit Is "KAI_Actor"))
			{
				KAI_DataToken Token = KAI_DataToken(Recruit.FindInventory ("KAI_DataToken"));
				If (Token)
					Token.Groups.Push(Self);
				Else //This foreign actor doesn't already have the token.
				{
					Token = KAI_DataToken(Recruit.GiveInventoryType ("KAI_DataToken"));
					
					If (!Token) Return False; //Just in case.
					Token.Groups.Push(Self);
				}
			}
			
			AddGroupIcon (Recruit);
			
			HandleGroupEvent (GRPEVNT_JOIN,Recruit);
			If (KAI_DebugPrintGroupEvents) Console.Printf ("AddNPCToGroup(), Group %p: New member %p (%s) joined", Self, Recruit, Recruit.GetClassName());
			Return True;
		}
		If (KAI_DebugPrintMessages) console.printf ("addnpctogroup failed to add %p",recruit);
		Return False;
	}
	
	//Ditto, but for removing members.
	//Discharged: The actor to remove.
	//NoDeathEvent: Don't trigger the GRPEVNT_LEFT event, only used if a member is erased from existence. You should also use this if you want to remove members when they die.
	Bool RemoveNPCFromGroup (Actor Discharged, Bool NoLeftEvent = False)
	{
		If (!Discharged) Return False;
		
		Int RemoveIndex;
		If ((RemoveIndex = Members.Find(Discharged)) != Members.Size())
		{
			Members.Delete (RemoveIndex); //Removed member index.
			
			//Pointer cast spaghetti.
			If (Discharged Is "KAI_Actor" && KAI_Actor(Discharged).Groups.Find(Self) != KAI_Actor(Discharged).Groups.Size())
				KAI_Actor(Discharged).Groups.Delete(KAI_Actor(Discharged).Groups.Find(Self));
			
			//Remove the group reference for non-KAI actors by removing it from their KAI_DataToken, since a non-KAI actor won't have a local Groups[] array.
			If (!(Discharged Is "KAI_Actor"))
			{
				KAI_DataToken Token = KAI_DataToken(Discharged.FindInventory ("KAI_DataToken"));
				If (Token)
					Token.Groups.Delete(Token.Groups.Find(Self));
			}
			
			ForEach (Icon : MemberIcons) //Remove icon, this doesn't use the RemoveGroupIcon() function.
			{
				If (Icon.Owner == Discharged)
					Icon.Destroy();
			}
			
			If (NoLeftEvent)
				Return True;
			HandleGroupEvent (GRPEVNT_LEFT,Discharged);
			If (KAI_DebugPrintGroupEvents) Console.Printf ("RemoveNPCFromGroup(), Group %p: Member %p (%s) left", Self, Discharged, Discharged.GetClassName());
			Return True;
		}
		
		Return False;
	}
	
	//Handles changing the groups' leader to another actor, to only allow valid leaders (i.e not props), and joining eligible actors who are members yet to the group.
	Bool ChangeLeader (Actor NewLeader)
	{
		If (!NewLeader)
			Return False;
		
		//The leader is not in the group yet. So try adding them in if they're valid.
		Bool FailNow;
		If (Members.Find(NewLeader) == Members.Size())
			FailNow = !AddNPCToGroup (NewLeader);
		
		If (FailNow) //Couldn't add the new leader to the group.
			Return False;
		
		OldLeader = Leader;
		Leader = NewLeader;
		HandleGroupEvent (GRPEVNT_NEWLEADER,NewLeader);
		
		If (KAI_DebugPrintGroupEvents)
		{
			If (OldLeader)
				Console.Printf ("KAI_NPCGroup.ChangeLeader(), Group %p(%s): Member %p(%s) took member %p's(%s) leader position", Self, GetClassName(), NewLeader, NewLeader.GetClassName(), OldLeader, OldLeader.GetClassName());
			Else
				Console.Printf ("KAI_NPCGroup.ChangeLeader(), Group %p(%s): Member %p(%s) now leads this formerly leaderless group", Self, GetClassName(), NewLeader, NewLeader.GetClassName());
		}
		
		Return True;
	}
	
	//Functions useful for non-KAI actors that are part of an NPC group. i.e for players that are part of a group.
	//This shit is probably slow as balls for more than like 5 groups, considering it iterates over every group AND THEN over every member in that group !
	//Who: The actor to check for any groups they're in.
	//Groups: An array to pass by reference, this array will be given all the groups that the Who actor is part of, if any.
	Static Void FindGroupsImIn (Actor Who, Array <KAI_NPCGroup> &Groups)
	{
		If (!Groups || !Who) Return;
		If (Who Is "KAI_Actor") //If a KAI NPC is calling this for some reason, just return its' Groups array back.
		{
			Groups.Copy(KAI_Actor(Who).Groups);
			Return;
		}
		Else
		{
			KAI_DataToken Token = KAI_DataToken(Who.FindInventory ("KAI_DataToken"));
			If (Token)
			{
				Groups.Copy(Token.Groups);
				Return;
			}
		}
		Return;
	}
}

//The individual icon appearing over a single group member.
Class KAI_GroupIcon : VisualThinker
{
	Actor Owner;
	KAI_NPCGroup Group; //The group the Owner member is part of for this icon.
	KAI_GroupIcon PlayerIcon; //Extra player icon indicator.
	
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		Flags |= SPF_NO_XY_BILLBOARD;
	}
	
	Override Void OnDestroy ()
	{
		Super.OnDestroy();
		If (Group)
			Group.RemoveGroupIcon (Self);
	}
	
	Float GetOwnerHeight ()
	{
		//Hacky way to check for moving the icon further up if a vehicle has a turret. I don't know how I could make a proper recursive check right now.
		If (Owner Is "KAI_BaseVehicle" && KAI_BaseVehicle(Owner).Turret)
		{
			Float Height = Owner.Height + KAI_BaseVehicle(Owner).Turret.Height;
			If (KAI_BaseVehicle(Owner).Turret && KAI_BaseVehicle(Owner).Turret.Turret)
				Height += KAI_BaseVehicle(Owner).Turret.Turret.Height; //Now we codin'
			
			Return Height;
		}
		Return Owner.Height;
	}
	
	Override Void Tick()
	{
		Super.Tick();
		
		If (IsFrozen()) Return;
		
		If (Group && Group.GetNPCGroupFlags() & Group.NPCGRP_NOICONS) //Icons are disabled for this group, go invisible and stop.
		{
			Alpha = 0;
			Return;
		}
		Else
			Alpha = 1;
		
		If (Owner && Group) //Move graphic relative to the member it's following.
		{
			Pos.XY = Owner.Pos.XY;
			Pos.Z = Owner.Pos.Z + GetOwnerHeight() + 6;
		}
		Else
			Destroy();
	}
}

//Special extra icon attached to a members' group icon. This icon is only created if the member in question is a player.
Class KAI_GroupPlayerIcon : KAI_GroupIcon
{
	KAI_GroupIcon Master; //The group icon you're attached to.
	
	Override Void Tick()
	{
		VisualThinker.Tick();
		
		If (IsFrozen()) Return;
		
		If (Group && Group.GetNPCGroupFlags() & Group.NPCGRP_NOICONS)
		{
			Alpha = 0;
			Return;
		}
		Else
			Alpha = 1;
		
		If (Master && Group) //Player indicator is straight above the normal member icon.
		{
			Pos.XY = Master.Pos.XY;
			Pos.Z = Master.Pos.Z + TexMan.CheckRealHeight (Master.Texture) + 3;
		}
		Else
			Destroy();
	}
}