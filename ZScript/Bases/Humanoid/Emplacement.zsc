//MAYDO: Add power levels for emplacements probably. Such as for determining how powerful an emplacement is or some shit?
//The base emplacement class for the library. Emplacements can be used by both players and KAI_Humanoid NPCs by default.
Class KAI_Emplacement : Actor Abstract
{
	Default
	{
		Radius 16;
		Height 48;
		Mass 50;
		Obituary "%o managed to die from an interactive inanimate object";
		
		+FloorClip;
		+Solid;
		//+Shootable; //NOTE: If you want, it should also be perfectly possible to make an emplacement that can be destroyed! BUT, you'll have to do it yourself.
	}
	
	Mixin KAI_CheckFunctions;
	
	Private Int EmplacementFlags;
	FlagDef NoPlayerUse : EmplacementFlags, 0; //Emplacement can't be manned by players, NPC-only.
	FlagDef NoNPCUse : EmplacementFlags, 1; //Emplacement can't be manned by NPCs, player-only.
	
	//Variables and properties for handling actually morphing NPCs and players to the right classes.
	Map <String, Class <KAI_EmplacementNPC> > NPCMap; //The map used to assign NPCs that may use the emplacement, to what emplacement they should specifically turn into.
	Class <KAI_EmplacementNPC> NPCFallback; //The morph class to fall back if the NPC that's getting on the emplacement isn't in the NPCMap.
	Class <KAI_EmplacementPlayer> PlayerMorph; //The morph all players will turn to, for stuff like class specific morphs and skin-specific sprites, you have to handle it yourself.
	Property NPCFallback : NPCFallback;
	Property PlayerMorph : PlayerMorph;
	Sound EnterSound; //The sound that plays, if any, when an actor enters the turret.
	Property EnterSound : EnterSound;
	
	Actor Operator; //Who is currently using this emplacement? If null, this emplacement is not in use. Points to the unmorphed original actor.
	Actor OperatorMorph; //A pointer to the morph the Operator was turned into to use the emplacement.
	Vector3 EnterPos; //The position relative to the emplacement that the operator entered it from.
	KAI_DataToken HazardList; //A KAI_DataToken that the emplacement uses to listen in on hazards, in case an NPC wants to check what hazards are around the emplacement.
	
	Override Void PostBeginPlay ()
	{
		Super.PostBeginPlay();
		
		EnterPos = (Double.NaN, Double.NaN, Double.NaN);
		HazardList = KAI_DataToken(GiveInventoryType ("KAI_DataToken"));
		If (HazardList) HazardList.bAvoidHazards = True;
	}
	
	Override Bool Used (Actor User)
	{
		Super.Used(User);
		
		EnterEmplacement (User); //Run conditions for when an actor can succesfully operate the emplacement.
		Return True;
	}
	
	//Handle the logic for an NPC or player "entering" an emplacement.
	Virtual Bool EnterEmplacement (Actor User)
	{
		If (Operator || !User) //Fuck off we're full. Or there's no user.
			Return False;
		
		If (User.bIsMonster && !(User Is "KAI_Humanoid") || User.bIsMonster && KAI_Humanoid(User).Emplacement) //Can only be used by KAI_Humanoid monsters specifically. Also can't enter if already in another emplacement.
			Return False;
		
		If (bDormant || IsDead(Self) || IsDead(User) || IsInanimateObject(User)) //Can't use dormant or destroyed emplacements. Also can't be used by inanimate objects.
			Return False;
		
		If (bNoPlayerUse && User.Player || bNoNPCUse && User.bIsMonster) //Custom flag disqualifiers.
			Return False;
		
		If (User Is "KAI_Humanoid")
			KAI_Humanoid(User).Emplacement = Self; //Needs to be set before Morph() so the PostMorph() override in KAI_Humanoid can pass the operator pointers.
		
		Class <KAI_EmplacementNPC> NPCMorph;
		If (!User.Player) NPCMorph = GetNPCMorph(User.GetClassName());
		Bool Morbed = User.Morph (Self,PlayerMorph,NPCMorph,INT.MAX/2,MRF_UNDOBYDEATH|MRF_LOSEACTUALWEAPON|MRF_FULLHEALTH|MRF_KEEPARMOR|MRF_NEWTIDBEHAVIOUR,Null,Null);
		If (Morbed) //We "entered" the emplacement (Morphed into it)
		{
			EnterPos = Level.Vec3Diff (Pos,User.Pos); //Get position of operator relative to emplacement, to warp them back there upon exiting.
			OperatorMorph = User.Alternative;
			Operator = User;
			OperatorMorph.SetOrigin (Pos,True); //Put the operator on the turrets' pitch, angle, and position.
			OperatorMorph.Angle = Angle;
			OperatorMorph.Pitch = Pitch;
			OperatorMorph.A_SetHealth (Operator.Health);
			OperatorMorph.StartHealth = Operator.GetMaxHealth();
			If (OperatorMorph Is "KAI_EmplacementNPC")
				KAI_EmplacementNPC(OperatorMorph).Emplacement = Self; //So doing "KAI_Humanoid(Alternative).Emplacement" when checking from the NPC morph isn't needed.
			If (OperatorMorph Is "KAI_EmplacementPlayer")
				KAI_EmplacementPlayer(OperatorMorph).Emplacement = Self;
			A_StartSound (EnterSound);
			A_ChangeLinkFlags (True, True); //Become intangible.
			If (Operator Is "KAI_Humanoid") KAI_Humanoid(Operator).OnEmplacementEnter();
			If (Operator.Player) Operator.Player.Uncrouch(); //Uncrouch before entering to not instantly exit.
			Return True;
		}
		If (User Is "KAI_Humanoid")
			KAI_Humanoid(User).Emplacement = Null;
		If (User Is "KAI_EmplacementPlayer")
			KAI_EmplacementPlayer(User).Emplacement = Null;
		Return False;
	}
	
	//Handle the logic for an NPC or player "leaving" an emplacement.
	Virtual Void ExitEmplacement ()
	{
		If (!Operator) Return; //There's nobody that needs to leave.
		Bool UnMorb = OperatorMorph.UnMorph (Self,0,True); //DoExitEmplacement() is handled on KAI_EmplacementNPC and KAI_EmplacementPlayer directly.
		//If (UnMorb)
			//DoExitEmplacement();
		Return;
	}
	
	//Runs the status changes to properly exit an emplacement. Like if the operator unmorphs on their own by the morph tics running out somehow, or them dying.
	Void DoExitEmplacement ()
	{
		If (!Operator)
			Return;
		
		Let Input = (RotateVector(EnterPos.XY,Angle),EnterPos.Z);
		Operator.SetOrigin (Level.Vec3Offset(Pos,Input),True); //Revert position to where the operator was before getting in.
		EnterPos = (Double.NaN, Double.NaN, Double.NaN);
		
		If (Operator Is "KAI_Humanoid")
		{
			KAI_Humanoid(Operator).OnEmplacementExit();
			KAI_Humanoid(Operator).Emplacement = Null;
		}
		If (Operator.Player) Operator.Player.Uncrouch();
		If (OperatorMorph.Player) OperatorMorph.Player.Uncrouch();
		Operator = OperatorMorph = Null;
		A_ChangeLinkFlags (False, False);
	}
	
	//Add an explicitly supported NPC class, and the emplacement morph they turn to.
	Bool AddNPCMorph (String NPCClass, Class<KAI_EmplacementNPC> MorphClass)
	{
		If (NPCMap.CheckKey(NPCClass)) //Already have an NPC-Morph association.
		{
			Console.Printf ("\c[Yellow]KAI_Emplacement: NPC Class %s is already mapped to KAI_EmplacementNPC %s",NPCClass,MorphClass.GetClassName());
			Return False;
		}
		
		NPCMap.Insert (NPCClass, MorphClass);
		
		Return True;
	}
	
	//Find the morph class associated with that particular NPC, if any. Otherwise it returns the fallback NPC morph, if there's any.
	Class <KAI_EmplacementNPC> GetNPCMorph (String NPCClass)
	{
		Class <KAI_EmplacementNPC> Morph;
		Bool Found;
		[Morph, Found] = NPCMap.CheckValue (NPCClass);
		If (KAI_DebugPrintMessages && Found) Console.Printf ("KAI_Emplacement.GetNPCMorph(): Checking for NPC of class %s, actor is assigned to morph %s",NPCClass,Morph.GetClassName());
		If (Found)
			Return Morph;
		If (KAI_DebugPrintMessages) Console.Printf ("KAI_Emplacement.GetNPCMorph(): Couldn't find morph for NPC class, using NPCFallback class");
		Return NPCFallback;
	}
	
	//Create a fake operator visual effect to serve as a placeholder for NPC and player operators if you have no unique emplacement sprites.
	VisualThinker CreateFakeOperator (Vector3 Offsets = (0,0,0))
	{
		Let Illusion = KAI_EmplacementFakeOperator(Level.SpawnVisualThinker("KAI_EmplacementFakeOperator"));
		If (Illusion)
		{
			Illusion.Pos = Level.Vec3Offset (Pos,Offsets);
			Illusion.Offsets = Level.Vec3Diff (Pos, Illusion.Pos);
			Illusion.Operator = Operator;
			Illusion.Emplacement = Self;
			Illusion.Texture = CurState.GetSpriteTexture (0); //Just get some placeholder graphic for now so the thinker won't immediately self-destruct.
			Return Illusion;
		}
		Return Null;
	}
}

Class KAI_EmplacementNPC : KAI_Actor Abstract
{
	Default //Pretty much every other property and flag is up to the modder.
	{
		Speed 0;
		+DontMorph; //Probably not a good idea to have nested morphs. Even the original Hexen animal morphs use this flag sooooo.
		+DontThrust;
		-AvoidHazards;
	}
	Mixin KAI_CheckFunctions;
	Mixin HumanoidAndVehicleCode;
	KAI_Emplacement Emplacement; //The emplacement this morph is part of.
	Actor OperatorHack;
	
	//Handle the NPC exiting the emplacement.
	Override Void PreUnmorph (Actor Mo, Bool Current)
	{
		Super.PreUnmorph (Mo, Current);
		
		If (Mo && Emplacement && Emplacement.Operator)
		{
			If (!IsDead(Emplacement.Operator.Alternative)) OperatorHack = Emplacement.Operator;
			Emplacement.DoExitEmplacement();
		}
	}
	
	Override Void PostUnmorph (Actor Mo, Bool Current)
	{
		Super.PostUnmorph (Mo, Current);
		
		If (OperatorHack)
			OperatorHack.A_SetHealth(Health);
	}
	
	Override Void Tick()
	{
		Super.Tick();
		
		If (IsFrozen())
			Return;
		
		If (Emplacement) //Update the hidden emplacement every tick with the pitch and angle you're supposed to be moving it at.
		{
			Emplacement.Angle = Angle;
			Emplacement.Pitch = Pitch;
		}
	}
}

Class KAI_EmplacementPlayer : PlayerPawn
{
	Default //Pretty much every other property and flag is up to the modder.
	{
		Speed 0;
		Player.ForwardMove 0,0;
		Player.SideMove 0,0;
		Player.JumpZ 0;
		+DontMorph; //The Hexen animal player classes used for morphing don't disallow morphing. But I do by default just to be safe.
		+DontThrust;
		+NoSkin; //No skins allowed, helps prevent problems like the player-on-emplacement sprites copying the players' current skin scale!
	}
	Mixin KAI_CheckFunctions;
	
	KAI_Emplacement Emplacement;
	Actor OperatorHack;
	
	Override Void PreUnmorph (Actor Mo, Bool Current)
	{
		Super.PreUnmorph (Mo, Current);
		
		If (Mo && Emplacement && Emplacement.Operator)
		{
			OperatorHack = Emplacement.Operator;
			Emplacement.DoExitEmplacement();
		}
	}
	
	Override Void PostUnmorph (Actor Mo, Bool Current)
	{
		Super.PostUnmorph (Mo, Current);
		
		If (!IsDead(Self))
			OperatorHack.A_SetHealth(Health);
	}
	
	Override Void PlayerThink()
	{
		Super.PlayerThink();
		
		If (IsFrozen())
			Return;
		
		If (Self && Emplacement && Player && (Player.Cmd.Buttons & BT_USE) && !(Player.OldButtons & BT_USE))
			Emplacement.ExitEmplacement();
		
		If (Player) Player.Uncrouch();
		
		If (Emplacement) //Update the hidden emplacement every tick with the pitch and angle you're supposed to be moving it at.
		{
			Emplacement.Angle = Angle;
			Emplacement.Pitch = Pitch;
		}
	}
}

Class KAI_EmplacementFakeOperator : VisualThinker
{
	Vector3 Offsets;
	Actor Operator;
	KAI_Emplacement Emplacement;
	Mixin KAI_CheckFunctions;
	State SpriteState; //The state which we get the sprite to use from.
	Int PlayerSkinID; //The number of the players' skin. Only relevant if the operator is both a player, and of course, is using a skin.
	
	//Cut down version of GetSpriteAngleFromPos().
	//CREDIT: DileepVR for helping me fucking finally get this stupid shit to work.
	/*NOTE: OH YEAH, WHEN *YOU* USE THIS IN CONJUNCTION WITH GETSPRITETEXTURE() IN YOUR OWN CODE, ALSO MAKE SURE TO TAKE ITS' SECOND RETURN TO CONTROL IF THE
	VISUALTHINKER SHOULD BE FLIPPED.*/
	Int FakeOpGetSpriteAngle (Vector3 CamPos, Bool SixteenAngles)
	{
		Vector3 Coords = Level.SphericalCoords (Pos,CamPos);
		Double Ang = -Coords.X;
		
		Double Angle = Emplacement.Angle - 180; //This code's for a visualthinker, so no angle of its' own, so it takes the angle of the actor it's attached to.
		Double SprAng = Angle - Ang;
		Double Result;
		If (!SixteenAngles)
			Result = BAM (-SprAng + 45.0 / 2 * 9) >> 28;
		Else
			Result = BAM (-SprAng + 45.0 / 2 * 9 - 180.0 / 16) >> 28;
		Return Int(Result);
	}

	
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		Flags = SPF_NO_XY_BILLBOARD;
		//Set the first idle frame of the operator as the texture.
		If (Operator)
		{
			//If (!Texture)
			//Acquire the first valid see state sprite of the operator to use as the fallback graphic. If the graphic is TNT1A0, look for the next state's sprite.
			{
				Translation = Operator.Translation;
				Int SkinNum = Emplacement.OperatorMorph.Player ? Emplacement.OperatorMorph.Player.GetSkin() : 0;
				State LeState = GetDefaultByType(Operator.GetClass()).SeeState;
				If (!LeState)
				{
					Console.PrintfEx (PRINT_HIGH,"\c[Red]WARNING: Tried to create fake operator for operator %p(%s), but that NPC has no see state!",Operator,Operator.GetClassName());
					Destroy();
					Return;
				}
				TextureID Graphic = LeState.GetSpriteTexture (0,SkinNum);
				For (Int I; I < 32; I++)
				{
					If (Graphic.IsValid() && !(Texman.GetName(Graphic) ~== "TNT1A0")) //This is NOT a valid graphic, look for a valid graphic in the next state!
						Break;
					LeState = LeState.NextState;
					Graphic = LeState.GetSpriteTexture (FakeOpGetSpriteAngle(Players[ConsolePlayer].Camera.Pos,True),SkinNum);
				}
				SpriteState = LeState;
				Texture = Graphic;
				PlayerSkinID = SkinNum;
			}
		}
	}
	
	Override Void Tick()
	{
		Super.Tick();
		
		If (!Operator || !Emplacement || !KAI_Emplacement(Emplacement).Operator)
		{
			Destroy();
			Return;
		}
		
		If (Players[ConsolePlayer].Camera)
		{
			If (PlayerSkinID != 0)
				[Texture,bXFlip,Scale] = SpriteState.GetSpriteTexture (FakeOpGetSpriteAngle(Players[ConsolePlayer].Camera.Pos,True),PlayerSkinID);
			Else //GetSpriteTexture's scale return is only for skins.
			{
				Vector2 Garbage;
				[Texture,bXFlip,Garbage] = SpriteState.GetSpriteTexture (FakeOpGetSpriteAngle(Players[ConsolePlayer].Camera.Pos,True),PlayerSkinID);
			}
		}
		//console.printf ("RENDERING STATS: GRAPHIC %s, MIRRORED %d, SCALE %.2f %.2f",texman.getname(texture),bxflip,scale);
		If (IsFrozen())
			Return;
		
		Pos = KAI_Math.Vec3OffsetRelative (Emplacement, Offsets,flags:KAI_Math.V3R_ANGLEONLY);
	}
}