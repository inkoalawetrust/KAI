//Common effects used by most or all vehicles.

//Customizable explosion actor.
Class MVP_BigExplosion : Actor
{
	Default
	{
		RenderStyle "Add";
		MaxTargetRange 256; //The maximum range of the explosion.
		MeleeRange 96; //The range around the explosion in which actors take it's full damage.
		Damage 256; //The damage of the explosion, this property can only be changed with the SetDamage() function.
		+NeverTarget;
		+NotAutoaimed;
		+Bright;
	}
	States
	{
		Spawn:
			MCR3 A 3 NoDelay
			{
				A_Explode (Damage,Int(MaxTargetRange),XF_HURTSOURCE|XF_NOTMISSILE|XF_EXPLICITDAMAGETYPE,True,Int(MeleeRange),damagetype:'Explosion');
				A_QuakeEx (2,2,2,35*5,0,640,flags:QF_SCALEDOWN|QF_3D);
				A_StartSound ("SFX/BigExplosion",CHAN_AUTO,attenuation:0.2);
			}
			MCR3 BC 3;
			MCR3 DE 5;
			MCR3 FG 8;
			Stop;
	}
}

Class MVP_Explosion : Actor
{
	Default
	{
		RenderStyle "Add";
		MaxTargetRange 256; //The maximum range of the explosion.
		MeleeRange 48; //The range around the explosion in which actors take it's full damage.
		Damage 128; //The damage of the explosion, this property can only be changed with the SetDamage() function.
		+NeverTarget;
		+NotAutoaimed;
		+Bright;
	}
	States
	{
		Spawn:
			ZTXP A 2 NoDelay
			{
				//A_AttachLight ('Explosion',DynamicLight.PulseLight,"FFFF8F",256,0,DynamicLight.LF_Attenuate,param:2.857142857142857);
				A_Explode (Damage,Int(MaxTargetRange),XF_HURTSOURCE|XF_NOTMISSILE|XF_EXPLICITDAMAGETYPE,True,Int(MeleeRange),damagetype:'Explosion');
				A_StartSound ("SFX/Explosion",CHAN_AUTO,attenuation:0.4);
			}
			ZTXP BCDE 2;
			ZTXP FGHIJKLMNOPQRST 3;
			//TNT1 A 0 A_RemoveLight ('Explosion');
			Stop;
	}
}

//Randomize the scale of the splashes and the APC shell explosions a bit.
Class MVP_LiquidSplash : KAI_MixinActor
{
	Default
	{
		MeleeRange 0; //The range in which the splash does full explosion damage.
		MaxTargetRange 0;
		+NoGravity;
		+MoveWithSector;
	}
	
	Override Void BeginPlay ()
	{
		Super.BeginPlay();
		
		Volume = 1.0; //Default volume is 1.
		Attenuation = 0.6;
	}
	
	Override Void PostBeginPlay ()
	{
		Super.PostBeginPlay();
		
		If (ExplosionDamageType == '' || !ExplosionDamageType)
			ExplosionDamageType = 'Explosion'; //Default damage type.
		
		If (!SplashSound)
			SplashSound = "SFX/LiquidExplosion";
	}
	
	//Mixin MVP_UniversalFunctions;
	Name ExplosionDamageType;
	Int RadiusDamage;
	Sound SplashSound;
	Double Volume, Attenuation;
	Bool DontHarmSource;
	Int LiquidType;
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				Switch (LiquidType)
				{
					Case LIQUID_WATER:
						Sprite = GetSpriteIndex ('GSPL');
						Break;
					Case LIQUID_NUKAGE:
						Sprite = GetSpriteIndex ('GSPN');
						Break;
					Case LIQUID_BLOOD:
						Sprite = GetSpriteIndex ('GSPB');
						Break;
					Case LIQUID_LAVA:
						Sprite = GetSpriteIndex ('GSPP');
						Break;
					Case LIQUID_SLIME:
						Sprite = GetSpriteIndex ('GSPS');
						Break;
					Default:
						Sprite = GetSpriteIndex ('GSPL');
						Break;
				}
			}
			#### A 3 A_StartSound (SplashSound,CHAN_BODY,0,Volume,Attenuation);
			#### B 3
			{
				If (RadiusDamage > 0)
				{
					MakeAlliesImmuneToExplosion (RadiusDamage);
					A_Explode (RadiusDamage,Int(MaxTargetRange),(DontHarmSource ? 0 : XF_HURTSOURCE)|XF_EXPLICITDAMAGETYPE,fulldamagedistance:Int(MeleeRange),damagetype:ExplosionDamageType);
					RemoveAllyExplosionImmunity();
				}
			}
			#### CDEF 4;
			#### GHIJKLMNOPQRSTUVWXYZ 3;
			Stop;

		//Load frames into memory to not cause GetSpriteIndex to trigger crashes.
		Storage:
			GSPL ABCDEFGHIJKLMOPQRSTUVWXYZ 0;
			GSPN ABCDEFGHIJKLMOPQRSTUVWXYZ 0;
			GSPB ABCDEFGHIJKLMOPQRSTUVWXYZ 0;
			GSPP ABCDEFGHIJKLMOPQRSTUVWXYZ 0;
			GSPS ABCDEFGHIJKLMOPQRSTUVWXYZ 0;
			Stop;
	}
}

Class MVP_Flame : KAI_MixinActor
{
	Default
	{
		RenderStyle "Add";
		ReactionTime (35*30); //Flame lifespan.
		Scale 0.75;
		DamageType "Fire"; //No shit sherlock.
		Damage 5; //Damage done every 16 tics by the fire.
		MaxTargetRange 48; //Range of the flame.
		MeleeRange 24; //Radius in which the flame does its' full damage with no falloff.
		+NeverTarget;
		+NotAutoaimed;
		+NoDamageThrust;
		+Bright;
	}
	
	Vector3 Offsets;
	//Mixin MVP_MathFunctions;
	
	Protected Void RemoveFromList()
	{
		If (Master && Master Is "KAI_BaseVehicle")
		{
			KAI_BaseVehicle Vehicle = KAI_BaseVehicle(Master);
			If (Vehicle.DeathFlames.Find(Self) == Vehicle.DeathFlames.Size()) Return;
			Vehicle.DeathFlames.Delete (Vehicle.DeathFlames.Find(Self));
		}
	}
	
	Override Void OnDestroy()
	{
		Super.OnDestroy();
		
		RemoveFromList();
	}
	
	Override Void Die (Actor Source, Actor Inflictor, Int DmgFlags, Name MeansOfDeath)
	{
		Super.Die (Source, Inflictor, DmgFlags, MeansOfDeath);
		RemoveFromList();
	}
	
	Override Void Tick()
	{
		Super.Tick();
		
		If (IsFrozen()) Return;
		
		//Stick to your master, if any.
		If (Master)
			SetOrigin(Vec3OffsetRelative (Master,Offsets,flags:V3R_ANGLEONLY),True);
		
		If (!InStateSequence(CurState,ResolveState ("Death")))
		{
			If (!(ReactionTime == 0) && GetAge() >= ReactionTime)
				Die (Null,Null);
			
			If (GetAge() % 16 == 0)
				A_Explode (Int(Damage*FRandom (0.75,1.5)),Int(MaxTargetRange),XF_HURTSOURCE|XF_NOTMISSILE,False,Int(MeleeRange));
		}
	}
	
	States
	{
		Spawn:
			F1RE A 0 NoDelay
			{
				bXFlip = Random (False,True);
				
				A_StartSound ("SFX/Fire",CHAN_BODY,flags:CHANF_LOOPING,0.5);
				A_AttachLight ('Fire',DynamicLight.FlickerLight,"EBDB57",48,40,param:0.25);
			}
			F1RE ABCDEFGH 4;
			Goto Spawn+1;
		Death:
			F1RE A 4;
			F1RE B 4 A_SoundVolume (CHAN_BODY,0.8);
			F1RE # 0 {Scale -= (.15,.15);}
			F1RE C 4 A_SoundVolume (CHAN_BODY,0.6);
			F1RE # 0 {Scale -= (.15,.15);}
			F1RE D 4 A_SoundVolume (CHAN_BODY,0.4);
			F1RE # 0 {Scale -= (.15,.15);}
			F1RE E 4 A_SoundVolume (CHAN_BODY,0.2);
			F1RE # 0 {Scale -= (.15,.15);}
			TNT1 A 0 A_RemoveLight ('Fire');
			Stop;
	}
}

//A generic tracer effect particle.
Class MVP_Tracer : KAI_MixinActor
{
	Default {RenderStyle "Add"; Scale 0.5; ReactionTime 1; +NoBlockmap; +NoInteraction;}
	
	Override Void PostBeginPlay ()
	{
		Super.PostBeginPlay();
		
		SetOrigin (Vec3OffsetRelative (Self,SpawnOffsets),False);
	}
	Override Void Tick()
	{
		If (IsFrozen()) Return;
		//Super.Tick(); //Not needed, at most I may copy over the state progression code for missile smoke trails.
		If (GetAge() >= ReactionTime)
			Destroy();
	}
	
	//Mixin MVP_MathFunctions;
	Vector3 SpawnOffsets;
	
	States
	{
		Spawn:
			MVP1 B -1 Bright;
			Stop;
	}
}

Class MVP_Spark : Actor
{
	Default
	{
		RenderStyle "Add";
		Scale 0.05;
		+NoInteraction;
		+NoGravity;
	}
	States
	{
		Spawn:
			SPKY A 0 NoDelay
			{
				A_StartSound ("World/Spark", CHAN_AUTO, CHANF_DEFAULT, 1, ATTN_STATIC);
				Scale *= FRandom (0.8,2.0) ;
			}
			SPKY ABCDEF 4 Bright;
			TNT1 A 35;
			Stop;
	}
}
