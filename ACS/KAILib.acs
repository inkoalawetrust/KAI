#Library "KAILib"
#Include "ZCommon.acs"

//Flag names from CreateGroupACS().
#LibDefine NPCGRP_EVERYONEDIED  1
#LibDefine NPCGRP_NOMEMBEREVENT 2
#LibDefine NPCGRP_NOICONS		 4

//Order types
#LibDefine ORDER_NONE		0
#LibDefine ORDER_FOLLOW	1
#LibDefine ORDER_STAY		2
#LibDefine ORDER_WANDER	3
//#LibDefine ORDER_GOTOPOINT	4
#LibDefine ALLORDERS		4

/*HACK: For cleanliness and readability. KAI_DataToken uses custom variables to pass data for KAI NPCs to read,
such as threat levels. But trying to access those variables from an actor that possibly may not exist directly
through ZScript causes startup errors if that actor (The token) does not exist, like if your non-KAI mod is not
loaded alongside the library. The best solution ? This ACS API. For how to use it, read the Github wiki.*/

//Set the tokens' threat level for the actor it's attached to.
Script "KAIToken_SetThreatLevel" (Int ThreatLevel)
{
	If (!CalledFromToken()) Terminate;
	SetUserVariable (0,"ThreatLevel",ThreatLevel);
}

//Return the tokens' threat level.
Script "KAIToken_GetThreatLevel" (Void)
{
	If (!CalledFromToken()) Terminate;
	SetResultValue(GetUserVariable (0,"ThreatLevel"));
}

//Specifies if the external non-KAI actor moves only with velocity.
//If your NPC changes between real momentum and calling P_TryMove(), then change this accordingly on the item. 
Script "KAI_Token_SetVelocityMonster" (Int Set)
{
	If (!CalledFromToken()) Terminate;
	SetUserVariable (0,"VelocityMonster",Set);
}

//Return the tokens' VelocityMonster value.
Script "KAI_Token_GetVelocityMonster" (Int Set)
{
	If (!CalledFromToken()) Terminate;
	SetResultValue(GetUserVariable (0,"VelocityMonster"));
}

//Deflection parameter setters and getters.
//TODO: ADD THE ABILITY TO SET AND READ DEFLECTION VECTOR VALUES, SEE IF THAT'S EVEN DOABLE THROUGH ACS WITH DEFLECTIONFUNNEL.X/Y/Z/W
Script "KAI_Token_SetDeflectChance" (Int Set)
{
	If (!CalledFromToken()) Terminate;
	SetUserVariable (0,"DeflectionChance",Set);
}

Script "KAI_Token_GetDeflectChance" (Int Set)
{
	If (!CalledFromToken()) Terminate;
	SetResultValue(GetUserVariable (0,"DeflectionChance"));
}

Script "KAI_Token_SetDeflectDamageFactor" (Int Set)
{
	If (!CalledFromToken()) Terminate;
	SetUserVariable (0,"DeflectDamageFactor",Set);
}

Script "KAI_Token_GetDeflectDamageFactor" (Int Set)
{
	If (!CalledFromToken()) Terminate;
	SetResultValue(GetUserVariable (0,"DeflectDamageFactor"));
}

Script "KAI_Token_SetDeflectSpeedFactor" (Int Set)
{
	If (!CalledFromToken()) Terminate;
	SetUserVariable (0,"DeflectSlowDownFactor",Set);
}

Script "KAI_Token_GetDeflectSpeedFactor" (Int Set)
{
	If (!CalledFromToken()) Terminate;
	SetResultValue(GetUserVariable (0,"DeflectSlowDownFactor"));
}

//Safety measure to prevent changing the variables of non-token actors the scripts above are called to.
Function Bool CalledFromToken (Void)
{
	Return (CheckActorClass(0,"KAI_DataToken"));
}