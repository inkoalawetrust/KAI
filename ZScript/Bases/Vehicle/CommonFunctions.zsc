//$GZDB_SKIP
//Vehicle functions
Extend Class KAI_BaseVehicle
{
	//=====|Spawn functions|=====\\
	//The barebones code for spawning a vehicle turret. Useful for SpawnVehicleTurret virtuals with custom logic.
	Void SpawnTurret (Class <KAI_BaseTurret> TurretClass)
	{
		Turret = KAI_BaseTurret(Spawn (TurretClass,Pos+TurretOffsets));
		If (Turret)
		{
			Turret.CopyFriendliness (Self,False);
			Turret.SpawnFlags = SpawnFlags;
			Turret.HandleSpawnFlags();
			Turret.Angle = Angle;
			Turret.Pitch = Pitch;
			Turret.Master = Self;
			Double HealthFactor = Double(Health) / Double(Default.Health); //HACK: There's no proper way to get the exact spawn health or spawn health multiplier defined in the map editor.
			Turret.Health *= HealthFactor;
			Turret.TurretOffsets = TurretOffsets;
			If (bPassThreatLevelToTurrets && Turret.ThreatLevel == THREAT_ASSESS && ThreatLevel != THREAT_ASSESS) Turret.ThreatLevel = ThreatLevel;
		}
		Return;
	}
	
	//High quality code rips.
	Enum DynamicLightArgs
	{
	   LIGHT_RED = 0,
	   LIGHT_GREEN = 1,
	   LIGHT_BLUE = 2,
	   LIGHT_INTENSITY = 3,
	   LIGHT_SECONDARY_INTENSITY = 4,
	   LIGHT_SCALE = 3,
	}
	
	//VHSF = Vehicle Headlight Spawn Function
	Enum HeadlightSpawnFlags
	{
		VHSF_BACKLIGHT = 1 << 0 //Is this a backlight ? If yes, the angle it faces relative to the vehicle is inverted, so that it faces behind the vehicle.
	}
	
	//Spawns a headlight with the specified parameters. Then returns a pointer to it.
	//AttachTo: The actor to attach the headlight to, this is just the caller usually.
	//Offsets: The XYZ offsets to pass to the light. This doesn't call SetOffset() on the dynamic light because m_Ofs doesn't change before PostBeginPlay().
	//Flags: The flags to pass to the headlight.
	//LightColor: The RGB color of the headlight. This isn't a Color variable since that's not what dynamic light actors use. Default is white.
	//Intensity: The intensity of the headlight. Default is 256.
	//SpotlightAngles: The inner (X) and outer (Y) angle of the headlight. Default is (10,25), the default of the DynamicLight class.
	KAI_Headlight SpawnVehicleHeadlight (Actor AttachTo, Vector3 Offsets, Int Flags = 0, Vector3 LightColor = (255,255,255), Int Intensity = 256, Vector2 SpotlightAngles = (10,25))
	{
		If (!AttachTo) AttachTo = Self; //Just in case.
		KAI_Headlight Headlight = KAI_Headlight(Spawn ("KAI_Headlight",Pos,ALLOW_REPLACE));
		
		Headlight.Target = AttachTo; //Dynamic light actors use their target pointer to store who they are attached to.
		Headlight.Offset = Offsets;
		If (Flags & VHSF_BACKLIGHT) Headlight.IsBacklight = True;
		
		//XYZ = RGB
		Headlight.Args[LIGHT_RED] = Int(LightColor.X);
		Headlight.Args[LIGHT_GREEN] = Int(LightColor.Y);
		Headlight.Args[LIGHT_BLUE] = Int(LightColor.Z);
		Headlight.Args[LIGHT_INTENSITY] = Intensity;
		
		//X is the inner angle. Y is the outer angle.
		Headlight.SpotInnerAngle = SpotlightAngles.X;
		Headlight.SpotOuterAngle = SpotlightAngles.Y;
		
		Return Headlight;
	}
	
	//=====|Vehicle behaviors|=====\\
	Enum KAIVehicleChaseFlags //LVC = Land Vehicle Chase
	{
		LVC_ATTACKWHENSCARED = 1 << 0, //The vehicle will still be very likely to attack when scared of an enemy.
		LVC_NOTURRETRETARGET = 1 << 1, //The vehicle will never target the hull of a vehicle instead of its' turret. Even if doing so would be better.
		LVC_MAKEFRIENDSIDLE	 = 1 << 2, //Friendly vehicles will also go to their Idle state when they have no target.
		LVC_PLAYERSASTHREATS = 1 << 3, //Consider players as threats when deciding if the vehicle should retreat from its' target. e.g to run away from players in god mode the vehicle is targeting
	}
	
	//The standard land vehicle chase function.
	//WaitState: The state the vehicle should wait in if it stopped at a delayed patrol point. No state means it just calls SetState.
	//Flags: The flags to use. Look above for a list.
	//ChaseFlags: The A_Chase flags to use. Supports the same flags' KAI_MoveTowards does.
	//TurnRadius: How wide the turns the vehicle takes are, the smaller the number the bigger the turn. Default is 10 degrees per step.
	//FollowDist: The minimum distance the vehicle must have from its' friend player (If friendly) before it stops following them. To prevent dogpiling.
	//RetreatDist: The amount of distance the vehicle generally keeps from enemies. Quadrupled for actors whose threat level is above the ThreatLevelThreshold property.
	//MoveParams: A struct that can pass detailed parameters for KAI_MoveTowards/Away. For the ChaseFlags and AngleLimit params, use the ChaseFlags and TurnRadius properties.
	Void KAI_LandVehicleChase (StateLabel WaitState = Null, Int Flags = 0, Int ChaseFlags = 0, Double TurnRadius = 10, Double FollowDist = 384, Double RetreatDist = 768, MoveToParams MoveParams = Null)
	{
		//No detailed movement parameters, use defaults
		//HACK: ZScript does not allow me to make a struct instance for MoveParams if none is passed. So we create a struct and call Chase again :>>>>>>>>
		If (!MoveParams)
		{
			MoveToParams Default_Params;
			Default_Params.RunRad = 256;
			Default_Params.DetourFactor = 1.0;
			Default_Params.Attempts = 32;
			Default_Params.StepThreshold = 32;
			KAI_LandVehicleChase(WaitState, Flags, ChaseFlags, TurnRadius, FollowDist, RetreatDist, Default_Params); //The optimal GZDoom solution.
			Return;
		}
		
		Bool MovedAlready; //If one of the KAI_MoveTowards/Away calls was made. Don't call the rest.
		Double MajorThreatRange = (RetreatDist*4)*(RetreatDist*4);
		//Temporarily store the aggro multiplier that is changed by the fear code. Then reset it after ShouldAttack() finishes.
		Double OldAggro = AggressionMultiplier;
		
		//ZScript exports of different segments of GZDooms' native AI code. This is the stuff not needed for movement.
		KAI_Chase_PreChecks(ChaseFlags);
		KAI_Chase_FriendsAttackPlayerEnemies(ChaseFlags); //This and Chase_Retarget are handled here, so the fear checks below work properly.
		KAI_Chase_Retarget(ChaseFlags,Flags & LVC_MAKEFRIENDSIDLE);
		KAI_Chase_HandleActiveSound(ChaseFlags);
		
		//Handle making the vehicle run away from its' target if it's a major threat. Or it's powerless.
		If (!bNoFear && Target && !(Goal && bChaseGoal))
		{
			If (!(ChaseFlags & CHF_DONTMOVE))
			{
				//If you can't attack, run. Also run if the other actor is frightening or you're frightened.
				If (!CanAttack() || bFrightened || IsFrightening (Target) ||
				//If the targets' threat level is over the threshold, and it's visible and nearby, GTFO. Unless it's a cheating player.
				ThreatLevelThreshold != THREAT_ASSESS && AssessThreatLevel(Target, Flags & LVC_PLAYERSASTHREATS) >= ThreatLevelThreshold && (Distance3DSquared(Target) < MajorThreatRange))
				{
					//And at last, check if the target is still visible.
					If (IsVisible (Target, True))
					{
						a_log ("oh god oh fuck");
						KAI_MoveAway (Target,MoveParams.Attempts,MoveParams.RunRad,MoveParams.StepThreshold,0.5,TurnRadius,ChaseFlags,KMT_CHASEGOAL); //DetourFactor is not exposed to the struct.
						MovedAlready = True;
					}
				}
			}
			
			If (Flags & LVC_ATTACKWHENSCARED)
				AggressionMultiplier *= 0.5;
		}
		
		FollowPlayerControl (FollowDist); //Handle turning on bDontFollowPlayers if you are too close to your friendplayer.
		
		//If you can move and haven't done so already.
		If (!(ChaseFlags & CHF_DONTMOVE) && !MovedAlready)
		{
			If (!(IsPatrolling(Self) && bChaseGoal)) NearestEnemy = FindNearestEnemy (RetreatDist);
			//If you aren't patrolling and not allowed off your route, and there is an enemy nearby.
			If (NearestEnemy)
			{a_log ("the danger zone");
				KAI_MoveAway (NearestEnemy,MoveParams.Attempts,MoveParams.RunRad,MoveParams.StepThreshold,0.5,TurnRadius,ChaseFlags); //Keep your distance.
				MovedAlready = True;
			}
			//If your turrets' target is too high up for it to reach.
			Else If (Turret && Turret.Target && Turret.ElevationState == Turret.ELEVATION_TOOHIGH)
			{a_log ("moving back so my turret can fire");
				KAI_MoveAway (Turret.Target,MoveParams.Attempts,MoveParams.RunRad,MoveParams.StepThreshold,0.5,TurnRadius,ChaseFlags); //Back off to allow your turret to shoot.
				MovedAlready = True;
			}
			//If none of the other conditions are true. Run the standard A_Chase code (Minus movement), and KAI_MoveTowards.
			Else
			{
				Bool B;
				//A_Chase (Null,Null,CHF_DONTMOVE|CHF_DONTTURN|ChaseFlags); //This breaks the custom movement despite the self-explanatory flags. Okay GZDoom.
				KAI_Chase_HandleStrafing (Target,ChaseFlags); //No idea why the fuck you'd want a ground vehicle to do this. But here you go.
				[B,MovedAlready] = KAI_Chase_PatrolHandling(WaitState, 0.2, anglelimit:TurnRadius, chaseflags:ChaseFlags);
				//Finding a new target should be handled by the above A_Chase call, however if no new target was found. Call OnWander().
				//If (!Target && !(ChaseFlags & CHF_DONTIDLE))
				//	OnWander();
				
				//Finally, if you do have a target, DO move towards it, but with KAI_MoveTowards instead of the shitty native movement code.
				If (Target && !MovedAlready)
					KAI_MoveTowards (Target.Pos, MoveParams.DetourFactor, TurnRadius, ChaseFlags, KMT_CHASEGOAL);
			}
			
			MovedAlready = True;
		}
		
		If (!(Flags & LVC_NOTURRETRETARGET)) RetargetVehicleHull(); //If targeting another vehicles' turret. See if targeting the vehicle itself would be better.
		Actor CheckFrom = Turret; //Check from the turret if you should maybe stay still and shoot.
		If (!CheckFrom) CheckFrom = Self; //If you have no turret, check from yourself.
		If (StayStillAndShoot (CheckFrom)) Return;
		
		If (ShouldAttack()) //Run the unique attack decision code of the vehicle.
		{
			AggressionMultiplier = OldAggro; //Reset aggression chance.
			ChaseTimer = 0;
			Return; //End the function if the vehicle should attack.
		}
		AggressionMultiplier = OldAggro; //Reset aggression chance.
		
		HandleChaseTimer();
	}
	
	Void HandleChaseTimer() //Made into a separate function so it can be called independently by turrets and such.
	{
		//Vehicles eventually stop chasing their target after it's out of sight for long enough.
		If (SearchTime > 0)
		{
			If (ChaseTimer >= SearchTime)
			{
				A_ClearTarget();
				ChaseTimer = 0;
				//Vehicles ordered to stay also go back to standing still once the timer runs out.
				If (CurrentOrder == ORDER_STAY)
				{
					SetStateLabel ("Spawn");
					Return;
				}
			}
			
			If (!IsPatrolling(Self))
			{
				If (!Target || Target && !CheckSight (Target,SF_SEEPASTBLOCKEVERYTHING))
					ChaseTimer++;
				//Target is visible again, reset the timer.
				Else
					ChaseTimer = 0;
			}
		}
	}
	
	//As a friendly vehicle, only follow the player until within a certain distance from them, to prevent the player from being dogpiled by vehicles.
	Void FollowPlayerControl (Double MaxDist = 384)
	{
		If (!bFriendly || !PlayerInGame[FriendPlayer-1] || CurrentOrder == ORDER_WANDER)
			Return;
		
		bDontFollowPlayers = (Distance3DSquared (Players[FriendPlayer-1].Mo) <= MaxDist*MaxDist);
	}
	
	Enum RetargetHullFlags
	{
		RVHF_NOTARGETCHANGE 		= 1 << 0, //This function should only return if the hull should be targeted, instead of also doing the actual retargeting.
		RVHF_NOTRANSFERDAMAGECHECK	= 1 << 1, //The function should not retarget hulls larger than their bTransferDamage turret.
		RVHF_NOWEAKHULLCHECK		= 1 << 2, //The function should not retarget hulls weaker than whatever turret the caller is targeting.
	}
	
	//Makes vehicles target the hulls of vehicles instead of their turrets' under certain conditions:
	//If the turret has bTransferDamage and is smaller than the vehicle it's attached to. Since attacking the turret only harms the vehicle, might as well shoot the bigger hull instead.
	//If the hulls' health is less than the health of the turret being targeted. Would be quicker to kill the vehicle than the turret.
	//Flags: Look above for a list of flags.
	Bool RetargetVehicleHull (Int Flags = 0)
	{
		If (!Target || !Master) Return False;
		
		If (Target Is "KAI_BaseTurret" && Target.Master)
		{
			//If the damage that the targeted turret takes is transfered to the vehicle anyway (bTransferDamage).
			If (!(Flags & RVHF_NOTRANSFERDAMAGECHECK) && KAI_BaseTurret(Target).bTransferDamage)
			{
				//And the vehicle the turret is attached to is overall bigger than the turret.
				If (Master.Radius > Target.Radius && Master.Height > Turret.Height)
				{
					If (!(Flags & RVHF_NOTARGETCHANGE)) Target = Target.Master; //Then target the vehicle the turret is attached to.
					Return True;
				}
			}
			//If the turret doesn't have bTransferDamage, and it's health is higher than the hulls'.
			If (!(Flags & RVHF_NOWEAKHULLCHECK) && !KAI_BaseTurret(Target).bTransferDamage && Target.Master.Health < (Target.Health*0.8))
			{
				If (!(Flags & RVHF_NOTARGETCHANGE)) Target = Target.Master; //Then target the vehicle the turret is attached to.
				Return True;
			}
		}
		Return False;
	}
	
	//Used to make vehicles able to run over and grind corpses like crushers.
	Void KAI_CrushCorpses (Double RadiusMultiplier = 1.75)
	{
		BlockThingsIterator Crusher = BlockThingsIterator.Create (Self);
		Actor Mobj;
		
		While (Crusher.Next())
		{
			Mobj = Crusher.Thing;
			If (!Mobj) Continue; //No actor to crush.
			//This runs before the bDontGib check, so that vehicles can remove corpse targets if they were already crushed.
			//If (Mobj == CorpseTarget) CorpseTarget = Null; //If the corpse you crushed was one you were targeting already, then remove the pointer to it.
			If (!IsDead (Mobj)) Continue; //Actor isn't dead already.
			If (Mobj.bDontGib) Continue; //Has already been crushed.
			If (Mobj.Pos.Z > Mobj.FloorZ) Continue; //Corpse is off the ground. Like if it's falling.
			If (Mobj.Default.bFloat) Continue; //Don't crush floating corpses, particularly recently killed Lost Souls, which end up producing floating gibs.
			If (Mobj.Radius > MaxCorpseRadius || Mobj.Height > MaxCorpseHeight) Continue; //Actor is too big.
			If (Distance3DSquared (Mobj) > ((Radius*2)*RadiusMultiplier) * ((Radius*2)*RadiusMultiplier)) Continue;
			
			Mobj.Grind (False); //Crush corpse, but not items.
		}
	}
	
	//Throws actors away from the caller, the code is mostly copied from BlastActor.
	Void FlingActor (Actor Victim, Double Speed, Bool Harmless, Bool PushImmovables = False)
	{
		Double Ang = AngleTo(Victim);
		Vector2 Move = AngleToVector(Ang, Speed);
		
		Victim.Vel.XY = Move;
		Victim.Vel.Z = 500. / Victim.Mass;
		
		If (Victim.Player)
		{
			// Players handled automatically
		}
		Else If (!Harmless)
		{
			Victim.bBlasted = True;
		}
		
		If (Victim.bTouchy) // Touchy objects die when blasted
		{
			Victim.bArmed = False; // Disarm
			Victim.DamageMobj(Self, Self, Victim.Health, 'Melee', DMG_FORCED|DMG_EXPLOSION);
		}
	}
	
		//=====|Headlight functions|=====\\
		//Turn the vehicles' headlights on.
		Void TurnHeadlightsOn()
		{
			If (LightsOnAlready) Return;
			LightLevel = 64; //Light up the vehicle.
			If (Turret) Turret.LightLevel = 64; //And the turret, if any.
			For (Int I = HeadLights.Size()-1; I >= 0; I--)
			{
				If (Headlights[I])
				{
					Headlights[I].Activate(Self);
					Headlights[I].Active = True;
				}
			}
			If (GetAge() > 1) LightsOnAlready = True; //1 tic delay to allow the lights to spawn in the first place.
		}
		
		//Turn them off.
		Void TurnHeadlightsOff()
		{
			LightLevel = 0;
			If (Turret) Turret.LightLevel = 0;
			For (Int I = HeadLights.Size()-1; I >= 0; I--)
			{
				If (Headlights[I])
				{
					Headlights[I].Deactivate(Self);
					Headlights[I].Active = False;
				}
			}
			LightsOnAlready = False;
		}
		
		//Remove them when the vehicle is killed or removed.
		Void RemoveHeadlights()
		{
			For (Int I = HeadLights.Size()-1; I >= 0; I--)
			{
				If (Headlights[I])
				{
					Headlights[I].Destroy();
					Headlights.Delete(I);
				}
			}
			LightsOnAlready = False;
		}
}