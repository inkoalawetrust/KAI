//Okay, I have no idea how this is even supposed to work exactly, like:
//Should NPCs be able to be part of multiple groups ? If no, then NPCs should have a group pointer, otherwise, they should have an array to groups they're in.
//Should NPC groups be able to have multiple leaders ? I don't think so, but if they should, how is that supposed to look and work like ?
//Should I use an associative map to keep track of members ?
/*How is group event handling meant to work ? For example, how is a "GroupMemberDied" event going to alert members that someone died , will it need making new classes?
And how could it be made scriptable, so for example, human squads assign a living member as the leader based on some criteria, while a herd of Pinkies dissipates ?*/

//URGENT: Right now, I'm just going to go with actors being able to be in multiple groups instead of only one, so the code will reflect that.

//IDEA: Here's my plan right now for how creating groups should work:
//A KAI_NPCGroup.CreateGroup(String Name, Array<Actor> Members, Actor Leader, Int Flags) function, for creating an NPC group in ZScript.
/*A CreateGroupACS (Actor Activator, String Name, Int MemberTID, Int Flags) function for ACS, where the activator is the leader, and the members to add are found
Using an ActorIterator that searches for the specified TID. Should be callable like: ScriptCall ("KAI_NPCGroup","CreateGroupACS","Cool Demons",123,NPCGRP_WHATEVER)*/
/*IDEA: Maybe find a way to integrate the order system my marines and vehicles independently use - into this new group system, finally taking the feature out of its'
semi-built-in code limbo.*/

//TODO:
//Right now, I mainly need to first of all make a way to create groups, and second, begin testing the code I wrote so far, like the janitor.
/*Reimplement the group icon feature the original marine squad system used, maybe as TextureIDs that are set and passed to VisualThinkers ? And have the original
icons I had done added to this library instead, as default group icons. Maybe add a NPCGRP_NOICONS flag too for good measure.*/

//Base data class for NPC groups, accessed by NPCs to find data like the group they're in, other members in it, its' leader, if a member died, etc.
//All NPC groups are stored in an associative array in KAI_EventHandler for easy lookup.
Class KAI_NPCGroup
{
	String GroupName; //The name of the group. Doesn't do anything on its' own. IDEA: Maybe figure a way out to visually print the groups' name over its' members ?
	Array<Actor> Members; //The groups' members. If the group is emtpy, the janitor in KAI_EventHandler removes it.
	Actor Leader; //The head honcho of the group. Should be in the Members list too. Can be any actor, mainly in case a player is leading NPCs around or something.
	
	//Group flags and its' setters and getters
	Protected NPCGroupFlags Flags;
	Void ChangeNPCGroupFlags (Int Set, Int Remove)
	{
		Flags |= Set;
		Flags &= ~Remove;
	}
	Int GetNPCGroupFlags() {Return Flags;}
	
	//Functions useful for non-KAI actors that are part of an NPC group. i.e for players that are part of a group.
	//This shit is probably slow as balls for more than like 5 groups, considering it iterates over every group AND THEN over every member in that group !
	Static Void FindGroupsImIn (Actor Who, Array <KAI_NPCGroup> &Groups)
	{
		If (!Groups) Return;
		If (Who Is "KAI_Actor") //If a KAI NPC is calling this for some reason, just return its' Groups array back.
		{
			Groups.Copy(KAI_Actor(Who).Groups);
			Return;
		}
		
		Let Handler = KAI_EventHandler(EventHandler.Find("KAI_EventHandler"));
		
		//This is the first time I'm even using a map, I have no idea if this code will even iterate through the group list like I think it will.
		ForEach (K, V : Handler.NPCGroups)
		{
			If (Handler.NPCGroups.CheckKey(K)) //We found an NPC group on the global list.
			{
				ForEach (MayBeMe : V.Members) //Now iterate over the groups' member list.
				{
					If (MayBeMe == Who) //Found ourselves in the members of this group !
						Groups.Push(V);
				}
			}
			//Else //No pointer to a group (Value) for this key ? Might as well clean it up while we're here.
			//	Handler.NPCGroups.Remove(K); //Right now this gives me an error "Readonly struct on left hand side of Remove not allowed" for some retarded reason.
		}
		
		Return;
	}
}

Enum NPCGroupFlags //NPCGRP_
{
	NPCGRP_EVERYONEDIED = 1 << 0, //Everyone in the group is dead. May be useful once this feature is complete for stuff like setting the first NPC revived as the leader.
	//No idea what group flags to add yet, if any, maybe I'll just remove this flag field entirely.
}