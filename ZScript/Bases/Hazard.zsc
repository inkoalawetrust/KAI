//IDEA: Add some way to allow non-KAI actors to get hazard warnings and store them ?

//Has to be a class because ZScript is shit and can't handle struct arrays.
Class HazardInfo
{
	Mixin KAI_CheckFunctions;
	
    Vector3 Position; //The origin of the hazard, e.g for a sector hazard actor this could be either a custom position IN the sector, or the sectors' CenterSpot.
    Actor Origin; //The actor that is the origin of the hazard, e.g if the actor itself is a danger, or the actor the HAZARD_ATTACK comes from.
    Double Range; //The maximum range of the hazard.
	HazardTypes Type; //What is the hazard exactly ?
    HazardLevels Level; //How serious is it ?
	HazardFlags Flags; //Specific attributes of the hazard. e.g to mark that NPCs are free to detect it even when its' out of sight (Skip CheckSight())
	Array <String> CustomTags; //Custom attributes passed as strings for mods to use. e.g to mark a nukage sector hazard in particular as "Nukage" and "Toxic"
	
	Enum HazardTypes
	{
		HAZARD_NONE,  //No discernible type.
		HAZARD_OTHER, //Misc hazards.
		HAZARD_WORLD, //Enviromental hazard, e.g ACS SectorDamage() sectors that affect NPCs, crushers, etc
		HAZARD_ACTOR, //Another actor is a hazard, e.g something that crushes other NPCs like a vehicle, an actor emitting damage etc
		HAZARD_ATTACK,//The hazard is an attack of some kind, e.g a Cyberdemon aiming would emit this, causing KAI NPCs at the point of impact to run away
	}
	
	Enum HazardLevels
	{
		HAZARD_HARMLESS, //No hazard ????????
		HAZARD_VERYLOW,
		HAZARD_LOW,
		HAZARD_MEDIUM,
		HAZARD_LARGE,
		HAZARD_HUGE,
		HAZARD_APOLLYON, //Avoid at all costs.
	}
	
	Enum HazardFlags
	{
		HAZ_NOSIGHT = 1 << 0, //NPCs should be aware of the hazard even if it's not visible.
		HAZ_SECTOR	= 1 << 1, //The hazard in question is the sector at Position, instead of any particular point.
	}
	
	//Emit a hazard alert around a source actor.
	Static Play Void EmitHazard (Actor Source, Double Range, Int Type = HazardInfo.HAZARD_NONE, Int HazLevel = HazardInfo.HAZARD_LOW, Int Flags = 0, Array <String> Tags = Null)
	{
		If (!Source || Range <= 0)
			Return;
		
		HazardInfo Hazard = New ("HazardInfo"); //Create hazard information.
		If (Hazard)
		{
			Hazard.Position = (Double.NaN, Double.NaN, Double.NaN);
			Hazard.Origin = Source;
			Hazard.Range = Range;
			Hazard.Type = Type;
			Hazard.Level = HazLevel;
			Hazard.Flags = Flags;
			Hazard.CustomTags.Copy (Tags);
		}
		Else
			Return;
		
		Let Finder = BlockThingsIterator.Create (Source,Range);
		
		While (Finder.Next())
		{
			Actor Mobj = Finder.Thing;
			
			If (!Mobj || IsDead (Mobj))
				Continue;
			
			KAI_DataToken Token; //If this isn't null, we're dealing with a non-KAI_Actor that has a token we can give the hazard to.
			If (!(Mobj Is "KAI_Actor") &&
			//AND you also don't have a KAI_DataToken.
			! (Token = KAI_DataToken(Mobj.FindInventory ("KAI_DataToken"))) ) //Note: Unreadable arcane magic.
				Continue;
			
			If (Token && !Token.bAvoidHazards)
				Continue;
			
			If (Level.Vec3Diff (Source.Pos,Mobj.Pos).Length() > Range || !(Flags & HAZ_NOSIGHT) && !Mobj.CheckSight (Source,SF_IGNOREWATERBOUNDARY))
				Continue;
			
			Bool Skip;
			If (!Token)
			{
				//Don't give duplicate hazard entries if the NPC already got this one.
				ForEach (CurHaz : KAI_Actor(Mobj).Hazards)
				{
					If (AreHazardsIdentical (Hazard, CurHaz))
						Skip = True;
				}
			}
			Else
			{
				//Ditto, but for KAI_DataTokens
				ForEach (CurHaz : KAI_DataToken(Token).Hazards)
				{
					If (AreHazardsIdentical (Hazard, CurHaz))
						Skip = True;
				}
			}
			
			If (Skip)
				Continue;
			
			If (!Token)
			{
				KAI_Actor(Mobj).Hazards.Push(Hazard);
				console.printf ("alerted %s, now they have %d hazards stored",mobj.getclassname(),KAI_Actor(Mobj).Hazards.size());
			}
			Else
			{
				Token.Hazards.Push(Hazard);
				Console.Printf ("Alerted token %p, whose owner is %p (%s), of this hazard:",Token,Token.Owner,Token.Owner.GetClassName());
				Hazard.PrintHazardInfo();
			}
		}
	}
	
	//Are Haz1 and Haz2 identical ? Used to prevent hazard emitters from spamming giving entries.
	//BUG: Currently this does not check for identical custom tags. Since I'm not sure how to check if two arrays have identical string elements.
	Static Bool AreHazardsIdentical (HazardInfo Haz1, HazardInfo Haz2)
	{
		If (!Haz1 || !Haz2)
			Return False;
		
		If (
		//NOTE: The position vector needs special handling because if no position is passed (Default), then it's NaN, which is literally by doing vec != vec.
		( (KAI_Math.IsEmptyVector3 (Haz1.Position) && KAI_Math.IsEmptyVector3 (Haz2.Position)) || Haz1.Position == Haz2.Position) &&
		Haz1.Origin == Haz2.Origin &&
		Haz1.Range == Haz2.Range &&
		Haz1.Type == Haz2.Type &&
		Haz1.Level == Haz2.Level &&
		Haz1.Flags == Haz2.Flags)
			Return True;
		
		Return False;
	}
	
	Void PrintHazardInfo()
	{
		Console.Printf ("Hazard pointer: %p",Self);
		Console.Printf ("Position: %.2f %.2f %.2f",Position);
		If (Origin) Console.Printf ("Origin name: %s, Pointer %p",Origin.GetClassName(),Origin);
		Console.Printf ("Range %f",Range);
		String TypeStr, LevelStr;
		Switch (Type)
		{
			Case HAZARD_NONE:
				TypeStr = "HAZARD_NONE";
				Break;
			Case HAZARD_OTHER:
				TypeStr = "HAZARD_OTHER";
				Break;
			Case HAZARD_WORLD:
				TypeStr = "HAZARD_WORLD";
				Break;
			Case HAZARD_ACTOR:
				TypeStr = "HAZARD_ACTOR";
				Break;
			Case HAZARD_ATTACK:
				TypeStr = "HAZARD_ATTACK";
				Break;
			Default:
				TypeStr = "Undefined";
				Break;
		}
		Switch (Level)
		{
			Case HAZARD_HARMLESS:
				LevelStr = "HAZARD_HARMLESS";
				Break;
			Case HAZARD_VERYLOW:
				LevelStr = "HAZARD_VERYLOW";
				Break;
			Case HAZARD_LOW:
				LevelStr = "HAZARD_LOW";
				Break;
			Case HAZARD_MEDIUM:
				LevelStr = "HAZARD_MEDIUM";
				Break;
			Case HAZARD_LARGE:
				LevelStr = "HAZARD_LARGE";
				Break;
			Case HAZARD_HUGE:
				LevelStr = "HAZARD_HUGE";
				Break;
			Case HAZARD_APOLLYON:
				LevelStr = "HAZARD_APOLLYON";
				Break;
			Default:
				LevelStr = "Undefined";
				Break;
		}
		Console.Printf ("Type: %s, Level: %s", TypeStr, LevelStr);
		Console.Printf ("Flags:");
		If (Flags & HAZ_NOSIGHT) Console.Printf ("HAZ_NOSIGHT");
		If (Flags & HAZ_SECTOR) Console.Printf ("HAZ_SECTOR");
		
		String TagList;
		ForEach (CurStr : CustomTags) //Generate a coma separated tag list.
		{
			TagList.AppendFormat ("%s%s", ", ",CurStr);
		}
		TagList.StripLeft (", "); //Clean up the first coma split.
		Console.Printf ("Custom tags: %s Amount: %d",TagList,CustomTags.Size());
	}
}

//Hazard-specific NPC code.
Extend Class KAI_Actor
{
	//Check if the NPC is in range of the specified hazard. Either the origin actor, position, or sector.
	Bool InHazardRange (HazardInfo Hazard)
	{
		//No hazard.
		If (!Hazard)
			Return False;
		
		//No range specified for point hazard, or there's no valid position, or a sector hazard is not on any sector.
		If (!(Hazard.Flags & HazardInfo.HAZ_SECTOR) && Hazard.Range <= 0 || !Hazard.Origin && Hazard.Position != Hazard.Position)
			Return False;
		
		Sector PointSec = Level.PointInSector (Hazard.Position.XY);
		
		//Sector hazard not actually on a sector.
		If (Hazard.Flags & HazardInfo.HAZ_SECTOR && !PointSec)
			Return False;
		
		If (Hazard.Flags & HazardInfo.HAZ_SECTOR && CurSector == PointSec)
			{console.printf ("inside a hazardous sector"); Return True;}
		
		If (Hazard.Origin && Distance3DSquared (Hazard.Origin) < Hazard.Range*Hazard.Range || Level.Vec3Diff (Hazard.Position,Pos).Length() < Hazard.Range) //In range.
			Return True;
		
		Return False;
	}
	
	//Get the distance to a hazard.
	//MAYDO: If it's a sector hazard but the NPC is outside of its' sector, maybe fire a LineTracer that only stops once it crosses the hazard sector ?
	Double GetHazardDistance (HazardInfo Hazard)
	{
		If (!Hazard) Return -1;
		
		//This is a sector hazard and you share the same sector, so it's right on you.
		If (Hazard.Flags & HazardInfo.HAZ_SECTOR && CurSector == Level.PointInSector (Hazard.Position.XY))
			Return 0;
		
		//No origin and the position vector isn't empty, get distance to vector.
		If (!Hazard.Origin && !KAI_Math.IsEmptyVector3 (Hazard.Position))
			Return Level.Vec3Diff (Pos,Hazard.Position).Length();
		
		//We have an Origin, just do Distance3D().
		If (Hazard.Origin)
			Return Distance3D (Hazard.Origin);
		
		Return 0;
	}
	
	//Get the origin position of a hazard.
	Vector3 GetHazardOriginPos (HazardInfo Hazard, Bool AttackerIsOrigin = False)
	{
		If (!Hazard) Return (Double.NaN, Double.NaN, Double.NaN);
		
		If (Hazard.Origin && (!AttackerIsOrigin || Hazard.Type != HazardInfo.HAZARD_ATTACK)) //Get the origin actors' position, unless it's an attack hazard.
			Return Hazard.Origin.Pos;
		
		Return Hazard.Position;
	}
}

//Stock hazard zone, emits a hazard every tic based on the initial arguments passed.
Class KAI_HazardZone : Actor
{
	Default
	{
		Scale 0.5;
		//$NotAngled
		//$Title Hazard Zone
		//$Category ZDoom
		//$Sprite KAISA0
		//$Arg0 Range
		//$Arg0Tooltip "The range of the hazard zone, in map units."
		//$Arg0Default 128
		//$Arg1 Type
		//$Arg1Type 11
		//$Arg1Tooltip "The type of danger this hazard is"
		//$Arg1Enum {0 = "None"; 1 = "Other"; 2 = "World"; 3 = "Actor"; 4 = "Attack";}
		//$Arg1Default 1
		//$Arg2 Level
		//$Arg2Type 11
		//$Arg2Tooltip "The severity of the hazard"
		//$Arg2Enum {1 = "Very Low"; 2 = "Low"; 3 = "Medium"; 4 = "Large"; 5 = "Huge"; 6 = "Apollyon";}
		//$Arg2Default 2
		//$Arg3 Flags
		//$Arg3Type 12
		//$Arg3Tooltip "The attributes of the hazard"
		//$Arg3Enum {1 = "Ignore sight checks";}
		+MoveWithSector;
		+NoInteraction;
	}
	
	String User_Tags; //Custom tag attributes, this is a spaceless, coma separated list where its' word becomes an element in the hazards' CustomTags array.
	Array <String> Tags;
	
	Enum HazParams
	{
		Range,
		Type,
		HazLevel,
		Flags,
	}
	
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		//We have a set of tags, split the coma and space and keep individual tags as strings in the string array.
		If (User_Tags != "" && User_Tags != " ")
		{
			User_Tags.Replace (" ","");
			User_Tags.Split (Tags, ",");
		}
		
		Args[Flags] &= ~(HazardInfo.HAZ_SECTOR); //This is NOT a sector hazard emitter.
		
		//Set up hazard.
		Hazard = New ("HazardInfo");
		
		If (Hazard)
		{
			Hazard.Position = (Double.NaN, Double.NaN, Double.NaN);
			Hazard.Origin = Self;
			Hazard.Range = Args[Range];
			Hazard.Type = Args[Type];
			Hazard.Level = Args[HazLevel];
			Hazard.Flags = Args[Flags];
			//Hazard.CustomTags = Tags;
		}
	}
	
	Override Void Tick()
	{
		Super.Tick ();
		
		If (!IsFrozen() && !bDormant)
			HazardInfo.EmitHazard (Self,Args[Range],Args[Type],Args[HazLevel],Args[Flags],Tags);
	}
	
	HazardInfo Hazard; //The hazard to warn about.
}

//Marks the entire sector its' on as a hazard, iterating through its' thinglist and warning every eligible actor.
Class KAI_SectorHazard : Actor
{
	Default
	{
		//$Title Sector Hazard Zone
		//$Category Sector Actions
		//$Sprite KAISB0
		//$ClearArgs
		//$Arg0 Level
		//$Arg0Type 11
		//$Arg0Tooltip "The severity of the hazard"
		//$Arg0Enum {1 = "Very Low"; 2 = "Low"; 3 = "Medium"; 4 = "Large"; 5 = "Huge"; 6 = "Apollyon";}
		//$Arg0Default 2
		//$Arg1 Flags
		//$Arg1Type 12
		//$Arg1Tooltip "The attributes of the hazard"
		//$Arg1Enum {1 = "Ignore sight checks";}
		//$Arg2 Emitter Flags
		//$Arg2Type 12
		//$Arg2Tooltip "Flags that change the behavior of the emitter itself."
		//$Arg2Enum {1 = "Don't warn flying monsters"; 2 = "Don't warn ground monsters";}
		+MoveWithSector;
		+NoInteraction;
	}
	
	String User_Tags; //Custom tag attributes, this is a spaceless, coma separated list where each word becomes an element in the hazards' CustomTags array.
	Array <String> Tags;
	
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		//We have a set of tags, split the coma and space and keep individual tags as strings in the string array.
		If (User_Tags != "" && User_Tags != " ")
		{
			User_Tags.Replace (" ","");
			User_Tags.Split (Tags, ",");
		}
		
		//Set up hazard.
		Hazard = New ("HazardInfo");
		
		If (Hazard)
		{
			Hazard.Position = Pos;
			Hazard.Type = HazardInfo.HAZARD_WORLD;
			Hazard.Level = Args[0];
			Hazard.Flags = Args[1];
			Hazard.CustomTags.Copy (Tags);
			
			Hazard.Flags |= HazardInfo.HAZ_SECTOR;
		}
	}
	
	Mixin KAI_CheckFunctions;
	
	Int Flags;
	
	Enum SecHazEmitFlags
	{
		SECHAZ_NOAIR 	= 1 << 0, //Flying NPCs are not warned by this zone. e.g if it's a harmful floor instead of a crusher
		SECHAZ_NOGROUND	= 1 << 1, //Ground NPCs are not warned by this zone.
	}
	
	Override Void Tick()
	{
		Super.Tick ();
		
		If (!IsFrozen() && !bDormant)
		{
			Hazard.Position = Pos; //Just in case it moves.
			
			int i;
			For (Actor CurMo = CurSector.ThingList; CurMo != Null; CurMo = CurMo.SNext)
			{
				If (!CurMo || IsDead (CurMo))
					Continue;
				
				KAI_DataToken Token; //If this isn't null, we're dealing with a non-KAI_Actor that has a token we can give the hazard to.
				If (!(CurMo Is "KAI_Actor") &&
				//AND you also don't have a KAI_DataToken.
				! (Token = KAI_DataToken(CurMo.FindInventory ("KAI_DataToken"))) ) //Note: Unreadable arcane magic.
					Continue;
				
				If (Token && !Token.bAvoidHazards)
					Continue;
				
				If (Token) //We didn't find a KAI_Actor, but they have a token.
					CurMo = Token.Owner;
				
				If (Flags & SECHAZ_NOAIR && IsFlying (CurMo) || Flags & SECHAZ_NOGROUND && !IsFlying (CurMo))
					Continue;
				
				Bool Skip;
				If (!Token)
				{
					//Don't give duplicate hazard entries if the NPC already got this one.
					ForEach (CurHaz : KAI_Actor(CurMo).Hazards)
					{
						If (HazardInfo.AreHazardsIdentical (Hazard, CurHaz))
							Skip = True;
					}
				}
				Else
				{
					//Ditto, but for KAI_DataTokens
					ForEach (CurHaz : KAI_DataToken(Token).Hazards)
					{
						If (HazardInfo.AreHazardsIdentical (Hazard, CurHaz))
							Skip = True;
					}
				}
				
				If (Skip)
					Continue;
				
				If (CurMo Is "KAI_Actor") KAI_Actor(CurMo).Hazards.Push (Hazard);
				Else {Token.Hazards.Push(Hazard);
				Console.Printf ("Alerted token %p, whose owner is %p (%s), of this hazard:",Token,Token.Owner,Token.Owner.GetClassName());
				Hazard.PrintHazardInfo();
				}
				CurMo = CurMo.SNext;
			}
		}
	}
	
	HazardInfo Hazard; //The hazard to warn about.
}