//URGENT: When I finish this and begin documenting it, the feature page for the voice packs should have the non-technical info for making voice definitions!

//NPC voice data container.
//IDEA: Add Talk, TalkYes, and TalkNo types? Eh, probably too much, at least for now.
Class KAI_Voice
{
	String Name; //The fancy name/identifier of the voice pack. i.e "Cool Soldier" voice pack
	Array<Sound> See; //Spotted enemy.
	Array<Sound> PlayerSee; //Ditto, but it's an enemy player.
	Array<Sound> Fear; //Scared of something, likely a dangerous monster or some shit.
	Array<Sound> Idle; //We're chilling.
	Array<Sound> Hazard; //In range of some kind of hazard. Basically a fear sub-type.
	Array<Sound> PlayerFear; //Scared of an enemy player specifically.
	Array<Sound> OrderChange; //The actors' current order changed.
	Array<Sound> GroupJoin; //Entered NPC group.
	Array<Sound> GroupLeave; //Left NPC group.
	
	//*Lego Yoda death sound*
	Array<Sound> Death; //Death voice lines?
	Array<Sound> AllyDeath; //An ally died.
	Array<Sound> AllyPlayerDeath; //A friendly player died
	Array<Sound> EnemyDeath; //An enemy died.
	Array<Sound> AllyVehicleDeath; //A friendly vehicle died.
	Array<Sound> EnemyVehicleDeath; //An enemy vehicle died.
	Array<Sound> AllyRevive; //Ally resurrected
	Array<Sound> EnemyRevive; //Enemy ressurected.
	Array<Sound> Revive; //WE resurrected.
	
	//Custom voice types.
	Array<KAI_CustomVoice> CustomTypes;
	
	//Get custom voice type.
	KAI_CustomVoice GetCustomType (String Name)
	{
		ForEach (Type : CustomTypes)
		{
			If (Type.Name ~== Name)
				Return Type;
		}
		Return Null;
	}
	
	//MAYDO:
	//A structure for defining sequential sentences for NPCs to say, with timed delays, think GoldSrc's sentence system.
}

Class KAI_CustomVoice
{
	String Name; //The name of the custom voice type.
	Array<Sound> Sounds; //The sounds stored in it.
}

Extend Class KAI_Actor
{
	Enum VoiceTypes
	{
		VOICE_NONE,
		VOICE_SEE,
		VOICE_PLAYERSEE,
		VOICE_FEAR,
		VOICE_IDLE,
		VOICE_HAZARD,
		VOICE_PLAYERFEAR,
		VOICE_ORDERCHANGE,
		VOICE_GROUPJOIN,
		VOICE_GROUPLEAVE,
		
		VOICE_DEATH,
		VOICE_ALLYDEATH,
		VOICE_ALLYPLAYERDEATH,
		VOICE_ENEMYDEATH,
		VOICE_ALLYVEHICLEDEATH,
		VOICE_ENEMYVEHICLEDEATH,
		VOICE_ALLYREVIVE,
		VOICE_ENEMYREVIVE,
		VOICE_REVIVE,
	}
	
	//Voice line spitting API function, say a line of the specified type from the chosen voice pack.
	Virtual Bool SayVoiceLine (VoiceTypes Type, KAI_Voice Voice, String CustomType = "", Double Volume = 1.0, Double Attenuation = ATTN_NORM, Int Channel = CHAN_VOICE)
	{
		If (!Voice)
			Return False; //ü§ê
		
		//By default, we just care about playing a random sound of that particular type.
		Array <Sound> Yapping;
		GetNPCVoiceList (Yapping, Type, Voice, CustomType);
		Int RNG = Random(0,Yapping.Size()-1);
		Sound Snd = Yapping[RNG];
		A_StartSound (Snd,Channel,CHANF_OVERLAP,Volume,Attenuation);
		console.printf ("playing %s, %d",snd,IsActorPlayingSound (Channel,Yapping[RNG]));
		Return IsActorPlayingSound (Channel,Yapping[RNG]);
	}
	
	//Resolve the right voice array from a KAI_VOICE instance based on voice type and pass it back by reference.
	Void GetNPCVoiceList (Array<Sound> Sounds, VoiceTypes Type, KAI_Voice Voice, String CustomType = "")
	{
		If (!Voice)
			Return; //ü§ê
		
		If (!(CustomType ~== ""))
		{
			KAI_CustomVoice Custom = Voice.GetCustomType (CustomType);
			
			If (Custom)
			{
				Sounds.Copy (Custom.Sounds); //Resolve custom voice type.
				Return;
			}
			
			If (KAI_DebugPrintMessages) Console.Printf ("\c[Yellow]GetNPCVoiceList(): Failed to find custom voice type %s in voice pack %s",CustomType,Voice.Name);
			//No custom voice type found, fall back to whatever built-in type was passed.
		}
		
		Switch (Type)
		{
			Case VOICE_NONE: //Lol
				Break;
			Case VOICE_SEE:
				Sounds.Copy(Voice.See);
				Break;
			Case VOICE_PLAYERSEE:
				Sounds.Copy(Voice.PlayerSee);
				Break;
			Case VOICE_FEAR:
				Sounds.Copy(Voice.Fear);
				Break;
			Case VOICE_IDLE:
				Sounds.Copy(Voice.Idle);
				Break;
			Case VOICE_HAZARD:
				Sounds.Copy(Voice.Hazard);
				Break;
			Case VOICE_PLAYERFEAR:
				Sounds.Copy(Voice.PlayerFear);
				Break;
			Case VOICE_ORDERCHANGE:
				Sounds.Copy(Voice.OrderChange);
				Break;
			Case VOICE_GROUPJOIN:
				Sounds.Copy(Voice.GroupJoin);
				Break;
			Case VOICE_GROUPLEAVE:
				Sounds.Copy(Voice.GroupLeave);
				Break;
			Case VOICE_DEATH:
				Sounds.Copy(Voice.Death);
				Break;
			Case VOICE_ALLYDEATH:
				Sounds.Copy(Voice.AllyDeath);
				Break;
			Case VOICE_ALLYPLAYERDEATH:
				Sounds.Copy(Voice.AllyPlayerDeath);
				Break;
			Case VOICE_ENEMYDEATH:
				Sounds.Copy (Voice.EnemyDeath);
				Break;
			Case VOICE_ALLYVEHICLEDEATH:
				Sounds.Copy (Voice.AllyVehicleDeath);
				Break;
			Case VOICE_ENEMYVEHICLEDEATH:
				Sounds.Copy (Voice.EnemyVehicleDeath);
				Break;
			Case VOICE_ALLYREVIVE:
				Sounds.Copy (Voice.AllyRevive);
				Break;
			Case VOICE_ENEMYREVIVE:
				Sounds.Copy (Voice.EnemyRevive);
				Break;
			Case VOICE_REVIVE:
				Sounds.Copy (Voice.Revive);
				Break;
			Default:
				Break;
		}
	}
}

//Script parser and voice pack storage handling.
Extend Class KAI_EventHandler
{
	//Parser
	//CREDIT: Claude 3.5 for giving me a VERY basic working parser because there's no goddamn documentation of ScriptScanner TO FUCKING USE!!!
	
	//HACK: Because the native parser function for this isn't exposed.
	Bool Compare (String Text1, String Text2)
	{
		Return (Text1 ~== Text2);
	}
    
    Void ParseNPCVoices()
    {
		String FilePath;
		Int CurrentLump = Wads.FindLump ("KAI_VOICES", 0); //Find the very first voice file.
		
		//Get the current KAI_VOICES lump to parse. If there's no more files, we're finished.
        While (CurrentLump != -1)
		{
			//Find voice definitions on this particular file.
			Let Parser = New("ScriptScanner");
			Parser.OpenLumpNum(CurrentLump);
			FilePath = Wads.GetlumpFullName(CurrentLump);
			console.printf ("getstring is %d, %s| filestring %s",parser.GetString(),parser.GetStringContents(),FilePath); parser.unget();
			
			//Parse NPC voice definitions.
			While (Parser.GetString())
			{//console.printf ("parsing...| string is %s",parser.getstringcontents());
				
				//Check for voice block.
				If (Compare("Voice",Parser.GetStringContents()))
				{
					KAI_Voice Voice = New ('KAI_Voice');
					
					//Get voice definition name before proceeding to the data block itself.
					Parser.MustGetString();
					Voice.Name = Parser.GetStringContents();
					//No duplicate voice names allowed.
					If (FindDuplicateVoice(Voice.Name))
						ThrowAbortException("KAI_VOICES: %s is a duplicate voice name!",Voice.Name);
					console.printf ("voice name is %s",voice.name);
					
					//Get the built-in voice types
					parser.GetString(); // Skip the { (Opening bracket)
					If (!Compare("{",Parser.GetStringContents()))
						ThrowAbortException("KAI_VOICES: No opening bracket on line %d, file path %s, got %s instead.
						\n\c[Red]Make sure you do not have double voice names!",Parser.GetMessageLine(),FilePath,Parser.GetStringContents());
					While (Parser.GetString())
					{
						If (Compare("}",Parser.GetStringContents())) Break; // End of voice  definition block
						
						Name VoiceType = Parser.GetStringContents(); //Get built-in voice type.
						console.printf ("parsed voice type is %s",voicetype);
						Switch (VoiceType)
						{
							Case 'See':
								GetDefaultVoiceSounds (Parser,Voice.See,FilePath);
								Break;
							Case 'PlayerSee':
								GetDefaultVoiceSounds (Parser,Voice.PlayerSee,FilePath);
								Break;
							Case 'Idle':
								GetDefaultVoiceSounds (Parser,Voice.Idle,FilePath);
								Break;
							Case 'Fear':
								GetDefaultVoiceSounds (Parser,Voice.Fear,FilePath);
								Break;
							Case 'Hazard':
								GetDefaultVoiceSounds (Parser,Voice.Hazard,FilePath);
								Break;
							Case 'PlayerFear':
								GetDefaultVoiceSounds (Parser,Voice.PlayerFear,FilePath);
								Break;
							Case 'OrderChange':
								GetDefaultVoiceSounds (Parser,Voice.OrderChange,FilePath);
								Break;
							Case 'GroupJoin':
								GetDefaultVoiceSounds (Parser,Voice.GroupJoin,FilePath);
								Break;
							Case 'GroupLeave':
								GetDefaultVoiceSounds (Parser,Voice.GroupLeave,FilePath);
								Break;
							Case 'Death':
								GetDefaultVoiceSounds (Parser,Voice.Death,FilePath);
								Break;
							Case 'AllyDeath':
								GetDefaultVoiceSounds (Parser,Voice.AllyDeath,FilePath);
								Break;
							Case 'AllyPlayerDeath':
								GetDefaultVoiceSounds (Parser,Voice.AllyPlayerDeath,FilePath);
								Break;
							Case 'AllyVehicleDeath':
								GetDefaultVoiceSounds (Parser,Voice.AllyVehicleDeath,FilePath);
								Break;
							Case 'EnemyDeath':
								GetDefaultVoiceSounds (Parser,Voice.EnemyDeath,FilePath);
								Break;
							Case 'EnemyVehicleDeath':
								GetDefaultVoiceSounds (Parser,Voice.EnemyVehicleDeath,FilePath);
								Break;
							Case 'AllyRevive':
								GetDefaultVoiceSounds (Parser,Voice.AllyRevive,FilePath);
								Break;
							Case 'EnemyRevive':
								GetDefaultVoiceSounds (Parser,Voice.EnemyRevive,FilePath);
								Break;
							Case 'Revive':
								GetDefaultVoiceSounds (Parser,Voice.Revive,FilePath);
								Break;
							Case 'Custom':
								//NOTE: Special voice type!
								GetCustomVoiceType (Parser,FilePath, Voice);
								Break;
							Default:
								ThrowAbortException("\c[Red]KAI_VOICES: Invalid voice type %s",VoiceType);
								Break;
						}
						
						//This is a custom, arbitrary voice type.
						//If (VoiceType == "Custom")
						{
						//	Parser.GetString(); //Get voice type name.
							
						//	console.printf ("this custom voice type is called %s",parser.getstringcontents());
						}
					}
					
					// Add the voice to the list.
					NPCVoices.Push(Voice);
					
					foreach (snd : voice.see)
					{
						console.printf ("%s",snd);
					}
					foreach (snd : voice.idle)
					{
						console.printf ("%s",snd);
					}
					foreach (snd : voice.see)
					{
						console.printf ("%s",snd);
					}
				}
			}
			
			CurrentLump = Wads.FindLump ("KAI_VOICES", CurrentLump+1); //We're done here, look for the next voice file in the loaded mods.
		}
    }
	
	//Fill the specified default KAI_Voice array with the sounds found in this line.
	Protected Void GetDefaultVoiceSounds (ScriptScanner Parser, Array<Sound> &Where, String FilePath)
	{
		Parser.GetString(); //Skip the equals sign.
		//But we DO need it.
		If (!Compare("=",Parser.GetStringContents()))
			ThrowAbortException("KAI_VOICES: No \"=\" separator on line %d, file path %s",Parser.GetMessageLine(),FilePath);
		While (Parser.GetString()) 
		{
			console.printf ("pushing %s into array",parser.getstringcontents());
			Where.Push (Parser.GetStringContents());
			
			if (!Parser.CheckString(",")) {Console.printf ("reached end of line");Break;} // End of voice type block ahead, cuz the next token isn't a comma.
		}
	}
	
	Protected Void GetCustomVoiceType (ScriptScanner Parser, String FilePath, KAI_Voice Voice)
	{
		KAI_CustomVoice Custom = New('KAI_CustomVoice');
		Parser.GetString(); //Move on to the name of the custom voice type.
		console.printf ("this custom voice type is called %s",parser.getstringcontents());
		Custom.Name = Parser.GetStringContents(); //Assign custom voice type name.
		Parser.GetString(); //Skip the equals sign.
		//But we DO need it.
		If (!Compare("=",Parser.GetStringContents()))
			ThrowAbortException("KAI_VOICES: No \"=\" separator on line %d, file path %s",Parser.GetMessageLine(),FilePath);
		While (Parser.GetString()) 
		{
			console.printf ("pushing %s into array",parser.getstringcontents());
			Custom.Sounds.Push (Parser.GetStringContents());
			
			if (!Parser.CheckString(",")) {Console.printf ("reached end of line");Break;} // End of voice type block ahead, cuz the next token isn't a comma.
		}
		
		Voice.CustomTypes.Push (Custom);
		console.printf ("parsed custom voice type %s, which has the following sounds:",custom.name);
		foreach (snd : custom.sounds)
		{
			console.printf ("%s",snd);
		}
	}
	
	Protected Bool FindDuplicateVoice (String Name)
	{
		ForEach (Voice : NPCVoices)
		{
			If (Voice.Name ~== Name)
				Return True;
		}
		Return False;
	}
	
	//MAYDO: Put this in OnEngineInitialize() instead?
	Override Void OnRegister()
	{
		Super.OnRegister();
		
		ParseNPCVoices();
	}
    
	//Fetch NPC voice pack by name.
    KAI_Voice GetNPCVoice (String Name)
	{
		ForEach (Voice : NPCVoices)
		{
			If (Voice.Name ~== Name)
				Return Voice;
		}
		Return Null;
	}
	
	Transient Array<KAI_Voice> NPCVoices;
}