#Library "KAILib"
#Include "ZCommon.acs"

//Flag names fro CreateGroupACS().
#Define NPCGRP_EVERYONEDIED  1
#Define NPCGRP_NOMEMBEREVENT 2
#Define NPCGRP_NOICONS		 4

//Order types
#Define ORDER_NONE		0
#Define ORDER_FOLLOW	1
#Define ORDER_STAY		2
#Define ORDER_WANDER	3
//#Define ORDER_GOTOPOINT	4
#Define ALLORDERS		4

/*HACK: For cleanliness and readability. KAI_DataToken uses custom variables to pass data for KAI NPCs to read,
such as threat levels. But trying to access those variables from an actor that possibly may not exist directly
through ZScript causes startup errors if that actor (The token) does not exist, like if your non-KAI mod is not
loaded alongside the library. The best solution ? This ACS API. For how to use it, read the Github wiki.*/

//Set the tokens' threat level for the actor it's attached to.
Script "KAIToken_SetThreatLevel" (Int ThreatLevel)
{
	If (!CalledFromToken()) Terminate;
	SetUserVariable (0,"ThreatLevel",ThreatLevel);
}

//Return the tokens' threat level.
Script "KAIToken_GetThreatLevel" (Void)
{
	If (!CalledFromToken()) Terminate;
	SetResultValue(GetUserVariable (0,"ThreatLevel"));
}

//Specifies if the external non-KAI actor moves only with velocity.
//If your NPC changes between real momentum and calling P_TryMove(), then change this accordingly on the item. 
Script "KAI_Token_SetVelocityMonster" (Int Set)
{
	If (!CalledFromToken()) Terminate;
	SetUserVariable (0,"VelocityMonster",Set);
}

//Return the tokens' VelocityMonster value.
Script "KAI_Token_GetVelocityMonster" (Int Set)
{
	If (!CalledFromToken()) Terminate;
	SetResultValue(GetUserVariable (0,"VelocityMonster"));
}


//Safety measure to prevent changing the variables of non-token actors the scripts above are called to.
Function Bool CalledFromToken (Void)
{
	Return (CheckActorClass(0,"KAI_DataToken"));
}