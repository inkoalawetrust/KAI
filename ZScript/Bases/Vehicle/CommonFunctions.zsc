//$GZDB_SKIP
//Vehicle functions
Extend Class KAI_BaseVehicle
{
	//=====|Check functions|=====\\
	//Checks if the vehicle itself or any of its' turrets would collide at the specified position. Returns false if one of the turrets is colliding.
	//PLAYTEST: This function is still untested, chances are, it freezes the game, probably even with the depth set to like 5.
	Bool CheckTurretCollision (Vector3 NewPosition, Int TurretDepth = INT.MAX)
	{
		Vector3 TurPos, OldPos;
		KAI_BaseVehicle Veh = Self;
		While (Veh.Turret)
		{
			If (TurretDepth <= 0)
				Break;
			
			TurPos = Level.Vec3Diff (NewPosition,Veh.Pos); //Subtract the new absolute pos from the current pos to get the relative pos.
			
			OldPos = Veh.Turret.Pos;
			Veh.Turret.SetOrigin (Vec3Offset(TurPos.X,TurPos.Y,TurPos.Z),False); //Check where the turret will be in the future.
			If (!Veh.Turret.TestMobjLocation()) //One of the turrets will bonk something.
			{
				Veh.Turret.SetOrigin (OldPos,False);
				Return False;
			}
			Veh.Turret.SetOrigin (OldPos,False);
			OldPos = (Double.NaN,Double.NaN,Double.NaN);
			Veh = Veh.Turret; //Now check the turrets' turret, recursively.
			TurretDepth--;
		}
		Return True;
	}
	
	//=====|Spawn functions|=====\\
	//The barebones code for spawning a vehicle turret. Useful for SpawnVehicleTurret virtuals with custom logic.
	Void SpawnTurret (Class <KAI_BaseTurret> TurretClass)
	{
		Turret = KAI_BaseTurret(Spawn (TurretClass,Pos+TurretOffsets));
		If (Turret)
		{
			Turret.CopyFriendliness (Self,False);
			Turret.SpawnFlags = SpawnFlags;
			Turret.HandleSpawnFlags();
			Turret.Angle = Angle;
			Turret.Pitch = Pitch;
			Turret.Master = Self;
			If (!Turret.bTransferDamage)
			{
				Double HealthFactor = Double(Health) / Double(Default.Health); //HACK: There's no proper way to get the exact spawn health or spawn health multiplier defined in the map editor.
				Turret.Health *= HealthFactor;
			}
			Turret.TurretOffsets = TurretOffsets;
			If (bPassThreatLevelToTurrets && Turret.ThreatLevel == THREAT_ASSESS && ThreatLevel != THREAT_ASSESS) Turret.ThreatLevel = ThreatLevel;
			If (IsDead(Self)) //If the vehicle spawning the turret is dead already, e.g if it spawns from the map with 0 health.
				Turret.Die (Null, Null); //Then kill it's turret too.
		}
		Return;
	}
	
	//High quality code rips.
	Enum DynamicLightArgs
	{
	   LIGHT_RED = 0,
	   LIGHT_GREEN = 1,
	   LIGHT_BLUE = 2,
	   LIGHT_INTENSITY = 3,
	   LIGHT_SECONDARY_INTENSITY = 4,
	   LIGHT_SCALE = 3,
	}
	
	//VHSF = Vehicle Headlight Spawn Function
	Enum HeadlightSpawnFlags
	{
		VHSF_BACKLIGHT = 1 << 0, //Is this a backlight ? If yes, the angle it faces relative to the vehicle is inverted, so that it faces behind the vehicle.
		VHSF_SPRITEROT = 1 << 1, //The headlight takes into account its' vehicle SpriteRotation when attached.
		VHSF_CARDINALS = 1 << 2, //The headlight will snap to the nearest cardinal angle of the vehicles' sprite instead of using the actors' angle directly.
		VHSF_16ANGLES  = 1 << 3, //Used in conjunction with VHSF_CARDINALS to snap the light to the nearest of 16 angles instead of 8, for 16 angle sprites.
	}
	
	//Spawns a headlight with the specified parameters. Then returns a pointer to it.
	//AttachTo: The actor to attach the headlight to, this is just the caller usually.
	//Offsets: The XYZ offsets to pass to the light. This doesn't call SetOffset() on the dynamic light because m_Ofs doesn't change before PostBeginPlay().
	//Flags: The flags to pass to the headlight.
	//LightColor: The RGB color of the headlight. This isn't a Color variable since that's not what dynamic light actors use. Default is white.
	//Intensity: The intensity of the headlight. Default is 256.
	//SpotlightAngles: The inner (X) and outer (Y) angle of the headlight. Default is (10,25), the default of the DynamicLight class.
	KAI_Headlight SpawnVehicleHeadlight (Actor AttachTo, Vector3 Offsets, Int Flags = 0, Vector3 LightColor = (255,255,255), Int Intensity = 256, Vector2 SpotlightAngles = (10,25))
	{
		If (!AttachTo) AttachTo = Self; //Just in case.
		KAI_Headlight Headlight = KAI_Headlight(Spawn ("KAI_Headlight",Pos,ALLOW_REPLACE));
		
		Headlight.Target = AttachTo; //Dynamic light actors use their target pointer to store who they are attached to.
		Headlight.Offset = Offsets;
		Headlight.IsBacklight = (Flags & VHSF_BACKLIGHT);
		Headlight.UseSpriteRotation = (Flags & VHSF_SPRITEROT);
		Headlight.UseCardinalAngles = (Flags & VHSF_CARDINALS);
		Headlight.SixteenAngles		= (Flags & VHSF_16ANGLES);
		
		//XYZ = RGB
		Headlight.Args[LIGHT_RED] = Int(LightColor.X);
		Headlight.Args[LIGHT_GREEN] = Int(LightColor.Y);
		Headlight.Args[LIGHT_BLUE] = Int(LightColor.Z);
		Headlight.Args[LIGHT_INTENSITY] = Intensity;
		
		//X is the inner angle. Y is the outer angle.
		Headlight.SpotInnerAngle = SpotlightAngles.X;
		Headlight.SpotOuterAngle = SpotlightAngles.Y;
		
		Return Headlight;
	}
	
	//=====|Vehicle behaviors|=====\\
	Array <Actor> PushedAlready;
	/*BUG: The code for recursively calling the function for obstacles stacked next to each other to push each other away is kinda cursed.
	So it might not work sometimes (i.e. the vehicle might be stopped by a bunch of otherwise pushable obstacles). Might even cause the game to freeze in
	some unfortunate circumstances, but I'm not sure if it happens any more, or was a consequence of my previous implementation.*/
	//Vehicle push handling. For making large vehicles like tanks push objects out of the way instead of getting blocked by them.
	//Called before TryMove to push actors out of the way for a successful move.
	//Source: The actor to push other actors away from.
	//MovePos: The position the Source actor will move to, if any intersecting actors are there, push them away from the position for the next move.
	/*MaxPushRadius, MaxPushHeight: The max radius and height the blocking actors can have before the vehicle can't push them. These are normally
	the push height and radius properties of the vehicle.*/
	//Blockers: Returns the actors that blocked the vehicle to the array passed. Mainly used to apply crush damage to them if optionally desired.
	Void KAI_VehiclePushActors (Actor Source, Vector2 MovePos, Double MaxPushRadius, Double MaxPushHeight, Out Array<Actor> Blockers = Null, Int Depth = 0)
	{
		If (!Source || Depth > 6) Return;
		If (Depth <= 0) PushedAlready.Clear();
		
		If (Source Is "KAI_BaseVehicle" && KAI_BaseVehicle(Source).MaxPushableMass > 0 || !(Source Is "KAI_BaseVehicle"))
		{
			Vector3 OldPos = Source.Pos;
			If (Source.CheckMove (MovePos,PCM_DROPOFF|PCM_NOACTORS)) //Can we move there anyway ?
			{
				Actor Mobj;
				Double TheZ = GetZAt (MovePos.X,MovePos.Y,flags:GZF_ABSOLUTEPOS);
				Source.SetOrigin ((MovePos,TheZ),False);
				Let Pushovers = BlockThingsIterator.Create (Source,Source.Radius); //Wait, why am I not using CreateFromPos() instead ?
				While (Pushovers.Next())
				{
					Mobj = Pushovers.Thing;
					
					//Simple pointer checks.
					If (!Mobj || Mobj == Source || Mobj == Self) Continue;
					
					If (PushedAlready.Find(Mobj) != PushedAlready.Size()) Continue;
					
					//Trivial actor rejection. Don't consider collisions with actors above or below you.
					//IDEA: Maybe ignore this if the actor can fly ? Will need handling to vertically move actors too for flying vehicles.
					If (Mobj.Pos.Z >= Pos.Z+Height || Mobj.Pos.Z+Height <= Pos.Z) Continue;
					
					Bool IsColliding = (IsCollidable (Mobj,Source) && CheckHitboxIntersection (Source,Mobj)); //Are you clipping into a collidable actor ?
					
					//The pusher can't collide with the pushee, so ignore it.
					If (!Source.CanCollideWith (Mobj, False) || !Mobj.CanCollideWith(Source, True)) Continue;
					
					If (Blockers && IsColliding)
						Blockers.Push (Mobj);
					
					//Ignore very heavy or thrustless actors.
					If (Mobj.Mass > KAI_BaseVehicle(Self).MaxPushableMass || Mobj.bDontThrust) Continue;
					
					//Skip actors that are too big, if a size limited is specified.
					If (MaxPushRadius != 0 && MaxPushRadius < Mobj.Radius || MaxPushHeight != 0 && MaxPushHeight < Mobj.Height) Continue;
					
					If (IsColliding)
					{//console.printf ("%s is pushing %s",source.getclassname(),mobj.getclassname());
						//Double PushDist = ((Source.Radius + Mobj.Radius - Source.Distance2D (Mobj))*1.1); //Push it enough for the corner of the pushover to JUST be away from the vehicle.
						Double PushDist = (/*Source.*/Distance2D (Mobj)-/*Source.*/Radius);
						Vector3 PushPos = Mobj.Vec3Angle (-PushDist,Mobj.AngleTo (/*Source*/Self));
						/*KLUDGE: For some fucking reason, both TryMove and CheckMove return false when trying to push an actor up a step it damn well can
						reach. So I had to basically reimplement a simple version of CheckMove in ZScript, that only uses CheckPosition and checks the step
						height. And this magically works despite being basically the same as the native code because*/
						Bool IsProp = IsInanimateObject (Mobj);
						Bool Sol;
						If (!IsProp)
						{
							Sol = Mobj.bSolid;
							Mobj.bSolid = False;
						}
						FCheckPosition Tm;
						If (Mobj.CheckPosition (PushPos.XY,False,Tm))
						{
							If ((Tm.FloorZ - Mobj.Pos.Z) <= Mobj.MaxStepHeight)
								Mobj.SetOrigin (PushPos,True);
						}
						If (!IsProp) Mobj.bSolid = Sol;
						//Move the pushover, if it didn't move, move the actor who blocked it too. And try again.
						//Do this until there is no more actors in the group blocking each others' movement.
						If (IsProp && !Mobj.TryMove (PushPos.XY,1))
						{
							If (Mobj.BlockingMobj) //Did a blocking object stop the move instead of elevel geometry ?
							{
								PushedAlready.Push (Mobj.BlockingMobj); //Ba dum tss
								KAI_VehiclePushActors (Mobj.BlockingMobj,PushPos.XY,MaxPushRadius,MaxPushHeight,depth:Depth+1);
							}
						}
					}
				}
				Source.SetOrigin (OldPos,False);
			}
		}
	}
	
	//Applies the specified crush damage to the actors in the victims array, as long as they are small enough.
	//Used in conjunction with KAI_VehiclePushActor, which can export what actors were pushed away, to then crush them.
	Void KAI_VehicleCrushObstacles (Array <Actor> Victims, Int Damage)
	{
		If (bNoCrushing) Return;
		For (Int I = Victims.Size()-1; I >= 0; I--)
		{
			If (Victims[I])
			{
				//Don't crush overly large actors.
				If (MaxCrushRadius != 0 && MaxCrushRadius < Victims[I].Radius || MaxCrushHeight != 0 && MaxCrushHeight < Victims[I].Height) Continue;
				Victims[I].DamageMobj (Self, Self, Damage, 'Crush');
			}
		}
	}
	
	Enum VehicleRetreatFlags
	{
		VRF_ZIGZAG = 1 << 0 //Should the vehicle zigzag around when retreating, instead of moving in a straight line away from the other actor ?
	}
	
	Int RetreatAngleOffset; //The angle offset to use when retreating, for VRF_ZIGZAG.
	
	//Makes the vehicle attempt to drive away from the Other actor, while trying to also avoid obstacles.
	//Other: Actor to back off from.
	//Distance: How far back to pick a position away from Other.
	//CheckDistance: How far ahead to check for obstacles, to adjust the move position accordingly. 0 means no obstacle check is performed.
	//Slices: How many angles around the caller to check. (360/Slices)
	//Flags: How should the retreat work exactly ?
	//The rest are KAI_MoveTowards' parameters.
	Void KAI_VehicleRetreat (Actor Other, Double Distance, Double CheckDistance, Int Slices = 16, Int Flags = 0, Double DetourFactor = 1.0, Double AngleLimit = 10, Int ChaseFlags = 0, Int Flags = 0)
	{
		If (!Other) Return;
		
		//If there's already a prior position to move to, begin moving there instead. Until within melee range of that position.
		If (!KAI_Math.IsEmptyVector3 (NextMovePos) && NewPosStepCount <= 32 && Level.Vec3Diff (Pos,NextMovePos).Length() >= MeleeRange)
		{
			KAI_MoveTowards (NextMovePos, DetourFactor, AngleLimit, ChaseFlags, Flags);
			If (!(Flags & VRF_ZIGZAG)) NewPosStepCount++;
			Return;
		}
		//Once the position is reached, empty the the NextMovePos vector;
		Else
		{
			NextMovePos = (Double.NaN,Double.NaN,Double.NaN);
			If (!(Flags & VRF_ZIGZAG)) NewPosStepCount = 0;
		}
		
		If (Flags & VRF_ZIGZAG)
		{
			NewPosStepCount++;
			If (NewPosStepCount >= 32)
			{
				NewPosStepCount = 0;
				RetreatAngleOffset = Random (4,-4)*10;
			}
		}
		Else
			RetreatAngleOffset = 0;
		
		Double CheckAngle = (AngleTo(Other)-180+RetreatAngleOffset); //Try moving right away from the enemy, unless blocked.
		Vector3 CheckPos = (Vec2Angle (Radius+CheckDistance*4,CheckAngle),0);
		CheckPos.Z = GetZAt (CheckPos.X,CheckPos.Y,0,GZF_ABSOLUTEPOS)+(Height/2);
		//MAYDO: Make the code somehow ignore actors the vehicle can push away ? This would require reverting to using line traces.
		If (CheckDistance > 0 && Slices > 0)
		{
			FLineTraceData PathCheck;
			//Check an arbitrary angles around the vehicle for a valid path. Ooga booga caveman pathfinding.
			For (Int I = 0; I < Slices; I++)
			{
				//LineTrace (CheckAngle,Radius+(Distance*4),0,TRF_SOLIDACTORS|TRF_BLOCKSELF,1,data:PathCheck);
				//Int Type = PathCheck.HitType;
				//If (Type != Trace_HitWall && Type != Trace_HitFloor && Type != Trace_HitCeiling && Type != Trace_HitActor)
				If (IsPosReachable (CheckPos,spacing:Radius/2))
					Break;
				CheckAngle += 360/Slices; //There's an obstacle in front of this path, try another angle.
				CheckPos.XY = (Vec2Angle (Radius+CheckDistance,CheckAngle));
				CheckPos.Z = GetZAt (CheckPos.X,CheckPos.Y,0,GZF_ABSOLUTEPOS)+(Height/2);
			}
			//Subtract the extra distance to check ahead off from the final move position.
			CheckPos.XY = Vec2Angle (Distance,CheckAngle);
			CheckPos.Z = GetZAt (CheckPos.X,CheckPos.Y,0,GZF_ABSOLUTEPOS)+(Height/2);
		}
		NextMovePos = CheckPos;
	}
	
	Enum KAIVehicleChaseFlags //LVC = Land Vehicle Chase
	{
		LVC_ATTACKWHENSCARED = 1 << 0, //The vehicle will still be very likely to attack when scared of an enemy.
		LVC_NOTURRETRETARGET = 1 << 1, //The vehicle will never target the hull of a vehicle instead of its' turret. Even if doing so would be better.
		LVC_MAKEFRIENDSIDLE	 = 1 << 2, //Friendly vehicles will also go to their Idle state when they have no target.
		LVC_PLAYERSASTHREATS = 1 << 3, //Consider players as threats when deciding if the vehicle should retreat from its' target. e.g to run away from players in god mode the vehicle is targeting
		LVC_USERETREATSTATE	 = 1 << 4, //Instead of calling KAI_MoveAway to run away. The function will jump straight to the vehicles' RetreatState.
		LVC_ZIGZAGGING		 = 1 << 5, //Enables KAI_MoveToward's KMT_ZIGZAG flag.
	}
	
	//The standard land vehicle chase function.
	//FIXME: I think KMT_ZIGZAG is always on even if the flag is off.
	//WaitState: The state the vehicle should wait in if it stopped at a delayed patrol point. No state means it just calls SetIdle.
	//Flags: The flags to use. Look above for a list.
	//ChaseFlags: The A_Chase flags to use. Supports the same flags' KAI_MoveTowards does.
	//TurnRadius: How wide the turns the vehicle takes are, the smaller the number the bigger the turn. Default is 10 degrees per step.
	//FollowDist: The minimum distance the vehicle must have from its' friend player (If friendly) before it stops following them. To prevent dogpiling. Also works with vehicles following other actors.
	//MoveParams: A struct that can pass detailed parameters for KAI_MoveTowards/Away. For the ChaseFlags and AngleLimit params, use the ChaseFlags and TurnRadius properties.
	Void KAI_LandVehicleChase (StateLabel WaitState = Null, Int Flags = 0, Int ChaseFlags = 0, Double TurnRadius = 10, Double FollowDist = 384, MoveToParams MoveParams = Null)
	{
		//No detailed movement parameters, use defaults
		//HACK: ZScript does not allow me to make a struct instance for MoveParams if none is passed. So we create a struct and call Chase again :>>>>>>>>
		If (!MoveParams)
		{
			MoveToParams Default_Params;
			Default_Params.RunRad = 256;
			Default_Params.DetourFactor = 1.0;
			Default_Params.Attempts = 32;
			Default_Params.StepThreshold = 32;
			KAI_LandVehicleChase(WaitState, Flags, ChaseFlags, TurnRadius, FollowDist, Default_Params); //The optimal GZDoom solution.
			Return;
		}
		
		Int KMTFlags = KMT_CHASEGOAL|(Flags & LVC_ZIGZAGGING ? KMT_ZIGZAG : 0);
		
		Bool MovedAlready; //If one of the KAI_MoveTowards/Away calls was made. Don't call the rest.
		Double MajorThreatRange = (RetreatRange*4)*(RetreatRange*4);
		//Temporarily store the aggro multiplier that is changed by the fear code. Then reset it after ShouldAttack() finishes.
		Double OldAggro = AggressionMultiplier;
		
		//ZScript exports of different segments of GZDooms' native AI code. This is the stuff not needed for movement.
		KAI_Chase_PreChecks(ChaseFlags);
		KAI_Chase_FriendsAttackPlayerEnemies(ChaseFlags); //This and Chase_Retarget are handled here, so the fear checks below work properly.
		KAI_Chase_Retarget(ChaseFlags,Flags & LVC_MAKEFRIENDSIDLE);
		KAI_Chase_HandleActiveSound(ChaseFlags);
		
		//Handle making the vehicle run away from its' target if it's a major threat. Or it's powerless.
		If (!bNoFear && Target && !(Goal && bChaseGoal))
		{
			If (!(ChaseFlags & CHF_DONTMOVE))
			{
				//If you can't attack (But not because you are in a NOATTACK sector), run. Also run if the other actor is frightening or you're frightened.
				If ((!CanAttack() && !(CurSector.Flags & Sector.SECF_NOATTACK))|| bFrightened || IsFrightening (Target) ||
				//If the targets' threat level is over the threshold, and it's visible and nearby, GTFO. Unless it's a cheating player.
				ThreatLevelThreshold != THREAT_ASSESS && AssessThreatLevel(Target, Flags & LVC_PLAYERSASTHREATS) >= ThreatLevelThreshold && (Distance3DSquared(Target) < MajorThreatRange))
				{
					//And at last, check if the target is still visible.
					If (IsVisible (Target, True))
					{
						If (!(Flags & LVC_USERETREATSTATE))
							KAI_MoveAway (Target,MoveParams.Attempts,MoveParams.RunRad,MoveParams.StepThreshold,0.5,TurnRadius,ChaseFlags,KMTFlags); //DetourFactor is not exposed to the struct.
						Else If (Flags & LVC_USERETREATSTATE && RetreatState)
							SetState (RetreatState);
						MovedAlready = True;
					}
				}
			}
			
			If (Flags & LVC_ATTACKWHENSCARED)
				AggressionMultiplier *= 0.5;
		}
		
		FollowPlayerControl (FollowDist); //Handle turning on bDontFollowPlayers if you are too close to your friendplayer.
		
		//If you can move and haven't done so already.
		If (!(ChaseFlags & CHF_DONTMOVE) && !MovedAlready)
		{
			If (!(IsPatrolling(Self) && bChaseGoal)) NearestEnemy = FindNearestEnemy (RetreatRange);
			//If you aren't patrolling and not allowed off your route, and there is an enemy nearby.
			If (NearestEnemy)
			{
				If (!(Flags & LVC_USERETREATSTATE))
					KAI_MoveAway (NearestEnemy,MoveParams.Attempts,MoveParams.RunRad,MoveParams.StepThreshold,0.5,TurnRadius,ChaseFlags); //Keep your distance.
				Else If (Flags & LVC_USERETREATSTATE && RetreatState)
					SetState (RetreatState);
				MovedAlready = True;
			}
			//If your turrets' target is too high up for it to reach.
			Else If (Turret && Turret.Target && Turret.ElevationState == Turret.ELEVATION_TOOHIGH)
			{
				If (!(Flags & LVC_USERETREATSTATE))
					KAI_MoveAway (Turret.Target,MoveParams.Attempts,MoveParams.RunRad,MoveParams.StepThreshold,0.5,TurnRadius,ChaseFlags); //Back off to allow your turret to shoot.
				Else If (Flags & LVC_USERETREATSTATE && RetreatState)
					SetState (RetreatState);
				MovedAlready = True;
			}
			//If none of the other conditions are true.
			Else
			{
				Bool B;
				KAI_Chase_HandleStrafing (Target,ChaseFlags); //No idea why the fuck you'd want a ground vehicle to do this. But here you go.
				[B,MovedAlready] = KAI_Chase_PatrolHandling(WaitState, 0.2, anglelimit:TurnRadius, chaseflags:ChaseFlags);
				
				//Finally, if you do have a target, DO move towards it, but with KAI_MoveTowards instead of the shitty native movement code.
				If (Target && !MovedAlready)
					KAI_MoveTowards (Target.Pos, MoveParams.DetourFactor, TurnRadius, ChaseFlags, KMTFlags);
			}
			
			MovedAlready = True;
		}
		
		If (!(Flags & LVC_NOTURRETRETARGET)) RetargetVehicleHull(); //If targeting another vehicles' turret. See if targeting the vehicle itself would be better.
		Actor CheckFrom = Turret; //Check from the turret if you should maybe stay still and shoot.
		If (!CheckFrom) CheckFrom = Self; //If you have no turret, check from yourself.
		If (StayStillAndShoot (CheckFrom)) Return;
		
		If (ShouldAttack()) //Run the unique attack decision code of the vehicle.
		{
			AggressionMultiplier = OldAggro; //Reset aggression chance.
			ChaseTimer = 0;
			Return; //End the function if the vehicle should attack.
		}
		AggressionMultiplier = OldAggro; //Reset aggression chance.
		
		HandleChaseTimer();
	}
	
	Void HandleChaseTimer() //Made into a separate function so it can be called independently by turrets and such.
	{
		//Vehicles eventually stop chasing their target after it's out of sight for long enough.
		If (SearchTime > 0)
		{
			If (ChaseTimer >= SearchTime)
			{
				A_ClearTarget();
				ChaseTimer = 0;
				//Vehicles ordered to stay also go back to standing still once the timer runs out.
				If (CurrentOrder == ORDER_STAY)
				{
					SetStateLabel ("Spawn");
					Return;
				}
			}
			
			If (!IsPatrolling(Self))
			{
				If (!Target || Target && !CheckSight (Target,SF_SEEPASTBLOCKEVERYTHING))
					ChaseTimer++;
				//Target is visible again, reset the timer.
				Else
					ChaseTimer = 0;
			}
		}
	}
	
	//As a friendly vehicle, only follow the player until within a certain distance from them, to prevent the player from being dogpiled by vehicles.
	Void FollowPlayerControl (Double MaxDist = 384)
	{
		If (!bFriendly || !Players[KAI_GetFriendPlayer()].Mo || CurrentOrder == ORDER_WANDER)
			Return;
		
		bDontFollowPlayers = (Distance3DSquared (Players[KAI_GetFriendPlayer()].Mo) <= MaxDist*MaxDist);
	}
	
	Enum RetargetHullFlags
	{
		RVHF_NOTARGETCHANGE 		= 1 << 0, //This function should only return if the hull should be targeted, instead of also doing the actual retargeting.
		RVHF_NOTRANSFERDAMAGECHECK	= 1 << 1, //Don't retarget hulls larger than their bTransferDamage turret.
		RVHF_NOWEAKHULLCHECK		= 1 << 2, //Don't retarget hulls weaker than whatever turret the caller is targeting.
		RVHF_STRONGERHULL			= 1 << 3, //Retarget the hull if it is stronger (Healthier) than the turret.
	}
	
	/*MAYDO: Move this to KAI_Actor, or add a function similar to it to KAI_Actor.
	To make it possible to easily prevent dumb scenarios like non-flying melee enemies (e.g) trying to attack a turret porched on top of a vehicle.*/
	//MAYDO: Add a check where even if any of these retarget conditions are met, the caller will not retarget if the hull is not actually hittable or visible.
	//Makes vehicles target the hulls of vehicles instead of their turrets' under certain conditions:
	//If the turret has bTransferDamage and is smaller than the vehicle it's attached to. Since attacking the turret only harms the vehicle, might as well shoot the bigger hull instead.
	//If the hulls' health is less than the health of the turret being targeted. Would be quicker to kill the vehicle than the turret.
	//Flags: Look above for a list of flags.
	Bool RetargetVehicleHull (Int Flags = 0)
	{
		If (!Target || !Master) Return False;
		
		//Turret must be attached on a vehicle to actually retarget.
		If (Target Is "KAI_BaseTurret" && Target.Master)
		{
			//If the damage that the targeted turret takes is transfered to the vehicle anyway (bTransferDamage).
			If (!(Flags & RVHF_NOTRANSFERDAMAGECHECK) && KAI_BaseTurret(Target).bTransferDamage)
			{
				//And the vehicle the turret is attached to is overall bigger than the turret.
				If (Turret && Target.Master.Radius > Turret.Radius && Target.Master.Height > Turret.Height)
				{
					If (!(Flags & RVHF_NOTARGETCHANGE)) Target = Target.Master; //Then target the vehicle the turret is attached to.
					Return True;
				}
			}
			//If the turret doesn't have bTransferDamage, and it's health is higher than the hulls'.
			If (!(Flags & RVHF_NOWEAKHULLCHECK) && !KAI_BaseTurret(Target).bTransferDamage && Target.Master.Health < (Target.Health*0.8))
			{
				If (!(Flags & RVHF_NOTARGETCHANGE)) Target = Target.Master;
				Return True;
			}
			//Target the hull if it's stronger than the turret, basically targeting the strongest part of the vehicle.
			If (Flags & RVHF_STRONGERHULL && Target.Master.Health > Target.Health)
			{
				If (!(Flags & RVHF_NOTARGETCHANGE)) Target = Target.Master;
				Return True;
			}
		}
		Return False;
	}
	
	//Used to make vehicles able to run over and grind corpses like crushers.
	Void KAI_CrushCorpses (Double RadiusMultiplier = 1.0)
	{
		If (bNoCrushing) Return;
		BlockThingsIterator Crusher = BlockThingsIterator.Create (Self,Radius*RadiusMultiplier);
		Actor Mobj;
		
		While (Crusher.Next())
		{
			Mobj = Crusher.Thing;
			If (!Mobj) Continue; //No actor to crush.
			//This runs before the bDontGib check, so that vehicles can remove corpse targets if they were already crushed.
			//If (Mobj == CorpseTarget) CorpseTarget = Null; //If the corpse you crushed was one you were targeting already, then remove the pointer to it.
			If (!IsDead (Mobj)) Continue; //Actor isn't dead already.
			If (Mobj.bDontGib) Continue; //Has already been crushed.
			If (Mobj.Pos.Z > Mobj.FloorZ) Continue; //Corpse is off the ground. Like if it's falling.
			If (Mobj.bFloat) Continue; //Don't crush floating corpses, particularly recently killed Lost Souls, which end up producing floating gibs.
			If (Mobj.Radius > MaxCorpseRadius || Mobj.Height > MaxCorpseHeight) Continue; //Actor is too big.
			If (Distance3DSquared (Mobj) > ((Radius*2)*RadiusMultiplier) * ((Radius*2)*RadiusMultiplier)) Continue;
			
			Mobj.Grind (False); //Crush corpse, but not items.
		}
	}
		//=====|Headlight functions|=====\\
		//Turn the vehicles' headlights on.
		Void TurnHeadlightsOn()
		{
			If (LightsOnAlready || IsDead(Self)) Return;
			LightLevel = 64; //Light up the vehicle.
			If (Turret) Turret.LightLevel = 64; //And the turret, if any.
			For (Int I = HeadLights.Size()-1; I >= 0; I--)
			{
				If (Headlights[I])
				{
					Headlights[I].Activate(Self);
					Headlights[I].Active = True;
				}
			}
			If (GetAge() > 1) LightsOnAlready = True; //1 tic delay to allow the lights to spawn in the first place.
		}
		
		//Turn them off.
		Void TurnHeadlightsOff()
		{
			LightLevel = 0;
			If (Turret) Turret.LightLevel = 0;
			For (Int I = HeadLights.Size()-1; I >= 0; I--)
			{
				If (Headlights[I])
				{
					Headlights[I].Deactivate(Self);
					Headlights[I].Active = False;
				}
			}
			LightsOnAlready = False;
		}
		
		//Remove them when the vehicle is killed or removed.
		Void RemoveHeadlights()
		{
			LightLevel = 0;
			If (Turret) Turret.LightLevel = 0;
			For (Int I = HeadLights.Size()-1; I >= 0; I--)
			{
				If (Headlights[I])
				{
					Headlights[I].Destroy();
					Headlights.Delete(I);
				}
			}
			LightsOnAlready = False;
		}
}