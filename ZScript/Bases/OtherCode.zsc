//Code that's not directly related to KAI NPCs goes here. Largely stuff like mixins and the math container class.
Class KAI_Math
{
	//Linearly interpolate between two values.
	ClearScope Static Double LerpValue (Double V1, Double V2, Double Time)
	{
		Return (V1 + Time * (V2 - V1));
	}
	
	//=====|Talking in tongues|=====\\
	//What does this do ? I have no fucking idea, Agent_Ash gave it to me to fix how much the truck slows down based on the mass of the object it hit while ramming.
	//Remap `Val` from <o_min, o_max> range to <n_min, n_max> range. Still got little idea what this means, RaveYard wrote this description not me lmao.
	ClearScope Static Double LinearMap (Double Val, Double O_Min, Double O_Max, Double N_Min, Double N_Max) 
	{
		Return (Val - O_Min) * (N_Max - N_Min) / (O_Max - O_Min) + N_Min;
	}
	
	//Credit: RaveYard
	//I don't even know what this does lmfao.
	ClearScope Static Double Distance3DLine(Vector3 A, Vector3 B, Vector3 C)
	{
		Return (((A - B) Cross (C - B))).Length() / (C - B).Length();
	}
	//==============================\\
	
	Enum Vec3RelFlags
	{
		V3R_NOANGLE = 1 << 1, //Do not rotate based on angle.
		V3R_NOPITCH = 1 << 2, //Do not rotate based on pitch.
		V3R_NOROLL	= 1 << 3, //Do not rotate based on roll.
		
		V3R_ANGLEONLY = V3R_NOPITCH|V3R_NOROLL
	}
	
	//Like Vec3Offset, but also rotates the output vector based on the callers' angle.
	//Other: The actor to offset from.
	//Offs: The vector3 offsets to use.
	//NoPortal: Should the function account for static portals or not ?
	//Flags: See above for list of flags.
	ClearScope Static Vector3 Vec3OffsetRelative (Actor Other, Vector3 Offs, Bool NoPortal = False, Int Flags = 0)
	{
		If (!Other) Return (Double.NaN,Double.NaN,Double.NaN);
		Double Angle, Pitch, Roll;
		If (!(Flags & V3R_NOANGLE)) Angle = Other.Angle;
		If (!(Flags & V3R_NOPITCH)) Pitch = Other.Pitch;
		If (!(Flags & V3R_NOROLL)) Roll = Other.Roll;
		
		Quat Dir = Quat.FromAngles (Angle,Pitch,Roll);
		Return Level.Vec3Offset (Other.Pos,Dir * Offs,NoPortal);
	}
	
	//CREDIT: RicardoLuis0
	ClearScope Static Vector3 AngleToVector3D(Double Angle, Double Pitch, Double Len = 1.0)
	{
		Return (Cos(Angle)*Cos(Pitch)*Len,Sin(Angle)*Cos(Pitch)*Len,Sin(Pitch)*Len);
	}
	
	//Is the vector empty ? Not (0,0,0), but completely empty.
	ClearScope Static Bool IsEmptyVector3 (Vector3 Vec)
	{
		Return (Vec != Vec);
	}
	
	//Is the vector (0,0,0) ?
	ClearScope Static Bool IsZeroVector3 (Vector3 Vec)
	{
		Return (Vec.X == 0 && Vec.Y == 0 && Vec.Z == 0);
	}
	
	//CREDIT: RicardoLuis0
	//Rotate a Vector2 around a non (0,0) origin.
	ClearScope Static Vector2 RotateAround (Vector2 Origin, Vector2 Vec, Double Angle)
	{
		Vec -= Origin;
		Vec = Actor.RotateVector(Vec, Angle);
		Vec += Origin;
		Return Vec;
	}
}

Mixin Class KAI_UniversalFunctions
{
	Array <Actor> TempAllyList; //Used to prevent friends of the explosions' source from being harmed.
	
	//Temporarily give NORADIUSDMG to allies, to stop them from being harmed by explosions.
	//Used by exploding projectiles and the likes.
	//Source: The actor to check from.
	//Radius: The radius aroun which to exclude allies from damage.
	Void MakeAlliesImmuneToExplosion (Actor Source, Double Radius = 256)
	{
		If (Radius <= 0 || !Source) Return;
		BlockThingsIterator AllyFind = BlockThingsIterator.Create (Self,Radius);
		
		While (AllyFind.Next())
		{
			Actor Ally = AllyFind.Thing;
			//Add friendly living monsters or players to the list. But only ones that aren't already exempt from splash damage.
			If (Ally && Source && Ally != Source && Ally.Health > 0 && !Ally.bNoRadiusDmg)
			{
				//Check if the found actor is an enemy. KAI NPCs use their IsActorHostile virtual, non-KAI actors use the native IsHostile().
				Bool IsEnemy = ((Source Is "KAI_Actor") ? KAI_Actor(Source).IsActorHostile(Ally) : Source.IsHostile(Ally));
				If (Source.bFriendly || Source.Player)
				{
					If (!IsEnemy && (Ally.bIsMonster || Ally.Player))
						TempAllyList.Push (Ally);
				}
				
				//If the caller is not friendly.
				Else
				{
					If (!IsEnemy && (Ally.bIsMonster || Ally.Player))// && Source.Species && Ally.Species == Source.Species)
						TempAllyList.Push (Ally);
				}
			}
		}
		
		For (Int I = 0; I < TempAllyList.Size(); I++)
		{
			If (TempAllyList[I])
				TempAllyList[I].bNoRadiusDmg = True;
		}
	}
	
	Void RemoveAllyExplosionImmunity()
	{
		For (Int I = 0; I < TempAllyList.Size(); I++)
		{
			If (TempAllyList[I])
				TempAllyList[I].bNoRadiusDmg = False;
		}
		
		TempAllyList.Clear();
	}
}

//Generic status checks.
Mixin Class KAI_CheckFunctions
{
	ClearScope Bool CheckActorExists (String ActorClass)
	{
		Class<Actor> Act = ActorClass;
		Return !!Act;
	}
	
	ClearScope Bool IsDead (Actor Other)
	{
		If (!Other) Return False;
		Return (Other.Player ? Other.Player.PlayerState == PST_DEAD : Other.Health <= 0);
	}
	
	ClearScope Bool IsIndestructible (Actor Other)
	{
		If (!Other) Return False;
		Return (Other.bInvulnerable || Other.bNoDamage || !Other.bShootable);
	}
	
	ClearScope Bool HasBuddha (Actor Other, Bool NoPlayerCheck = False)
	{
		If (!Other || Other.Player && NoPlayerCheck) Return False;
		Return (Other.bBuddha || Other.Player && Other.Player.Cheats & (CF_BUDDHA | CF_BUDDHA2));
	}
	
	ClearScope Bool HasGodMode (Actor Other, Bool NoPlayerCheck = False)
	{
		If (!Other || NoPlayerCheck) Return False;
		Return (Other.Player && Other.Player.Cheats & (CF_GODMODE | CF_GODMODE2));
	}
	
	ClearScope Bool IsInanimateObject (Actor Other)
	{
		If (!Other) Return False;
		Return (!Other.bIsMonster && !Other.Player);
	}
	
	ClearScope Bool IsCollidable (Actor Other, Actor Caller = Null)
	{
		If (!Other) Return False;
		Return ((Other.bSolid && !Other.bNoBlockmap)
		//PLAYTEST: The ThruBits check is untested, since nobody uses ThruBits lmao.
		&& !(Caller && Caller.bAllowThruBits && Other.bAllowThruBits && Caller.ThruBits & Other.ThruBits));
	}
	
	ClearScope Bool IsPatrolling (Actor Other)
	{
		If (!Other) Return False;
		Return (Other.Goal || Other.Target Is "PatrolPoint");
	}
	
	ClearScope Bool IsFrightening (Actor Other)
	{
		If (!Other) Return False;
		Return (Other.bFrightening || Other.Player && Other.Player.Cheats & CF_FRIGHTENING);
	}
	
	ClearScope Bool IsFlying (Actor Other)
	{
		If (!Other) Return False;
		
		If (!Other.Player && Other.bFloat) // Flying monster.
			Return True;
		Else If (Other.Player) //Flying player
		{
			If (Other.bFly || Other.bFlyCheat || Other.Player.Cheats & CF_NOCLIP2)
				Return True;
		}
		
		Return False;
	}
	
	ClearScope Bool IsInState (Actor Other, StateLabel CheckFor = "Spawn")
	{
		If (!Other) Return False; 
		Return (Other.InStateSequence(Other.CurState,Other.FindState (CheckFor)));
	}
	
	//Can the other actor be targeted ? If the other actor has NOTARGET, but is already being targeted by the caller, then it returns true.
	ClearScope Bool CanBeTargeted (Actor Caller, Actor Other)
	{
		If (!Other) Return False;
		If (Other.bNeverTarget) Return False;
		Return (Other == Caller.Target || !Other.bNoTarget && !(Other.Player && Other.Player.Cheats & CF_NOTARGET));
	}
	
	//Returns if the calling actor is fast.
	//https://github.com/ZDoom/gzdoom/blob/master/src/playsim/p_mobj.cpp?L4892#L4892-L4897
	ClearScope Bool IsFast (Actor Other)
	{
		If (Other.bAlwaysFast) Return True;
		If (Other.bNeverFast) Return False;
		Return !!G_SkillPropertyInt (SKILLP_FastMonsters);
	}
	
	//Returns true if the specified actor can resurrect corpses like an Archvile does.
	ClearScope Bool IsNecromancer (Actor Other)
	{
		If (!Other) Return False;
		Return (Other.FindState ("Heal"));//I checked several mods with Archvile-type monsters. And all of them have a Heal state. Making this the only universal way to check for them.
	}
	
	//Returns true if the actor moves using TryMove() (Normal monster movement), or false if it moves using real momentum like players.
	ClearScope Bool IsTeleportingMonster (Actor Other)
	{
		If (!Other) Return False;
		
		If (Other Is "KAI_Actor" && KAI_Actor(Other).bMovesWithVelocity) Return False;
		
		//Monster has token info saying it doesn't use TryMove(), so take its' word for it.
		Inventory Token = Other.FindInventory ("KAI_DataToken");
		If (Token && KAI_DataToken(Token).VelocityMonster)
			Return False;
			
		Return (Other.bIsMonster && !Other.Player);
	}
	
	/*IDEA: I may add a generic group system for KAI_Actors in the future, similar to the squad system in the old Smart Marines.
	If I do that, then this function should be able to return true if an actor in the callers' group is attacked, even for hostile monsters !*/
	//Is the other actor targeting an ally of the caller ?
	ClearScope Bool IsTargetingAllies (Actor Caller, Actor Other)
	{
		If (!Caller || !Other || !Other.Target) Return False;
		
		If (Caller.bFriendly)
		{
			//Is the other actor targeting an actor that is your friend ?
			Return (Caller.IsFriend(Other.Target));
		}
		//Hostile NPCs are only concerned if actors of their own species are targeted, or in the case of vehicles, if their hull or turret is targeted.
		Else
		{
			//Non-friendly actors always automatically hate players and their allies.
			If (Other.Player || Other.bFriendly)
				Return True;
			
			//Is the other actor targeting you ?
			If (Other.Target && Other.Target == Caller)
				Return True;
			
			//If the caller is a vehicle, is the other actor targeting its' turret ?
			If (Caller Is "KAI_BaseVehicle" && Other.Target == KAI_BaseVehicle(Caller).Turret)
				Return True;
			
			//If the caller is a turret itself, is the other actor targeting the vehicle it's attached on ?
			//NOTE: The above KAI_BaseVehicle check should catch cases of nested turrets where the other actor is targeting the turrets' turret.
			If (Caller Is "KAI_BaseTurret" && Other.Target == Caller.Master)
				Return True;
			
			//Is the other actor targeting an actor with the same species as you ? Then they are an enemy as far as you are concerned.
			If (Other.Target && (Caller.bNoInfightSpecies && Caller.Species == Other.Target.Species))
				Return True;
		}
		
		Return False;
	}
	
	//Checks if two hitboxes are clipping into one another.
	//CREDIT: https://developer.mozilla.org/en-US/docs/Games/Techniques/3D_collision_detection
	ClearScope Bool CheckHitboxIntersection (Actor A, Actor B)
	{
		If (!A || !B)
			Return False;
		
		Vector3 AMin, AMax;
		Vector3 BMin, BMax;
		[AMin, AMax] = GetHitBoxBoundaries(A);
		[BMin, BMax] = GetHitBoxBoundaries(B);
		
		Return (
		AMin.X <= BMax.X &&
		AMax.X >= BMin.X &&
		AMin.Y <= BMax.Y &&
		AMax.Y >= BMin.Y &&
		AMin.Z <= BMax.Z &&
		AMax.Z >= BMin.Z
		);
	}
	
	//Returns the minimum and maximum (Respectively) XYZ boundaries of a hitbox in 2 Vector3s.
	ClearScope Vector3, Vector3 GetHitboxBoundaries (Actor Mo)
	{
		Vector3 MobjMin = (Mo.Pos.X-Mo.Radius,Mo.Pos.Y-Mo.Radius,Mo.Pos.Z);
		Vector3 MobjMax = (Mo.Pos.X+Mo.Radius,Mo.Pos.Y+Mo.Radius,Mo.Pos.Z+Mo.Height);
		
		Return MobjMin, MobjMax;
	}
	
	//A ZScript copy of this function: https://github.com/ZDoom/gzdoom/blob/62f37079a7834b813f251818d1db6c80e644d209/src/playsim/actor.h#L1422
	Double KAI_GetSpriteAngle (Actor Other, Double ViewAngle, Double TicFrac)
	{
		If (Other.bSpriteAngle)
			Return Other.SpriteAngle;
		Else
		{
			Double ThisAng;
			//NOTE: PrevAngles is not exposed to ZScript, so we can't actually account for INTERPOLATEANGLES.
			/*If (bInterpolateAngles) ThisAng = Other.PrevAngles.Yaw + Other.DeltaAngle(Other.PrevAngles.Yaw,Other.Angle) * TicFrac;
			Else*/ ThisAng = Other.Angle;
			Return ViewAngle - (ThisAng + Other.SpriteRotation);
		}
	}
}

//This is the base class for making custom LineTracer-based line of fire checks for actors.
//It contains some basic LOF-related checks methods. Along with access to the KAIs' generic actor checks.
Class KAI_LOFRaycast : LineTracer
{
	Mixin KAI_CheckFunctions;
	Bool BadLOF; //If true, there is something standing in the shooters' line of fire.
	Actor Shooter; //The actor firing the raycast.
	Actor Other; //The actor we are looking for, normally this is the shooters' target.
	Array <Actor> Mobjs; //An array of all the mobjs that were found. Can be returned to functions by using the out keyword.
	
	//Visualizes a path between OriginPos and FinalPos with a length specified by Distance. Used to debug where LOF checks start, go to, and end.
	Static Void VisualizeTracePath (Vector3 OriginPos, Vector3 FinalPos, Double Distance, Double Spacing = 4, FSpawnParticleParams Params = Null)
	{
		Vector3 Path = Level.Vec3Diff (OriginPos,FinalPos);
		Double PathDist = Distance;
		Path /= PathDist;
		If (!(PathDist <= 1))
		{
			For( Double I = 0; I < PathDist; I += Spacing)
			{
				If (!Params)
				{
					FSpawnParticleParams P;
					P.Color1 = "White";
					P.Style = STYLE_None;
					P.Lifetime = GameTicRate/2;
					P.Pos = Level.Vec3Offset (OriginPos,Path*I);
					P.Size = 4;
					P.StartAlpha = 1;
					P.FadeStep = -1;
					P.Flags = SPF_FULLBRIGHT;
					Level.SpawnParticle (P);
				}
				Else
				{
					Params.Pos = Level.Vec3Offset (OriginPos,Path*I);
					Level.SpawnParticle (Params);
				}
			}
		}
	}
	
	//Add the Other actor to the Mobjs array.
	Void AddToMobjList (Actor Other)
	{
		If (Other) Mobjs.Push(Other);
	}
	
	//Should the actor shoot at the prop ?
	//Other: The actor to check.
	//HealthThreshold: If the props' health is at or below this value, then shoot.
	Bool CanShootAtProp (Actor Other, Int HealthThreshold = 400)
	{
		If (!Other/* || !Shooter*/) Return False;
		If (HealthThreshold <= 0) Return True; //No health limit specified. You can shoot it.
		
		//Actor is an destructible inanimate object. And its health is at or below the minimum threshold.
		If (IsInanimateObject (Other) && !IsIndestructible (Other) && Other.Health <= HealthThreshold)
			Return True;
		
		Return False;
	}
	
	//Is the other actor a corpse that is still collidable ?
	Bool IsSolidCorpse (Actor Other)
	{
		If (!Other) Return False;
		
		If (!IsDead (Other)) Return False;
		
		If (!Other.bDontCorpse) Return False;
		
		Return True;
	}
	
	//Useful for ripper projectiles, returns false if the actor hit can be ripped.
	Bool CantRipActor (Actor Other, Int RipLevel, Bool NoBossRip = False)
	{
		Bool NoRipMin = !Other.RipLevelMin;
		Bool NoRipMax = !Other.RipLevelMax;
		
		If (Other.bDontRip || NoBossRip && Other.bBoss) Return True; //Can't be ripped, period.
		
		If (!NoRipMin && Other.RipLevelMin > RipLevel || !NoRipMax && Other.RipLevelMax < RipLevel) //Incompatible rip levels.
			Return True;
		
		Return False;
	}
	
	Enum BLITWFlags
	{
		BLITW_HitscansToo 	= 1 << 0,	//Check for hitscan blocking lines too.
		BLITW_HitscansOnly	= 1 << 1	//Check ONLY for hitscan blocking lines.
	}
	
	//Is the line the trace went through blocking ?
	Bool BlockingLineInTheWay (Line Blocking, Int Flags)
	{
		If (!Blocking) Return False;
		
		//Stop at sight blocking lines (Can't see past them) and everything-blocking lines.
		If (Blocking.Flags & Line.ML_BLOCKEVERYTHING || Blocking.Flags & Line.ML_BLOCKSIGHT)
			Return True;
		
		If (!Flags)
			If (Blocking.Flags & Line.ML_BLOCKPROJECTILE)
				Return True;
		Else If (Flags & BLITW_HitscansToo)
			If (Blocking.Flags & (Line.ML_BLOCKPROJECTILE | Line.ML_BLOCKHITSCAN))
				Return True;
		Else If (Flags & BLITW_HitscansOnly)
			If (Blocking.Flags & Line.ML_BLOCKHITSCAN)
				Return True;
		
		Return False;
	}
	
	//Check if the trace hit any level geometry. This is very useful for all LOF checks, except if the projectile can literally go through level geometry.
	//BUG: This check fails on 3D floors with FF_THINFLOOR. This however seems to be a GZDoom bug. And I'm not knowledgeable enough to PR a fix lol.
	//: Check for collision with non-shoot through 3D middle textures. The only method for doing this is not exposed to ZScript, so I need to PR it at some point.
	Bool HitLevelGeometry (TraceResults Result)
	{
		//Hit a floor or ceiling.
		If (Result.HitType == Trace_HitFloor || Result.HitType == Trace_HitCeiling)
			Return True;
		
		If (Result.HitLine)
		{
			//Hit a linedef with void space behind it.
			If (Result.HitLine.Sidedef[Line.Back] == Null)
				Return True;
			
			//Hit a raised floor or lowered ceiling wall.
			If (Result.Tier != TIER_Middle)
				Return True;
		}
		
		Return False;
	}
	
	//Is the other actor hostile to the caller ?
	Bool IsHostile (Actor Caller, Actor Other)
	{
		If (!Caller || !Other) Return False;
		
		//KAI NPCs have a custom virtual to check for hostility.
		If (Caller Is "KAI_Actor")
			Return KAI_Actor(Caller).IsActorHostile (Other);
		
		Return Caller.IsHostile (Other); //If not a KAI NPC, use the native IsHostile().
	}
	
	//The object scope system doesn't like calling useful functions like CheckSight. So here is the Wish.com version.
	Bool CheckSightTo (Actor Origin, Actor Other, Double Range, Bool NoBlockSight = False)
	{
		If (!Other) Return False;
		
		Let Check = New ("KAI_BasicSightCheck");
		Vector3 SightPos = (Origin.Pos.XY,Origin.Pos.Z + Origin.Height * 0.75);
		
		Check.Shooter = Origin;
		Check.SightTarget = Other;
		Check.NoBlockSight = NoBlockSight;
		
		Check.Trace(SightPos,Origin.CurSector,Origin.Vec3To(Other),Range,0);
		
		Bool GoodLOS = Check.GoodLOS;
		Check.Destroy();
		
		Return GoodLOS;
	}
}

//The Khyber Pass version of P_CheckSight(). Brought to you by the object scope system.
Class KAI_BasicSightCheck : KAI_LOFRaycast
{
	Bool GoodLOS; //BadLOF's good cousin.
	Actor SightTarget; //Who are we even looking for ?
	//Vector3 SightTargPos; //The position to look at.
	Bool NoBlockSight; //The check ignores BLOCKSIGHT lines, like for explosions.
	Override ETraceStatus TraceCallback()
	{
		Actor Mobj = Results.HitActor;
		
		//No shooter, sight check failed.
		If (!Shooter)
			Return Trace_Stop;
		
		//Level geometry in the way, check failed.
		If (HitLevelGeometry (Results))
			Return Trace_Stop;
		
		//Sight or everything blocking lines in the way, check failed.
		If (Results.HitLine && ((!NoBlockSight && Results.HitLine.Flags & Line.ML_BLOCKSIGHT) || Results.HitLine.Flags & Line.ML_BLOCKEVERYTHING))
			Return Trace_Stop;
		
		//Ladies and gentlemen, we got him.
		If (Mobj && Mobj == SightTarget)
		{
			GoodLOS = True;
			Return Trace_Stop;
		}
		
		Return Trace_Skip;
	}
}

//Goes through all actors and adds them to the Mobjs array.
Class KAI_LOFActorFinder : KAI_LOFRaycast
{
	Int ActorLimit; //How many actors the trace goes through before it stops. Useful for things such as rippers that only go through a certain amount of actors.
	Int BlockMode; //What kind of lines will block the actor. Uses the same flags as BlockingLineInTheWay, a value of 0 (Default) means it checks only for BLOCKEVERYTHING lines.
	Override ETraceStatus TraceCallback()
	{
		If (!Shooter || Shooter && Results.HitActor != Shooter) AddToMobjList (Results.HitActor);
		
		//Stop at blocking lines.
		If (Results.HitLine && Results.HitLine.Flags & Line.ML_BLOCKEVERYTHING || BlockMode != 0 && BlockingLineInTheWay (Results.HitLine,BlockMode))
			Return Trace_Stop;
		
		//Stop at level geometry.
		If (HitLevelGeometry (Results))
			Return Trace_Stop;
		
		//If a limit to how many actors can be found has been set and passed. Then stop.
		If (ActorLimit > 0 && ActorLimit <= Mobjs.Size()-1)
			Return Trace_Stop;
		
		Return Trace_Skip;
	}
}

//A data class that infers generic projectile info, for custom line of fire traces to be able to use without adding tons of variables and parameters to them.
Class LOFProjInfo
{
	//Projectile information. Maybe this should become a struct eventually, so that other tracers can also easily use it.
	Class <Actor> Projectile; //A class reference to the class the check is running for, used to get ripper-related information.
	Bool IsRipper; //Is the projectile a ripper ?
	Bool NoBossRip; //The ripper can't go through bBOSS actors.
	Int RipLevel; //The ripper level of the projectile
	Int RipDepth; //How many rips the projectile will do before exploding. This is decremented here like it is for rippers.
	Bool RipOnce; //Does the projectile only rip through each victim once ?
	
	//Initialize and store info related to the projectile the check is for. THIS MUST BE CALLED AFTER THE PROJECTILE IS PASSED, AND BEFORE any TRACE().
	Void InitializeProjectileInfo()
	{
		If (!Projectile) Return;
		IsRipper = GetDefaultByType(Projectile).bRipper;
		NoBossRip = GetDefaultByType(Projectile).bNoBossRip;
		RipLevel = GetDefaultByType(Projectile).RipperLevel;
		//KAI specific properties.
		If (Projectile Is "KAI_BaseProjectile")
		{
			RipDepth = KAI_BaseProjectile(GetDefaultByType(Projectile)).RipDepth;
			RipOnce = KAI_BaseProjectile(GetDefaultByType(Projectile)).bRipOnce;
		}
		//DEBUG: Print projectile data.
		//Console.Printf ("IsRipper: %d, NoBossRip: %d, RipOnce: %d",IsRipper,NoBossRip,RipOnce);
		//Console.Printf ("RipLevel: %d, RipDepth: %d",RipLevel,RipDepth);
	}
}

//Generic projectile LOF check for non-ripping projectiles, should be applicable to most projectiles.
//PropHealthThreshold: If a destructible prop actor with this much health or less is standing in the way, then shoot at it anyway.
//SplashRadius: If the check hit level geometry, but the target is within the specified distance from the hit spot. Then don't return BadLOF.
//PLAYTEST: The friendly fire prevention needs testing. Should work though, it just calls the shooters' IsActorHostile()/IsHostile().
Class KAI_LOFProjectileCheck : KAI_ProjectileLOFCheck{} //Misnamed the class on the wiki, oops. Not going to change every wiki reference to said class though.
Class KAI_ProjectileLOFCheck : KAI_LOFRaycast
{
	Int PropHealthThreshold;
	Double SplashRadius;
	Bool FriendlyFire; //The attack this LOF check is for can harm the shooters' friends.
	LOFProjInfo ProjInfo;
	
	//Checks if the actor can be ripped, and also decrements the rip depth.
	//NOTE: This function DOES NOT account for how the rip depth is affected on rippers without bRipOnce, so it just ignores it if the flag is off !
	Bool CanRipActor (Actor Who)
	{
		If (!Who || !ProjInfo || Shooter && Who == Shooter) Return True; //Yes you can go through the shooter. Or there's no other actor or info struct.
		
		If (ProjInfo.RipOnce && ProjInfo.RipDepth != 0 && ProjInfo.RipDepth <= 1) //No more high quality rips left.
		{
			ProjInfo.RipDepth = 0;
			Return False;
		}
		
		If (!CantRipActor (Who,ProjInfo.RipLevel,ProjInfo.NoBossRip))
		{
			If (ProjInfo.RipOnce && ProjInfo.RipDepth)
				ProjInfo.RipDepth--;
			Return True;
		}
		Return False;
	}
	
	//Is the other actor in the blast radius ?
	Bool CaughtInTheBlast()
	{
		If (SplashRadius <= 0 || !Other || Other && Other.bNoRadiusDmg) Return False;
		
		Double Distance = Level.Vec3Diff (Other.Pos,Results.HitPos).Length();
		If (Distance <= SplashRadius)
			Return CheckSightTo (Shooter,Other,Distance, True);
		
		Return False;
	}
	
	Override ETraceStatus TraceCallback()
	{
		If (PropHealthThreshold == 0) PropHealthThreshold = 400; //HACK: Default value, since it can't be set with a normal variable decleration.
		Actor Mobj = Results.HitActor;
		
		If (!Shooter) Return Trace_Stop;
		
		If (!Shooter || Shooter && Results.HitActor != Shooter) AddToMobjList (Mobj);
		
		If (Mobj == Shooter.Master) Return Trace_Skip;
		
		//The target is in the line of fire. Shoot them anyway.
		If (Other && Mobj == Other)
			Return Trace_Stop;
		
		//If friendly fire prevention is on, return false if an ally is in the way.
		If (FriendlyFire && Mobj && !IsDead(Mobj) && IsCollidable (Mobj) && !IsInanimateObject(Mobj) && !IsHostile(Shooter,Mobj))
		{
			BadLOF = True;
			Return Trace_Stop;
		}
		
		Bool OtherInBlast = CaughtInTheBlast(); //Caching
		
		//Indestructible prop in the way.
		If (Mobj && !OtherInBlast && IsCollidable (Mobj) && IsIndestructible (Mobj) && IsInanimateObject (Mobj))
		{
			BadLOF = True;
			Return Trace_Stop;
		}
		
		//Destructible prop, but far too strong to shoot through in a timely manner.
		If (Mobj && !OtherInBlast && IsCollidable (Mobj) && !IsIndestructible(Mobj) && IsInanimateObject (Mobj) && !CanShootAtProp(Mobj,PropHealthThreshold))
		{
			BadLOF = True;
			Return Trace_Stop;
		}
		
		//Solid corpse in the way, attack can't go through.
		Bool StopAtCorpse = !FriendlyFire ? IsHostile(Shooter,Mobj) : True;
		If (Mobj && !OtherInBlast && IsSolidCorpse(Mobj) && StopAtCorpse)
		{
			BadLOF = True;
			Return Trace_Stop;
		}
		
		//A projectile class has been passed that is a ripper, but it can no longer rip the actor.
		If (ProjInfo && ProjInfo.Projectile && ProjInfo.IsRipper && IsCollidable (Mobj) && !CanRipActor (Mobj))
		{console.printf ("epic ripping fail");
			BadLOF = True;
			Return Trace_Stop;
		}
		
		//The trace specifically hit a projectile blocking line. e.g a window linedef or a polyobject.
		If (BlockingLineInTheWay (Results.HitLine,0))
		{
			BadLOF = True;
			Return Trace_Stop;
		}
		
		//Level geometry is in the way.
		If (HitLevelGeometry (Results))
		{
			//Don't return BadLOF if the target would be caught in the blast radius anyway. Unless they are immune to splash damage of course.
			Double Distance;
			If (SplashRadius > 0 && Other && !Other.bNoRadiusDmg && Distance <= SplashRadius)
			{
				Distance = Level.Vec3Diff (Other.Pos,Results.HitPos).Length();
				If (CheckSightTo (Shooter,Other,Distance))
					Return Trace_Stop;
				Else
				{
					BadLOF = True;
					Return Trace_Stop;
				}
			}
			Else
				BadLOF = True;
			Return Trace_Stop;
		}
		
		Results.HitActor = Null;
		Return Trace_Skip;
	}
}