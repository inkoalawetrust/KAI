//$GZDB_SKIP
//Functions and code exclusive to the turret class.
Extend Class KAI_BaseTurret
{
	//Is the turrets too high or too low over its' elevation limits ?
	Int TurretOverPitchLimits()
	{
		Double Diff = 0.1; //The turret pitch is clamped every tick, so this small difference allows them to still stop shooting.
		If (MaxPitch != 0 && Pitch-Diff < MaxPitch) Return ELEVATION_TOOHIGH;
		If (MinPitch != 0 && Pitch+Diff > MinPitch) Return ELEVATION_TOOLOW;
		Return ELEVATION_INBOUNDS;
	}
	
	//Is the other actor specified too high or below the turrets' pitch limits ?
	//ZOfs and TargZOfs are properties passed over to PitchTo().
	Int IsOverPitchLimits (Actor Other, Double ZOfs = 0, Double TargetZOfs = 0)
	{
		If (!Other) Return ELEVATION_INBOUNDS; //No other actor specified.
		
		Double PitchToOther = PitchTo (Other,ZOfs,TargetZOfs);
		
		If (MaxPitch != 0 && PitchToOther < MaxPitch) Return ELEVATION_TOOHIGH;
		If (MinPitch != 0 && PitchToOther > MinPitch) Return ELEVATION_TOOLOW;
		Return ELEVATION_INBOUNDS;
	}
	
	//Conditionally change the turrets' sprites based on pitch.
	Int UpdateTurretElevation (Int FaceDown, Int FaceStraight, Int FaceUp, Int FaceUp2)
	{
		If (Pitch >= 6 && Pitch >= 0)
			Return FaceDown;
		Else If (Pitch < 6 && Pitch >= -15)
			Return FaceStraight;
		Else If (Pitch < -14 && Pitch >= -50)
			Return FaceUp;
		Else If (Pitch <= -50)
			Return FaceUp2;
		
		Return FaceStraight;
	}
	
	Enum TurretRotationFlags
	{
		RTVF_NOTARGETCHECK	= 1 << 0, //The turret will apply its' rotation mechanics even without a target.
		RTVF_RELATIVEONLY	= 1 << 1, //The turret will only rotate relative to its' masters' angle + its' DeathAngleOffset, even if the turret isn't destroyed.
	}
	
	//Makes the turret rotate back over time to the direction that the vehicle is facing. Instead of snapping back instantly.
	Void RotateToVehicle (Int Flags = 0)
	{
		If (!Master) Return;
		
		If (IsDead (Self) || Flags & RTVF_RELATIVEONLY)
		{
			Angle = Master.Angle+TurretRotationOffset;
			Return;
		}
		
		If ((!Target || Flags & RTVF_NOTARGETCHECK))
		{
			If (AbsAngle (Master.Angle, Angle) < 0.75) TurretSnapDelay = 0; //Snap back into the vehicles' position if the angle difference is small enough.
			
			//If the pitch difference is too small, just start snapping to the vehicles' direction.
			If (!TurretSnapDelay || Abs (Master.Pitch - Pitch) < 0.75)
				Pitch = Master.Pitch;
			Else
				Pitch += (Master.Pitch - Pitch) * TurnAmount;
			
			If (!TurretSnapDelay)
			{
				Angle = Master.Angle;
			}
			Else
			{
				Angle += DeltaAngle (Angle, Master.Angle) * TurnAmount;
			}
		}
	}
	
	Void UpdateTurretSnapTimer (Int DefaultValue = 50)
	{
		If (!Target && TurretSnapDelay > 0)
			TurretSnapDelay;
		Else If (Target)
			TurretSnapDelay = DefaultValue;
	}
	
	Void DoCombatTraverse (Actor ToWhat)
	{
		//NOTE: A pitch of 270 means no pitch shifting in A_Face, which is bad for the turrets, since code like their LOF checks normally relies on them actually facing the target properly.
		Double AngleTraverse = CombatAngleTurnRate > 0 ? CombatAngleTurnRate/GameTicRate : 0;
		Double PitchTraverse = CombatPitchTurnRate > 0 ? CombatPitchTurnRate/GameTicRate : 0;
		A_Face (ToWhat,AngleTraverse,PitchTraverse,flags:FAF_MIDDLE);
	}
	
	//Returns true if the Other actor is within a cone of the specified size. The Size is the angle and pitch that the Other actor must be within relative to the callers' direction.
	Bool IsInCone (Actor Other, Double Size = 5, Double FalloffScale = 256)
	{
		If (!Other || Size <= 0)
			Return False;
		//HACK: This is meant to make the cone fall off linearly with distance. But pure linear falloff was too much so I had to scale it.
		//I think it works now ? IDFK I didn't even pass elementary school math. There's a reason I use so little math in anything.
		If (FallOffscale > 0)
		{
			Double OriginalSize = Size;
			Size = Max (0, Size - (Distance3D (Other) / FalloffScale));
			Size = Clamp (Size,0.1,OriginalSize*2); //Clamp the resulting value.
		}
		Return (AbsAngle (AngleTo(Other),Angle) <= Size && Abs (Pitch - PitchTo (Target)) <= Size);
	}
	
	//Handles making the vehicles lead their shots based on their targets' movement, regardless of whether or not it's a player or monster.
	//Projectile: The projectile to modify.
	//SpreadHorz/SpreadVert: Maximum and minimum horizontal and vertical spread, stored in Vector2s.
	//MinDist: The minimum distance below which target prediction won't be used. And the projectile will be fired straight at the target instead.
	Void HandleTargetPrediction (Actor Projectile, Vector2 SpreadHorz = (0,0), Vector2 SpreadVert = (0,0), Double MinDist = 1024)
	{
		Vector3 OldVel;
		If (!Projectile || !Target) Return;
		
		//No movement prediction, so just shoot normally and move on.
		If (bNoTargetPrediction || Distance3DSquared(Target) <= MinDist*MinDist)
		{
			NormalProjectileFire (Projectile,SpreadHorz,SpreadVert);
			Return;
		}
		
		//Target has no velocity for VelIntercept to work with. This is almost always the case for normal NPCs, which move using small teleport steps, instead of actual movement.
		If ((Target.Vel.X == 0 && Target.Vel.Y == 0 && Target.Vel.Z == 0))
		{
			OldVel = Target.Vel;
			
			If (Target.CurState.Tics)
				Target.Vel = Level.Vec3Diff (LastEnemyPosition,CurrentEnemyPosition) / Target.CurState.Tics;
			Else //Fallback to prevent division by zero.
				Target.Vel = Level.Vec3Diff (LastEnemyPosition,CurrentEnemyPosition);
			
			If ((Target.Vel.X == 0 && Target.Vel.Y == 0 && Target.Vel.Z == 0)) //Still no velocity
			{
				NormalProjectileFire (Projectile,SpreadHorz,SpreadVert);
				Target.Vel = OldVel; //Revert velocity.
				Return;
			}
			Projectile.VelIntercept (Target);
			Projectile.Angle += FRandom (SpreadHorz.X,SpreadHorz.Y);
			Projectile.Pitch += FRandom (SpreadVert.X,SpreadVert.Y);
			Projectile.Vel3DFromAngle (Projectile.Speed,Projectile.Angle,Projectile.Pitch);
			Target.Vel = OldVel;
		}
		//Target has velocity, like if it's a player or a custom actor with velocity-based movement.
		Else
		{
			Projectile.VelIntercept (Target);
			Projectile.Angle += FRandom (SpreadHorz.X,SpreadHorz.Y);
			Projectile.Pitch += FRandom (SpreadVert.X,SpreadVert.Y);
			Projectile.Vel3DFromAngle (Projectile.Speed,Projectile.Angle,Projectile.Pitch);
		}
	}
	
	//Adds projectile spread and adjusts the projectiles' velocity accordingly. Basically just normal shooting with no prediction.
	Void NormalProjectileFire (Actor Projectile, Vector2 SpreadHorz, Vector2 SpreadVert)
	{
		Projectile.A_FaceMovementDirection();
		Projectile.Angle += FRandom (SpreadHorz.X,SpreadHorz.Y);
		Projectile.Pitch += FRandom (SpreadVert.X,SpreadVert.Y);
		Projectile.Vel3DFromAngle (Projectile.Speed,Projectile.Angle,Projectile.Pitch);
	}
	
	//A ZScript copy of A_MonsterRefire without the shitty HitFriend() check, and with the A_FaceTarget() call toggleable.
	//Chance, AbortState: Work the same as in A_MonsterRefire.
	//DontFaceTarget: If on, the turret won't instantly face the target after each refire.
	//RetargetCheckChance: The chance that RetargetVehicleHull() runs after each refire. Never runs if set to -1. 
	//RetargetCheckFlags: The flags to pass to RetargetVehicleHull() if it DOES run.
	State KAI_TurretRefire (Int Chance, StateLabel AbortState, Bool DontFaceTarget = False, Int RetargetCheckChance = -1, Int RetargetCheckFlags = 0)
	{
		If (!DontFaceTarget)
			A_FaceTarget();
		
		If (RetargetCheckChance != -1 && Random2[pr_monsterrefire]() < RetargetCheckChance)
			RetargetVehicleHull (RetargetCheckFlags);
			
		If (Random2[pr_monsterrefire]() < Chance)
			Return State (Null);
		
		If (!Target /*|| HitFriend()*/ || IsDead (Target) || !CheckSight (Target,SF_SEEPASTBLOCKEVERYTHING|SF_SEEPASTSHOOTABLELINES))
			Return FindState (AbortState);
		
		Return State (Null);
	}
	
	//This function can be used by turrets to make them able to pick different targets from their master, instead of chasing or firing at the same target.
	//The Avoid parameter specifies the actor to avoid targeting, Origin specifies the actor the search starts around, and CheckRange is the search range.
	/*MinAlternateTargetRange specifies how far the new target must be from the actor that must be avoided. A value of 0 or less makes it just randomly
	pick one of the target candidates. If there is no other target that is further than MinAlternateTargetRange from the actor to avoid, then it picks the
	last target candidate left in the array.*/
	Actor PickDifferentTarget (Actor Avoid, Actor Origin, Double CheckRange, Double MinAlternateTargetRange = -1)
	{
		If (!Avoid || !CheckRange) Return Null;
		
		Array <Actor> TargetList;
		
		BlockThingsIterator EnemyFinder = BlockThingsIterator.Create (Origin,CheckRange);
		
		CheckRange *= CheckRange; //Do the multiplication for Distance3DSquared only once.
		
		While (EnemyFinder.Next())
		{
			Actor Mobj = EnemyFinder.Thing;
			
			If (!Mobj || Mobj == Avoid) Continue; //AVOID THIS TARGET.
			
			If (Mobj.bDormant || IsInanimateObject (Mobj)) Continue; //Don't attack dormant or inanimate object actors.
			
			If (!CanBeTargeted(Self, Mobj)) Continue; //Can't be targeted. (Duh)
			
			If (IsDead (Mobj)) Continue; //Is dead (Duuuuuuuuuuh)
			
			If (Origin.Distance3DSquared(Mobj) > CheckRange) Continue; //Too out of reach.
			
			If (!IsHostile (Mobj)) Continue; //Actor isn't hostile.
			
			If (!CheckSight(Mobj)) Continue; //Actor is not visible.
			
			TargetList.Push(Mobj); //Actor passed the checks, put it on the list of candidates.
		}
		
		//If no target was found at all.
		If (!TargetList.Size()) Return Null;
		
		//The minimum distance the new target must have from the actor to avoid is zero, so just pick a random potential target that was found.
		If (MinAlternateTargetRange <= 0) Return TargetList[Random(0,TargetList.Size()-1)];
		
		For (Int I = 0; I < TargetList.Size(); I++)
		{
			If (I == TargetList.Size()-1) Return TargetList[I]; //No target that were further than the actor to avoid, so return the last candidate left.
			
			If (TargetList[I].Distance3DSquared(Avoid) > MinAlternateTargetRange) Return TargetList[I]; //Candidate is too close to the actor to avoid.
			Else {} //Found a potential target that is far enough away from the actor that must be avoided.
		}
		
		Return Null;
	}
	
	Enum TurretLOFFlags
	{
		TLOF_FaceOther			= 1 << 0, //Should the ray be fired at the direction of the other actor instead of the direction the turret is facing ?
		TLOF_DoStayAround		= 1 << 1, //Should the function not mess with the turrets' bDontStayAround flag ?
	}
	
	//A generic turret LOF check, that is a wrapper for the stock projectile line of fire check.
	//Other: The actor to check for, normally this will be the target. You can also simply not specify another actor.
	//PropHealthThreshold: If a destructible prop is in the turrets' way with this much health or less, then still return true and fire through it.
	//SplashRadius: For explosive attacks, if the LOF misses and hits level geometry, then still return true if the Other actor would be caught in the blast.
	//CheckOffsets: How much to offset the checks' origin relative to the callers' position, default is offset 32 map units off the callers' Z position.
	//Flags: What flags to pass to the check, a list of flags can be found above.
	Bool KAI_TurretCheckLOF (Actor Other = Null, Int PropHealthThreshold = 400, Double SplashRadius = 0, Vector3 CheckOffsets = (0,0,32), Int Flags = 0)
	{
		Let Check = New ("KAI_ProjectileLOFCheck");
		
		Vector3 Direction;
		If (!(Flags & TLOF_FaceOther)/* && (Other && Distance3DSquared(Other) > 2048)&& !IsInCone(Other,10)*/)
			Direction = (AngleToVector(Angle, Cos(Pitch)), -Sin(Pitch));
		Else
		{
			Double PitchTo = PitchTo (Other,14,Other.Height/2);
			Direction = (AngleToVector(AngleTo(Other), Cos(PitchTo)), -Sin(PitchTo));
		}
		
		Double Distance = Other ? Distance3D (Other)+32 : MaxTargetRange;
		Check.Shooter = Self;
		Check.Other = Other;
		Check.SplashRadius = SplashRadius;
		Check.PropHealthThreshold = ProphealthThreshold;
		Check.Trace (Level.Vec3Offset (Pos,CheckOffsets),CurSector,Direction,Distance,0);
		
		//KAI_LOFRaycast.VisualizeTracePath (Level.Vec3Offset (Pos,CheckOffsets),Check.Results.HitPos,Check.Results.Distance);
		
		If (Check.BadLOF)
		{
			If (!(Flags & TLOF_DoStayAround)) bDontStayAround = True;
			Check.Destroy();
			Return False;
		}
		
		If (!(Flags & TLOF_DoStayAround)) bDontStayAround = False;
		Check.Destroy();
		Return True;
	}
	
	Enum FindInLOFFlags
	{
		FIL_FaceTarget = 1 << 0, //Fire the ray straight at the Other actors' direction instead of wherever the turret is facing.
		FIL_HitscanHit = 1 << 1, //Stop the search if a hitscan blocking line is in the way.
		FIL_MissileHit = 1 << 2, //Ditto, but for projectile blocking lines instead.
	}
	
	//Finds all actors in the line of fire, and adds them to the array specified in FoundActors.
	//Flags: The flags to alter the checks' behavior, see above for the actual flags.
	//Range: The range of the check.
	//ActorLimit: How many actors the check will find before stopping.
	//CheckOffsets: The offsets of the check relative to the caller.
	//Other: The actor to aim the check to if FIL_FaceTarget is on.
	//FoundActors: The array to output all the actors the check found to.
	Void KAI_FindInLOF (Int Flags, Double Range, Int ActorLimit = 0, Vector3 CheckOffsets = (0,0,32), Actor Other = Null, Out Array <Actor> FoundActors = Null)
	{
		Let Check = New ("KAI_LOFActorFinder");
		Vector3 Direction;
		If (!(Flags & FIL_FaceTarget))
			Direction = (AngleToVector(Angle, Cos(Pitch)), -Sin(Pitch));
		Else
		{
			Double PitchTo = PitchTo (Other,14,Other.Height/2);
			Direction = (AngleToVector(AngleTo(Other), Cos(PitchTo)), -Sin(PitchTo));
		}
		
		Check.Shooter = Self;
		Check.Other = Other;
		Check.ActorLimit = ActorLimit;
		
		Int BlockFlags;
		If (Flags & FIL_HitscanHit && !(Flags & FIL_MissileHit)) BlockFlags |= KAI_LOFRaycast.BLITW_HitscansOnly;
		Else If (Flags & (FIL_MissileHit|FIL_HitscanHit)) BlockFlags |= KAI_LOFRaycast.BLITW_HitscansToo;
		Check.BlockMode = BlockFlags;
		
		Check.Trace (Level.Vec3Offset (Pos,CheckOffsets),CurSector,Direction,Range,0);
		
		//The most important bit. Transfer the actors the line tracer found to the array that was inputted 
		If (FoundActors)
			FoundActors.Move(Check.Mobjs);
		
		Return;
	}
}

//This is the base class for making custom LineTracer-based line of fire checks for vehicles. This is better than the old method of a do-all LOF check method.
//It contains some basic LOF-related checks methods. Along with access to the KAIs' generic actor checks.
Class KAI_LOFRaycast : LineTracer
{
	Mixin KAI_CheckFunctions;
	Bool BadLOF; //If true, there is something standing in the shooters' line of fire.
	Actor Shooter; //The actor firing the raycast.
	Actor Other; //The actor we are looking for, normally this is the shooters' target.
	Array <Actor> Mobjs; //An array of all the mobjs that were found. Can be returned to functions by using the out keyword.
	
	//Visualizes a path between OriginPos and FinalPos with a length specified by Distance. Used to debug where LOF checks start, go to, and end.
	Static Void VisualizeTracePath (Vector3 OriginPos, Vector3 FinalPos, Double Distance)
	{
		Vector3 Path = Level.Vec3Diff (OriginPos,FinalPos);
		Double PathDist = Distance;
		Path /= PathDist;
		If (!(PathDist <= 1))
		{
			For( Double I = 0; I < PathDist; I += 4)
			{
				FSpawnParticleParams P;
				P.Color1 = "White";
				P.Style = STYLE_None;
				P.Lifetime = GameTicRate/2;
				P.Pos = Level.Vec3Offset (OriginPos,Path*I);
				P.Size = 4;
				P.StartAlpha = 1;
				P.FadeStep = -1;
				P.Flags = SPF_FULLBRIGHT;
				Level.SpawnParticle (P);
			}
		}
	}
	
	//Add the Other actor to the Mobjs array.
	Void AddToMobjList (Actor Other)
	{
		If (Other)
			Mobjs.Push(Other);
		Return;
	}
	
	//Should the actor shoot at the prop ?
	//Other: The actor to check.
	//HealthThreshold: If the props' health is at or below this value, then shoot.
	Bool CanShootAtProp (Actor Other, Int HealthThreshold = 400)
	{
		If (!Other || !Shooter) Return False;
		If (HealthThreshold <= 0) Return True; //No health limit specified. You can shoot it.
		
		//Actor is an destructible inanimate object. And it's health is at or below the minimum threshold.
		If (IsInanimateObject (Other) && !IsIndestructible (Other) && Other.Health <= HealthThreshold)
			Return True;
		
		Return False;
	}
	
	//Is the other actor a corpse that is still collidable ?
	Bool IsSolidCorpse (Actor Other)
	{
		If (!Other) Return False;
		
		If (!IsDead (Other)) Return False;
		
		If (!Other.bDontCorpse) Return False;
		
		Return True;
	}
	
	//Useful for ripper projectiles, returns false if the actor hit can be ripped.
	Bool CantRipActor (Actor Other, Int RipLevel)
	{
		Bool NoRipMin = !Other.RipLevelMin;
		Bool NoRipMax = !Other.RipLevelMax;
		
		If (!NoRipMin && Other.RipLevelMin > RipLevel || !NoRipMax && Other.RipLevelMax < RipLevel)
			Return True;
		
		Return False;
	}
	
	Enum BLITWFlags
	{
		BLITW_HitscansToo 	= 1 << 0,	//Check for hitscan blocking lines too.
		BLITW_HitscansOnly	= 1 << 1	//Check ONLY for hitscan blocking lines.
	}
	
	//Is the line the trace went through blocking ?
	Bool BlockingLineInTheWay (Line Blocking, Int Flags)
	{
		If (!Blocking) Return False;
		
		//Stop at sight blocking lines (Can't see past them) and everything-blocking lines.
		If (Blocking.Flags & Line.ML_BLOCKEVERYTHING || Blocking.Flags & Line.ML_BLOCKSIGHT)
			Return True;
		
		If (!Flags)
			If (Blocking.Flags & Line.ML_BLOCKPROJECTILE)
				Return True;
		Else If (Flags & BLITW_HitscansToo)
			If (Blocking.Flags & (Line.ML_BLOCKPROJECTILE | Line.ML_BLOCKHITSCAN))
				Return True;
		Else If (Flags & BLITW_HitscansOnly)
			If (Blocking.Flags & Line.ML_BLOCKHITSCAN)
				Return True;
		
		Return False;
	}
	
	//Check if the trace hit any level geometry. This is very useful for all LOF checks, except if the projectile can literally go through level geometry.
	//BUG: This check fails on 3D floors with FF_THINFLOOR. This however seems to be a GZDoom bug. And I'm not knowledgeable enough to PR a fix lol.
	//TODO: Check for collision with non-shoot through 3D middle textures. The only method for doing this is not exposed to ZScript, so I need to PR it at some point.
	Bool HitLevelGeometry (TraceResults Result)
	{
		//Hit a floor or ceiling.
		If (Result.HitType == Trace_HitFloor || Result.HitType == Trace_HitCeiling)
			Return True;
		
		If (Result.HitLine)
		{
			//Hit a linedef with void space behind it.
			If (Result.HitLine.Sidedef[Line.Back] == Null)
				Return True;
			
			//Hit a raised floor or lowered ceiling wall.
			If (Result.Tier != TIER_Middle)
				Return True;
		}
		
		Return False;
	}
	
	//The object scope system doesn't like calling useful functions like CheckSight. So here is the Wish.com version.
	Bool CheckSightTo (Actor Origin, Actor Other, Double Range, Bool NoBlockSight = False)
	{
		If (!Other) Return False;
		
		Let Check = New ("KAI_BasicSightCheck");
		Vector3 SightPos = (Origin.Pos.XY,Origin.Pos.Z + Origin.Height * 0.75);
		
		Check.Shooter = Origin;
		Check.SightTarget = Other;
		Check.NoBlockSight = NoBlockSight;
		
		Check.Trace(SightPos,Origin.CurSector,Origin.Vec3To(Other),Range,0);
		
		Bool GoodLOS = Check.GoodLOS;
		Check.Destroy();
		
		Return GoodLOS;
	}
}

//The Khyber Pass version of P_CheckSight(). Brought to you by the object scope system.
Class KAI_BasicSightCheck : KAI_LOFRaycast
{
	Bool GoodLOS; //BadLOF's good cousin.
	Actor SightTarget; //Who are we even looking for ?
	Bool NoBlockSight; //The check ignores BLOCKSIGHT lines, like for the explosions.
	Override ETraceStatus TraceCallback()
	{
		Actor Mobj = Results.HitActor;
		
		//No shooter, sight check failed.
		If (!Shooter)
			Return Trace_Stop;
		
		//Level geometry in the way, check failed.
		If (HitLevelGeometry (Results))
			Return Trace_Stop;
		
		//Sight or everything blocking lines in the way, check failed.
		If (Results.HitLine && ((!NoBlockSight && Results.HitLine.Flags & Line.ML_BLOCKSIGHT) || Results.HitLine.Flags & Line.ML_BLOCKEVERYTHING))
			Return Trace_Stop;
		
		//Ladies and gentlemen, we got him.
		If (Mobj == SightTarget)
		{
			GoodLOS = True;
			Return Trace_Stop;
		}
		
		Return Trace_Skip;
	}
}

//Goes through all actors and adds them to the Mobjs array.
Class KAI_LOFActorFinder : KAI_LOFRaycast
{
	Int ActorLimit; //How many actors the trace goes through before it stops. Useful for things such as rippers that only go through a certain amount of actors.
	Int BlockMode; //What kind of lines will block the actor. Uses the same flags as BlockingLineInTheWay, a value of 0 (Default) means it checks only for BLOCKEVERYTHING lines.
	Override ETraceStatus TraceCallback()
	{
		AddToMobjList (Results.HitActor);
		
		//Stop at blocking lines.
		If (Results.HitLine && Results.HitLine.Flags & Line.ML_BLOCKEVERYTHING || BlockMode != 0 && BlockingLineInTheWay (Results.HitLine,BlockMode))
			Return Trace_Stop;
		
		//Stop at level geometry.
		If (HitLevelGeometry (Results))
			Return Trace_Stop;
		
		//If a limit to how many actors can be found has been set and passed. Then stop.
		If (ActorLimit > 0 && ActorLimit >= Mobjs.Size()-1)
			Return Trace_Stop;
		
		Return Trace_Skip;
	}
}

//Generic projectile LOF check for non-ripping projectiles, should be applicable to most projectiles.
//PropHealthThreshold: If a destructible prop actor with this much health or less is standing in the way, then shoot at it anyway.
//SplashRadius: If the check hit level geometry, but the target is within the specified specified distance from the hit spot. Then don't return BadLOF.
Class KAI_ProjectileLOFCheck : KAI_LOFRaycast
{
	Int PropHealthThreshold;
	Double SplashRadius;
	
	//Is the other actor in the blast radius ?
	Bool CaughtInTheBlast()
	{
		If (SplashRadius <= 0 || !Other || Other && Other.bNoRadiusDmg) Return False;
		
		Double Distance = Level.Vec3Diff (Other.Pos,Results.HitPos).Length();
		If (Distance <= SplashRadius)
			Return CheckSightTo (Shooter,Other,Distance, True);
		
		Return False;
	}
	
	Override ETraceStatus TraceCallback()
	{
		If (PropHealthThreshold == 0) PropHealthThreshold = 400; //Default value, since it can't be set with a normal variable decleration.
		Actor Mobj = Results.HitActor;
		
		If (!Shooter) Return Trace_Stop;
		
		AddToMobjList (Mobj);
		
		If (Mobj == Shooter.Master) Return Trace_Skip;
		
		//The target is in the line of fire. Shoot them anyway.
		If (Other && Mobj == Other)
			Return Trace_Stop;
		
		Bool OtherInBlast = CaughtInTheBlast(); //Caching
		
		//Indestructible prop in the way.
		If (Mobj && !OtherInBlast && IsIndestructible (Mobj) && IsInanimateObject (Mobj))
		{
			BadLOF = True;
			Return Trace_Stop;
		}
		
		//Destructible prop, but far too strong to shoot through in a timely manner.
		If (Mobj && !OtherInBlast && IsCollidable (Mobj) && !IsIndestructible(Mobj) && IsInanimateObject (Mobj) && !CanShootAtProp(Mobj,PropHealthThreshold))
		{
			BadLOF = True;
			Return Trace_Stop;
		}
		
		//Solid corpse of an enemy in the way, shell can't go through.
		If (Mobj && !OtherInBlast && KAIVehicle_IsHostile(Shooter,Mobj) && IsSolidCorpse(Mobj))
		{
			BadLOF = True;
			Return Trace_Stop;
		}
		
		//The trace specifically hit a projectile blocking line. e.g a window linedef or a polyobject.
		If (BlockingLineInTheWay (Results.HitLine,0))
		{
			BadLOF = True;
			Return Trace_Stop;
		}
		
		//Level geometry is in the way.
		If (HitLevelGeometry (Results))
		{
			//Don't return BadLOF if the target would be caught in the blast radius anyway. Unless they are immune to splash damage of course.
			Double Distance;
			If (SplashRadius > 0 && Other && !Other.bNoRadiusDmg && Distance <= SplashRadius)
			{
				Distance = Level.Vec3Diff (Other.Pos,Results.HitPos).Length();;
				If (CheckSightTo (Shooter,Other,Distance))
					Return Trace_Stop;
				Else
				{
					BadLOF = True;
					Return Trace_Stop;
				}
			}
			Else
				BadLOF = True;
			Return Trace_Stop;
		}
		
		Return Trace_Skip;
	}
}