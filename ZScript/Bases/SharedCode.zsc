Mixin Class HumanoidAndVehicleCode
{
	Enum HitChanceFlags
	{
		DHC_HOSTILES	= 1 << 0, //Count any enemies of the actor hit by the smart check as successful hits as well. Smart check only.
		DHC_THRUHOSTILES= 1 << 1, //Implies DHC_HOSTILES too, makes the smart check go through any hostiles that have already been hit.
	}
	
	//Determines the chance of the NPC hitting the other actor with their attack.
	//Other: The actor to check, obviously.
	/*Smart: If this is on, usually when a CVAR is false or something. The NPC will fire a series of hitscans at Other and return how many hit,
	instead of using a purely distance-based check.*/
	/*Distance: The distance to the Other actor, used for caching for the basic hit chance algorithm, if it's kept to Double.NaN and Smart is false,
	it calculates the distance itself instead.*/
	//DumbSpread: The perfect conical spread of the attack, only used by the dumb hit chance algorithm.
	//Shots: How many hypothetical shots is the NPC firing ? Used by both check types.
	//Offset: Offset the origin of the smart check by these coordinates relative to the NPC.
	//Spread: A Vector4 that stores: X = Minimum horizontal spread Y = Maximum horizontal spread Z = Minimum vertical spread W = Maximum vertical spread
	//Range: The maximum range of the attack.
	//TargZOfs: What height should the Smart check traces be aimed at ? e.g so they can be aimed at the top or middle of the Other actor.
	//Flags: The flags passed to the check.
	Int DetermineHitChance (Actor Other, Bool Smart, Double Distance = Double.NaN, Double DumbSpread = 1,
	Int Shots = 1, Vector3 Offsets = (0,0,0), Vector4 Spread = (0,0,0,0), Double Range = 4096, Double TargZOfs = 0, Int Flags = DHC_HOSTILES)
	{
		If (KAI_DebugHitChance) Console.Printf ("Calling DetermineHitChance() from %s, pointer address %p",GetClassName(),Self);
		If (!Other || Shots <= 0) Return 0;
		If (!Smart) //CREDIT: TonynUBarnes for the tangent code.
		{
			If (Distance != Distance) //No cached distance passed, calculate it ourselves.
				Distance = Distance3D(Other);
			
			If (KAI_DebugHitChance) Console.Printf ("DetermineHitChance(): Distance to other is %.2f", Distance);
			Double MathFunnel = Distance * Tan (DumbSpread);
			Double Chance = (Other.Radius / MathFunnel) + FRandom(0,0.05);
			If (KAI_DebugHitChance) Console.Printf ("Hit ratio %.3f",Chance);
			
			Int Hits;
			
			//Credit: RNG code written by RaveYard.
			For (Int I = 0; I < Shots; I++)
			{
				If (FRandom (0,1.0) <= Chance)
					Hits++;
			}
			
			If (KAI_DebugHitChance)
			{
				Console.Printf ("DetermineHitChance(): I will land %d shots with the dumb algorithm.",Hits);
				Console.Printf ("Funnel is %.2f",MathFunnel);
				Console.Printf ("========================================================");
			}
			Return Hits;
		}
		Else
		{
			If (KAI_DebugHitChance) Console.Printf ("DetermineHitChance(): Angle %.2f, Pitch %.2f",Angle,Pitch);
			Let Check = New ("KAI_HitChanceTracer");
			Int Hits;
			Vector3 Start = Level.Vec3Offset (Pos,Offsets);
			Vector3 AimDir;
			Double HSpread, VSpread;
			
			If (Flags & DHC_THRUHOSTILES) //Turn DHC_HOSTILES too if DHC_THRUHOSTILES is true.
				Flags |= (DHC_HOSTILES|DHC_THRUHOSTILES);
			
			Check.Shooter = Self;
			Check.Other = Other;
			Check.HostilesToo = Flags & DHC_HOSTILES;
			Check.ThruHostiles= Flags & DHC_THRUHOSTILES;
			
			While (--Shots >= 0)
			{
				//Add spread and all that good stuff.
				HSpread = AngleTo(Other)+FRandom (Spread.X,Spread.Y);
				VSpread = PitchTo(Other,Offsets.Z,TargZOfs)+FRandom (Spread.Z,Spread.W);
				AimDir = (AngleToVector(HSpread, Cos(VSpread)), -Sin(VSpread));
				
				Check.Trace (Start,CurSector,AimDir,Range,0);
				
				If (KAI_DebugHitChance)
					Console.Printf ("Trace fired at %d %d %d, Ended at %d %d %d",Start,Check.Results.HitPos);
				
				If (Check.Success)
				{
					If (KAI_DebugHitChance)
					{
						FSpawnParticleParams P; P.Color1 = "Green"; P.Style = STYLE_None; P.Lifetime = 35; P.Size = 4; P.StartAlpha = 1; P.FadeStep = -1; P.Flags = SPF_FULLBRIGHT;
						KAI_LOFRaycast.VisualizeTracePath(Start,Check.Results.HitPos,Check.Results.Distance,8,p);
					}
					Hits++; //Another happy landing.
				}
				Else If (!Check.Success && KAI_DebugHitChance)
				{
					FSpawnParticleParams P; P.Color1 = "Red"; P.Style = STYLE_None; P.Lifetime = 35; P.Size = 4; P.StartAlpha = 1; P.FadeStep = -1; P.Flags = SPF_FULLBRIGHT;
					KAI_LOFRaycast.VisualizeTracePath(Start,Check.Results.HitPos,Check.Results.Distance,8,p);
				}
				Check.Success = False; //Try again.
			}
			If (KAI_DebugHitChance)
			{
				Console.Printf ("DetermineHitChance(): I will land %d shots with the smart algorithm.",Hits);
				Console.Printf ("========================================================");
			}
			Check.Destroy();
			Return Hits;
		}
		Return 0;
	}
	
	//Check if the caller can take cover at their current position. Returns if the actor can take cover here, and also the coordinates to where "here" is.
	//Other: The actor to fire the traces towards to see if we can take cover from them. //MAYDO: MAKE THIS A COORDINATE.
	//InCoverAlready: Run this function for an actor already behind cover, for behaviors like staying behind cover and firing a different trace to not easily leave cover.
	//MinDist: The minimum distance that Other needs to be from the caller, if Other is closer than this, the check returns false automatically. If zero this check isn't ran.
	//TraceDist: A (F)Vector2 where X is the trace length to use without InCoverAlready, and Y the length to use with InCoverAlready set to true.
	//Heights: A (F)Vector 2 where X is the "eye" height for the traces, and Y the "hip" height.
	/*ActorCover: The stats that a potential prop for the actor to take cover behind must meet, X is the minimum radius, Y the minimum height, and Z the minimum health.
				Setting all 3 to -1 turns off taking cover behind actors entirely.*/
	//From: Only return that the cover is valid if this actor has a line of sight to the Other pointer, keeping this null ignores the sight check.
	Bool, Vector3 KAI_HasCoverHere (Actor Other, Bool InCoverAlready, Double MinDist = 72, FVector2 TraceDist = (48,128), FVector2 Heights = (50,18), FVector3 ActorCover = (32,40,30), Actor From = Null)
	{
		Vector3 HipHitPos = (Double.NaN, Double.NaN, Double.NaN);
		
		//Don't crouch if Other is invalid or you're below the world.
		If (!Other || Pos.Z < FloorZ)
			Return False, HipHitPos;
		
		//If the other actor is this close to you, you probably can't crouch.
		If (MinDist > 0 && Distance3DSquared(Other) <= MinDist*MinDist)
			Return False, HipHitPos;
		
		KAI_CoverCheckTracer EyeLevel, HipLevel;
		Bool EyeLevelUnblocked, HipLevelBlocked;
		Int HasHit;
		Actor Mobj;
		
		/*
		This fires two raycasts from the actors' "eyes" and "hips". Then the Eye and HipLevelBlocked booleans return true or false.
		Based on whether or not they hit any level geometry before stopping.
		*/
		
		If (!InCoverAlready) //Eye trace.
			EyeLevel = KAI_FireCoverTrace (Other,Heights.X,TraceDist.X);
		Else
			EyeLevel = KAI_FireCoverTrace (Other,Heights.X,TraceDist.Y);
		
		EyeLevelUnblocked = !EyeLevel.BadLOF;

		If (!InCoverAlready) //Hip trace.
			HipLevel = KAI_FireCoverTrace (Other,Heights.Y,TraceDist.X);
		Else //Run a longer range trace when crouched to not go out of cover as easily when behind strangely shaped cover like star shaped fountains.
			HipLevel = KAI_FireCoverTrace (Other,Heights.Y,TraceDist.Y);
		
		//KLUDGE: Just because this shouldn't be happening, it doesn't mean it WON'T.
		If (!HipLevel || !EyeLevel)
		{
			If (InCoverAlready)
				Return True, HipHitPos;
			
			Return False, HipHitPos;
		}
		
		HasHit = HipLevel.HitGeo;//HipLevel.HitType;
		Mobj = HipLevel.Other;//HipLevel.HitActor;
		HipHitPos = HipLevel.Results.HitPos - HipLevel.Results.HitVector * (Radius+32);//HipLevel.HitLocation - HipLevel.HitDir * (Radius*1.1);
		Bool NoMobjCover = (ActorCover == (-1,-1,-1));
		
		If (KAI_DebugCoverCheck)
		{
			FSpawnParticleParams P; P.Color1 = "Green"; P.Style = STYLE_None; P.Lifetime = 4; P.Size = 4; P.StartAlpha = 1; P.FadeStep = -1; P.Flags = SPF_FULLBRIGHT;
			KAI_LOFRaycast.VisualizeTracePath (Pos.PlusZ(Heights.X),EyeLevel.Results.HitPos,EyeLevel.Results.Distance,4,P);
			P.Color1 = "Red";
			KAI_LOFRaycast.VisualizeTracePath (Pos.PlusZ(Heights.Y),HipLevel.Results.HitPos,HipLevel.Results.Distance,4,P);
			//console.printf ("eye check went to %.2f %.2f %.2f eye level inblocked %d",eyelevel.results.hitpos,eyelevelunblocked);
			//console.printf ("hip check went to %.2f %.2f %.2f and hit actor %p",hiplevel.results.hitpos,mobj);
		}
		
		//Only take cover behind level geometry, and large enough actors that aren't other NPCs or players. And aren't about to break.
		If (HasHit || !NoMobjCover && Mobj && IsInanimateObject(Mobj) && Mobj.Radius >= ActorCover.X && Mobj.Height <= ActorCover.Y && Mobj.Health >= ActorCover.Z)
			HipLevelBlocked = True;
			
		Bool OtherInSight = !From ? True : From.CheckSight (Other,SF_SEEPASTSHOOTABLELINES|SF_IGNOREWATERBOUNDARY);
		//Only run this if the actor is not crouched already.
		If (!InCoverAlready)
		{
			If (EyelevelUnblocked && HipLevelBlocked && OtherInSight)
				Return True, HipHitPos;
		}
		
		//If you are crouching already and have a line of sight to the other actor.
		If (InCoverAlready && OtherInSight)
			Return HipLevelBlocked, HipHitPos; //Then return if you can crouch based on whether or not your hips are blocked by cover still.
		
		//If none of the other checks are true, but you are crouching already, then just assume you can keep doing so.
		If (InCoverAlready)
			Return True, HipHitPos;
		
		Return False, HipHitPos;
	}
	
	//Search for the closest cover from Other in front of and to the sides of the actor. Then return the cover closest to you, or NaN if nothing is found.
	//SideDist: How far to check to the left and right of the actor.
	//Spacing: The spacing of the cover checks.
	//Other, InCoverAlready, MinDist etc: Same as for KAI_HasCoverHere().
	//NOTE: This doesn't really handle flying actors, particularly the reachability check.
	Vector3 KAI_FindNearbyCover (Double SideDist, Double Spacing, Actor Other, Bool InCoverAlready, Double MinDist = 72, FVector2 TraceDist = (48,128), FVector2 Heights = (50,18), FVector3 ActorCover = (32,40,30), Actor From = Null)
	{
		If (!Other || Pos.Z < FloorZ)
			Return (Double.NaN, Double.NaN, Double.NaN);
		
		//Check in front of the actor first.
		Vector3 FrontCover = (Double.NaN, Double.NaN, Double.NaN);
		Bool GotFrontCover;
		[GotFrontCover, FrontCover] = KAI_HasCoverHere (Other,InCoverAlready,MinDist,TraceDist,Heights,ActorCover,From);
		If (GotFrontCover) FrontCover.Z = GetZAt(FrontCover.X,FrontCover.Y,flags:GZF_ABSOLUTEPOS);
		
		If (!GotFrontCover) //Didn't find cover right in front of the direction Other is at, so ignore the result.
			FrontCover = (Double.NaN, Double.NaN, Double.NaN);
		
		Vector3 RealPos = Pos;
		Vector3 LeftCover = (Double.NaN, Double.NaN, Double.NaN);
		Vector3 RightCover = (Double.NaN, Double.NaN, Double.NaN);
		Bool GotLeftCover, GotRightCover;
		
		For (Int DistDiv = SideDist/Spacing; DistDiv < SideDist; DistDiv += Spacing)
		{
			SetXYZ (Vec3Angle (DistDiv,AngleTo(Other)+90)); //Check left.
			SetZ(GetZAt());
			FindFloorCeiling (FFCF_ONLYSPAWNPOS); //DO. NOT. CHECK. UNDER. THE. WORLD.
			[GotLeftCover, LeftCover] = KAI_HasCoverHere (Other,InCoverAlready,MinDist,TraceDist,Heights,ActorCover,From);
			If (GotLeftCover) LeftCover.Z = GetZAt();
			//actor point = KAI_DebugPointDelay.KAI_TempPointSpawn(leftcover,16);
			SetXYZ (RealPos);
			FindFloorCeiling (FFCF_ONLYSPAWNPOS);
			If (!GotLeftCover || !IsPosReachable (LeftCover))
			{
				GotLeftCover = False;
				LeftCover = (Double.NaN, Double.NaN, Double.NaN);
			}
			Else If (GotLeftCover)
				Break; //Found a spot to hide behind on the left.
		}
		
		For (Int DistDiv = SideDist/Spacing; DistDiv < SideDist; DistDiv += Spacing)
		{
			SetXYZ (Vec3Angle (DistDiv,AngleTo(Other)-90)); //Check Right.
			SetZ(GetZAt());
			FindFloorCeiling (FFCF_ONLYSPAWNPOS); //DO. NOT. CHECK. UNDER. THE. WORLD.
			[GotRightCover, RightCover] = KAI_HasCoverHere (Other,InCoverAlready,MinDist,TraceDist,Heights,ActorCover,From);
			If (GotRightCover) RightCover.Z = GetZAt();
			//actor point = KAI_DebugPointDelay.KAI_TempPointSpawn(rightcover,16);
			SetXYZ (RealPos);
			FindFloorCeiling (FFCF_ONLYSPAWNPOS);
			If (!GotRightCover || !IsPosReachable (RightCover))
			{
				GotRightCover = False;
				RightCover = (Double.NaN, Double.NaN, Double.NaN);
			}
			Else If (GotRightCover)
				Break; //Found a spot to hide behind on the right.
		}
		
		//Get the smallest distance between these 3, and return the closest position.
		Double FrontDist = Int.Max;
		Double LeftDist = Int.Max;
		Double RightDist = Int.Max;
		
		If (!KAI_Math.IsEmptyVector3 (FrontCover)) FrontDist = Level.Vec3Diff (Pos,FrontCover).Length();
		If (!KAI_Math.IsEmptyVector3 (LeftCover)) LeftDist = Level.Vec3Diff (Pos,LeftCover).Length();
		If (!KAI_Math.IsEmptyVector3 (RightCover)) RightDist = Level.Vec3Diff (Pos,RightCover).Length();
		
		Double SmallestDist = Min (FrontDist,LeftDist,RightDist);
		
		If (SmallestDist != INT.MAX)
		{
			If (SmallestDist == FrontDist && !KAI_Math.IsEmptyVector3(FrontCover))
				{If (KAI_DebugCoverCheck)console.printf ("KAI_FindNearbyCover(): Taking front cover %d %d %d",frontcover);Return FrontCover;}
			Else If (SmallestDist == LeftDist && !KAI_Math.IsEmptyVector3(LeftCover))
				{If (KAI_DebugCoverCheck)console.printf ("KAI_FindNearbyCover(): Taking left cover %d %d %d",leftcover);Return LeftCover;}
			Else If (SmallestDist == RightDist && !KAI_Math.IsEmptyVector3(RightCover))
				{If (KAI_DebugCoverCheck)console.printf ("KAI_FindNearbyCover(): Taking right cover %d %d %d",rightcover);Return RightCover;}
		}
		If (KAI_DebugCoverCheck)console.printf ("KAI_FindNearbyCover(): All checks failed, returning NaN vector.");
		Return (Double.NaN, Double.NaN, Double.NaN);
	}
	
	Private KAI_CoverCheckTracer KAI_FireCoverTrace (Actor Where, Double TraceHeight, Double TraceDist)
	{
		Let Cov = New ('KAI_CoverCheckTracer');
		
		Cov.Shooter = Self;
		If (Self Is "KAI_BaseTurret" && Master) //Ignore our master.
			Cov.Mobjs.Push (Master);
		If (Self Is "KAI_BaseVehicle") //Ignore our turrets.
		{
			KAI_BaseVehicle Cur = KAI_BaseVehicle(Self).Turret;
			KAI_BaseVehicle Prev;
			Int Safety;
			Do
			{
				If (!Cur)
					Break;
				Cov.Mobjs.Push (Cur);
				Prev = Cur;
				Cur = Cur.Turret;
				
				If (Safety++ >= 10000) //Bad news if you got a vehicle with 10000 turrets on it.
					Break;
			}
			While (Cur && Prev != Cur);
		}
		
		Cov.Trace ((Pos.XY,Pos.Z+TraceHeight),CurSector,KAI_Math.AngleToVector3D(AngleTo (Where),-PitchTo(Where,TraceHeight,Where.Height/2)),Radius+TraceDist,0,ignore:Self);
		Return Cov;
	}
}

//Custom tracer for looking for cover, just so that I can make it able to ignore certain actors like turrets that are part of the caller.
//Uses the Mobjs array as a list of things to ignore. And Other as the potential cover object found, if any.
Class KAI_CoverCheckTracer : KAI_LOFRaycast
{
	Bool HitGeo;
	Override ETraceStatus TraceCallback()
	{
		Actor Mobj = Results.HitActor;
		
		//No shooter, sight check failed.
		If (!Shooter)
		{
			BadLOF = True;
			Return Trace_Stop;
		}
		
		//Level geometry in the way, check success.
		If (HitLevelGeometry (Results))
		{
			HitGeo = True;
			Return Trace_Stop;
		}
		
		//Non-ignored actor got in the way, stop and have the cover function see if this actor is good cover.
		If (Results.HitActor && Mobjs.Find(Results.HitActor) == Mobjs.Size())
		{
			Other = Results.HitActor;
			Return Trace_Stop;
		}
		
		//Everything blocking line in the way, check failed.
		If (Results.HitLine && Results.HitLine.Flags & Line.ML_BLOCKEVERYTHING)
		{
			BadLOF = True;
			Return Trace_Stop;
		}
		
		Return Trace_Skip;
	}
}