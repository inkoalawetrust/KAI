/*KLUDGE: Mixins can't be used by different mods, so this class that contains ALL the mixin code in the KAI library is needed. You need to inherit from this
if you want to make something that's not an NPC, but can still use the mixin code the library includes.*/
Class KAI_MixinActor : Actor Abstract
{
	Mixin KAI_UniversalFunctions;
	Mixin KAI_CheckFunctions;
}
Class KAI_Actor : Actor Abstract
{
	Default
	{
		//Properties
		//These are the default player pawns' dimensions, and also my old Smart Marines' dimensions by extension.
		Radius 16;
		Height 56;
		CameraHeight 48; //I think that's about eye level ?
		Mass 100; //Generally, I (inkoalawetrust) interpet ZDooms' mass units as 1 unit being 1 kilogram.
		Speed 8;
		FriendlySeeBlocks 48; //4096 map units, longer than the default of 1280 map units.
		MaxTargetRange 8196; //Maximum range the actor can attack enemies from.
		Obituary "%o managed to be killed by an abstract class, congratulations %o, we are all very proud of you. Or maybe a modder forgot to define a custom obituary.";
		KAI_Actor.InaccuracyFrequency 0.1;
		KAI_Actor.ActorFollowDist 64;
		
		//Flags
		Monster; //Of course.
		+AvoidHazards; //Obviously this is on by default for an intelligent NPC base. However, from what I've seen in the code and playtested, this flag doesn't actually do anything on its' own.
		+SeeFriendlyMonsters; //Hostile KAI NPCs can see friendly monsters by default.
		+FloorClip;
	}
	
	Mixin KAI_CheckFunctions; //Of course all KAI NPCs have access to the library's check functions.
	Actor DebugPoint; //A pointer to the debug point that shows where NextMovePos is when KAI_DebugNextMovePos is enabled.
	
	//=====|Virtual functions|=====\\
	//NOTE: The code on these virtuals is basically just the default. Different base classes will likely add on this base code or replace it entirely.
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay ();
		UserVariableDefaults(); //User variables cannot be handled in BeginPlay().
		KAIHandler = KAI_EventHandler(EventHandler.Find("KAI_EventHandler")); //Store permanent pointer to the mods' event handler.
		//These should be empty.
		NextMovePos = (Double.NaN, Double.NaN, Double.NaN);
		LastEnemyPosition = (Double.NaN, Double.NaN, Double.NaN);
		CurrentEnemyPosition = (Double.NaN,Double.NaN,Double.NaN); 
		If (KAI_DebugNextMovePos) DebugPoint = Spawn ("KAI_DebugPoint",Pos);
		//Initialize inaccuracy.
		NextInaccuracyOffset = (FRandom (Inaccuracy.X,-Inaccuracy.X),FRandom (Inaccuracy.Y,-Inaccuracy.Y),FRandom (Inaccuracy.Z,-Inaccuracy.Z));
	}
	Override Void OnDestroy()
	{
		Super.OnDestroy();
		If (DebugPoint) DebugPoint.Destroy();
		AttackStates.Clear(); //Clean the array before removal, because the GC can't: https://github.com/ZDoom/gzdoom/issues/2019
		ForEach (Group : Groups) //Remove ourselves from any groups we're in.
		{
			If (!Group) Continue;
			/*URGENT: HACK: KAI NPCs for some reason need to fire the ERASED group event on their own, because unlike non-KAI group members, whose membership is
			handled by KAI_DataToken. Library NPC are instead somehow removed BEFORE the group event can be fired on it's on in KAI_EventHandler, so it needs to
			manually be fired here !*/
			Group.HandleGroupEvent(Group.GRPEVNT_ERASED,Self);
			If (KAI_DebugPrintGroupEvents)
				Console.Printf ("KAI_Actor.OnDestroy(), Group %p: Member %p was erased", Group, Self);
			Group.RemoveNPCFromGroup (Self,True);
		}
	}
	
	Override Void Tick()
	{
		OldAngle = Angle;
		Super.Tick();
		If (IsFrozen()) Return;
		
		//Update inaccuracy relative to target over time.
		If (!IsDead(Self) && !KAI_Math.IsZeroVector3(Inaccuracy))
		{
			//Blend between the current and next inaccurate position. Until the current inaccurate position is less than a tenth of the inaccuracy range away from the next wrong pos.
			If (Level.Vec3Diff (InaccuracyOffset,NextInaccuracyOffset).Length() > Inaccuracy.Length()/10)
			{
				InaccuracyOffset.X = KAI_Math.LerpValue (InaccuracyOffset.X,NextInaccuracyOffset.X,InaccuracyFrequency);
				InaccuracyOffset.Y = KAI_Math.LerpValue (InaccuracyOffset.Y,NextInaccuracyOffset.Y,InaccuracyFrequency);
				InaccuracyOffset.Z = KAI_Math.LerpValue (InaccuracyOffset.Z,NextInaccuracyOffset.Z,InaccuracyFrequency);
			}
			//Change to a new desired wrong position.
			Else
				//The actual wrong position the actor aims at. Inaccuracy is just the range relative to the target this differs from.
				NextInaccuracyOffset = (FRandom (Inaccuracy.X,-Inaccuracy.X),FRandom (Inaccuracy.Y,-Inaccuracy.Y),FRandom (Inaccuracy.Z,-Inaccuracy.Z));
		}
		
		//Keeps track of the current targets' position for the target prediction code.
		If (Target && Target.Tics != 0 && Target.Tics == Target.CurState.Tics || Target && Target.Tics == 1 || Target && !IsTeleportingMonster(Target))
		{
			If (KAI_Math.IsEmptyVector3(CurrentEnemyPosition))
				CurrentEnemyPosition = Target.Pos;
			
			LastEnemyPosition = CurrentEnemyPosition;
			CurrentEnemyPosition = Target.Pos;
		}
		Else If (!Target)
			LastEnemyPosition = CurrentEnemyPosition = (Double.NaN,Double.NaN,Double.NaN);
		
		//Update hazard list, removing entries that are by now out of range.
		//TODO: Probably add a flag that disables the updating, so that people can add their own logic, without making an expensive virtual.
		If (bAvoidHazards && !IsDead(Self) && GetAge() % (GameTicRate/2) == 0)
		{
			//In the meantime though, at least until I make such a flag, the NextMovePos will be handled here too.
			If (DebugPoint)
				DebugPoint.SetOrigin (KAI_Math.IsEmptyVector3(NextMovePos) ? Pos : NextMovePos,True);
			For (Int I = Hazards.Size()-1; I >= 0; I--)
			{
				HazardInfo CurHaz = Hazards[I];
				//CurHaz.PrintHazardInfo(); //DEBUG
				//Remove hazards that are out of range, or that are actor-type hazards but have no actual source actor.
				If (!InHazardRange(CurHaz) || CurHaz.Type == HazardInfo.HAZARD_ACTOR && !CurHaz.Origin)
					Hazards.Delete(I);
			}
		}
	}
	
	/*Allows actors to define the defaults for their own user variables. This is better than the //$UserDefaultValue editor key,
	because it allows default user variable values to be set for actors that are spawned in-game as well, not just ones placed in UDB*/
	Virtual Void UserVariableDefaults(){}
	
	//PLAYTEST: I have not actually playtested if the default CanAttack() and ShouldAttack() code works like the native code. Since my own NPCs just override it.
	//Used by the chase functions of each NPC type to check for all the different methods each actor has to attack.
	Virtual Bool CanAttack()
	{
		If ((MissileState || MeleeState) && !IsDead(Self) && !(CurSector && CurSector.Flags & Sector.SECF_NOATTACK)) Return True; //Actors just check if they have an attack state, are alive, and not in a NOATTACK sector by default. More or less stock ZDoom.
		Return False;
	}
	
	//Called in NPCs' chase functions to handle the unique attack decision code of each actor.
	//This is basically a customizable version of the native attack decision code: https://github.com/ZDoom/gzdoom/blob/e3f8230035f08116d1a62c74aaa78b9c0408df6e/src/playsim/p_enemy.cpp#L2574-L2601
	//NOTE: The virtual needs to do the jump to an attack state itself !
	//NoStateJump: If true, then the actor should not call SetStateLabel.
	Virtual Bool ShouldAttack (Bool NoStateJump = False)
	{
		If (HandleNativeFright())
		{
			If (MeleeState && KAI_CheckMeleeRange (Target))
			{
				If (AttackSound)
					S_StartSound (AttackSound, CHAN_WEAPON, 0, 1, ATTN_NORM);
				
				If (!NoStateJump) SetState (MeleeState);
				Return True;
			}
			
			If (MissileState)
			{
				If (IsFast(Self) && MoveCount)
					Return False;
				
				If (!KAI_CheckMissileRange (Target))
					Return False;
				
				If (!NoStateJump) SetState (MissileState);
				Return True;
			}
		}
		Return False;
	}
	
	//Called when the actor calls KAI_Wander(). If it returns false, the rest of KAI_Wander() is aborted.
	Virtual Bool OnWander(){Return True;}
	
	//Return the location that the actors' attack will hit at. This is just whatever the targets' position is by default.
	Virtual Vector3 GetAttackLocation()
	{
		If (Target) Return Target.Pos;
		Return (Double.NaN,Double.NaN,Double.NaN); //This is an actual empty vector. Not one that is (0,0,0), but fully null.
	}
	
	//Returns if the other actor should be considered hostile, can be used to define different criteria for hostility. Like if the other actor is targeting the callers' allies, or a specific actor.
	ClearScope Virtual Bool IsActorHostile (Actor Other)
	{
		Return (Other && IsHostile(Other));
	}
	
	//This is called by NPC groups (If NPCGRP_NOMEMBERALERT is false) when an event that has to do with the group, like a member dying, occurs.
	//Can be used to do things like make NPCs individually react to events, like saying something, becoming more aggressive, etc.
	Virtual Void HandleNPCGroupEvent (Int EventType, Actor Affected, KAI_NPCGroup WhatGroup)
	{
		//NPCs do nothing by default when something happens to the group, but these basic conditions SHOULD be inherited with Super. !
		If (EventType == KAI_NPCGroup.GRPEVNT_NONE || !Affected || IsDead(Self))
			Return;
	}
	
	Bool ThreatHealthCheck (Actor Other, Int Amount)
	{
		Return (Other.SpawnHealth() >= Amount || Other.Health >= Amount);
	}
	//Tries to heuristically determine how dangerous another actor is. This is pretty hard to do universally. Since stuff like attacks can't be checked.
	//Other: The actor to check.
	//CheckPlayers: Should the checks factor in players too ? e.g counting players with god or buddha mode as THREAT_UNSTOPPABLE. Useful for say not having NPCs just run away from cheating players.
	//ForceAssess: Force an assessment of the actor, even if they've got a set threat level.
	//CheckDead: Check the threat level of the other actor even if they're dead.
	Virtual Int AssessThreatLevel (Actor Other, Bool CheckPlayers = True, Bool ForceAssess = False, Bool CheckDead = False)
	{
		If (!Other || !CheckDead && IsDead (Other)) Return THREAT_NONE; //Nonexistent or dead actors aren't a problem.
		
		//It's not even a player or NPC.
		If (IsInanimateObject (Other))
			Return THREAT_NONE;
		
		//KAI NPCs can have specific threat levels set, in which Case, just return whatever the NPCs' threat level is.
		If (!ForceAssess && Other Is "KAI_Actor" && KAI_Actor(Other).ThreatLevel != THREAT_ASSESS)
			Return KAI_Actor(Other).ThreatLevel;
		
		//Alternatively, if this is a non-KAI NPC. But has the KAI data token, and that token has a threat level specified, pass that instead.
		If (!ForceAssess && !(Other Is "KAI_Actor"))
		{
			Inventory Token = Other.FindInventory ("KAI_DataToken");
			If (Token && KAI_DataToken(Token).ThreatLevel != THREAT_ASSESS)
				Return KAI_DataToken(Token).ThreatLevel;
		}
		
		
		//If indestructible. Then the other actor is unstoppable (Obviously)
		If (HasGodMode (Other, !CheckPlayers) || HasBuddha (Other, !CheckPlayers) || IsIndestructible (Other) ||
		//Also unstoppable if, more esoterically, it has NONSHOOTABLE (Hitscans go through), NOBLOCKMAP (Projectiles go through), and NORADIUSDMG (No splash damage)
		//NOTE: If you have any FORCERADIUSDMG attacks, you might want to remove these 3 flag checks. Since your actor can harm an enemy with these properties.
		Other.bNonShootable && Other.bNoBlockmap && Other.bNoRadiusDmg)
			Return THREAT_UNSTOPPABLE;
		
		//If the actor has over 10000 health, or has 2500 or more health and can fly super fast, or can deflect.
		If (ThreatHealthCheck (Other,10000) || ThreatHealthCheck(Other,2500) && ( (IsFlying (Other) && Other.Speed >= 25) || (Other.bReflective && Other.bAimReflect) ))
			Return THREAT_SUPERDANGER;
		
		//If the actor has 2500+ health.
		If (ThreatHealthCheck(Other,2500) ||
		//Or it's enormous (3.4m tall and 4.5m wide or bigger, larger than the Challenger 2 tank, which is huge).
		(Other.Height >= 110 && Other.Radius >= 72))
			Return THREAT_VERYDANGEROUS;
		//Alternatively, if the actor has as much health as a THREAT_DANGEROUS actor, but can reflect projectiles back at enemies, it's also very dangerous.
		Else If (ThreatHealthCheck(Other,1000) && Other.bReflective && Other.bAimReflect)
			Return THREAT_VERYDANGEROUS;
		
		//Players are automatically dangerous. Since they have a brain and are intelligent, unless they are me lmfao.
		If (CheckPlayers && Other.Player && !(Other.Player.GetUsername() ~== "inkoalawetrust"))
			Return THREAT_DANGEROUS;
		
		//If the actor has 1000+ health. Or 500+ health and deflects projectiles, then it's dangerous.
		If (ThreatHealthCheck(Other,1000) || ThreatHealthCheck(Other,500) && Other.bReflective)
			Return THREAT_DANGEROUS;
		
		//If the actor has 500+ health.
		If (ThreatHealthCheck(Other,500) ||
		//Or has 100+ health and flies or is fast.
		ThreatHealthCheck(Other,100) && (IsFlying (Other) || Other.Speed >= 15) ||
		//Or is weak, but flies around fast.
		ThreatHealthCheck(Other,50) && IsFlying (Other) && Other.Speed >= 15)
			Return THREAT_ABOVENORMAL;
		
		//If the actor has 100+ health. Or is very weak, but fast.
		If (ThreatHealthCheck(Other,100) || ThreatHealthCheck(Other,20) && Other.Speed >= 15)
			Return THREAT_NORMAL;
		
		//If the actor has 50+ health (About as much as an Imp or Chaingunner)
		If (ThreatHealthCheck(Other,50))
			Return THREAT_MILD;
		
		//If we are this low down, we are checking for very weak NPCs, so if any of these die on contact, they are automatically barely a threat.
		If (Other.bTouchy)
			Return THREAT_VERYLOW;
		
		//If the actor has 20+ health. AKA is about as strong as a Shotgunner or Zombieman.
		If (ThreatHealthCheck(Other,20))
			Return THREAT_LOW;
		
		//If the actor has 10 health OR LESS. Or it's health is lower than 20 (As specified right above) and it dies on contact with anything, then it's super weak.
		If (ThreatHealthCheck(Other,10))
			Return THREAT_VERYLOW;
		
		Return THREAT_NONE; //If it's none of the above, then it's probably not a problem, probably.
	}
	
	//Handle which actor the NPC should follow, including accounting for NPC orders.
	//This is of course just the default NPC behavior, and can be replaced with your own logic for your chase functions.
	//BasePos: The position the function will fall back to returning if all conditions fail.
	//IgnoreDontFollowPlayers: Used to make the function return a players' pawn pointer and position even if +DONTFOLLOWPLAYERS is on.
	Virtual Vector3, Actor HandleFollowingActor (Vector3 BasePos, Bool IgnoreDontFollowPlayers = False)
	{
		If (CurrentOrder != ORDER_FOLLOW) //Only follow when ORDER_FOLLOW is true, duh.
			Return BasePos, Null;
		
		//By default, NPCs will first check for any group leaders they can follow, then they'll check if they have a master to follow, and finally, a friendplayer.
		If (!bFriendly) //Hostile NPC don't have any friendplayer to begin with, easy peasy.
		{
			Actor GroupLeader;
			If (Groups.Size() && (GroupLeader = GetFirstPlayerNPCGroup(True).Leader) != Self)
				Return GroupLeader.Pos, GroupLeader;
			Vector3 MasterPos = Master ? Master.Pos : (Double.NaN, Double.NaN, Double.NaN);
			Return MasterPos, Master;
		}
		Else
		{
			Bool IgnoringPlayers = (!IgnoreDontFollowPlayers && bDontFollowPlayers);
			//Handle making marines follow group leaders, player-led groups take special precedence, such as the one players create when they order a marine to do something.
			KAI_NPCGroup MainGroup;
			If ((MainGroup = GetFirstPlayerNPCGroup(IgnoringPlayers)) && MainGroup && MainGroup.Leader != Self)
			{
				Vector3 GroupPos = MainGroup.Leader ? MainGroup.Leader.Pos : (Double.NaN, Double.NaN, Double.NaN);
				Return GroupPos, MainGroup.Leader;
			}
			
			If (IgnoringPlayers && Master && !IsDead(Master)) //We are ignoring the player, so just follow whoever the master is, unless it is set to your friendplayer for some reason.
			{
				Return Master.Pos, Master;
			}
			
			Return Players[KAI_GetFriendPlayer()].Mo.Pos, Players[KAI_GetFriendPlayer()].Mo;
		}
		
		Return BasePos, Null;
	}
	
	Virtual Bool OnOrderChange (NPCOrders NewOrder, Bool Increment, Actor Commander, Bool IgnoreAllegiance, Bool FromACS) {Return True;}
	Virtual Void AfterOrderChange (NPCOrders OldOrder, Bool Increment, Actor Commander, Bool IgnoreAllegiance, Bool FromACS){}
	
	//Actor properties and flags.
	Int ThreatLevelThreshold; //If another actors' threat level is at or over this threshold, then the NPC should do some action (Like run away, or be more likely to use stronger attacks).
	Int ThreatLevel; //The NPCs' predetermined threat level. In its basic form it can be used as just a static value. But you could also dynamically change it, e.g based on what attacks your NPC currently has available.
	Property ThreatLevelThreshold : ThreatLevelThreshold;
	Property ThreatLevel : ThreatLevel;
	Vector3 Inaccuracy; //How inaccurate is the target tracking ? This is a vector3 property, which as of 19/8/2023 is exclusive to GZDoom dev builds.
	Property Inaccuracy : Inaccuracy; //TODO: Make this be affected by SHADOW and SHADOWBLOCK actors, and the Shadow penalty factors.
	Double InaccuracyFrequency; //How fast does the inaccuracy property shift ?
	Property InaccuracyFrequency : InaccuracyFrequency;
	
	Private Int NPCFlags;
	FlagDef NoTargetPrediction : NPCFlags, 0; //The NPC will not calculate its' targets' movement and lead its' shots.
	FlagDef MovesWithVelocity : NPCFlags, 1; //Specifies that the NPC moves using real momentum, like players. For the target prediction code, does nothing else on its' own.
	FlagDef IgnoreOrders : NPCFlags, 2; //The NPC ignores orders.
	
	//Actor variables
	Array <State> AttackStates; //Can be used to store all of the attack state labels an actor has. Such as for actors with multiple attacks besides a missile and melee attack, like vanilla monsters only have.
	Vector3 LastEnemyPosition; //Used by the target prediction. If the turret has a target with no velocity, it grabs their last position every tick to compare it to the current position.
	Vector3 CurrentEnemyPosition;
	Vector3 NextMovePos; //The next position the NPC should move to. Used by KAI_MoveAway() and KAI_Wander().
	Int NewPosStepCount; //How many steps the actor has taken before NextMovePos is reset, so the actor will get a new point to move to. Like if it gets stuck.
	KAI_EventHandler KAIHandler; //A permanent pointer to the libraries' event handler, for regular accesses to info like the projectile list.
	Double OldAngle; //The angle the NPC was at last tick.
	Array <HazardInfo> Hazards; //The hazards the NPC is currently keeping track of.
	Array <KAI_NPCGroup> Groups; //A list of all the groups the actor is part of. Behavior like what group leader to follow is up to the NPC. //URGENT: NOTE: I might change this so NPCs can only be part of one group.
	
	//Keep in mind that the threat level descriptions are mostly based on the stock AssessThreatLevel() code.
	Enum ThreatLevels
	{
		THREAT_ASSESS		= 0, //No threat level specified, this is the default, and means that the threat level is to be determined by the AssessThreatLevel() virtual.
		THREAT_NONE			= 1, //The actor is harmless. e.g a prop or a defenseless enemy
		
		THREAT_VERYLOW		= 2, //The actor poses minimal threat. e.g a mosquito enemy or something
		THREAT_LOW			= 3, //The actor poses little threat. e.g a Zombieman or Shotgunner
		THREAT_MILD			= 4, //The actor is somewhat dangerous. e.g a Chaingunner
		THREAT_NORMAL		= 5, //The actor is an average threat. e.g a Pinky, or Imp
		THREAT_ABOVENORMAL	= 6, //The actor is an above average threat. e.g a Hell Knight, Cacodemon, or Revenant
		THREAT_DANGEROUS	= 7, //The actor is dangerous. e.g a Baron of Hell, Arachnotron or Mancubus
		THREAT_VERYDANGEROUS= 8, //The actor is a major threat. e.g bosses like Cyberdemons and Spider Masterminds
		THREAT_SUPERDANGER	= 9, //The actor is a GIGANTIC THREAT. Like, literally as strong as 5-6 Cyberdemons or more.
		
		THREAT_UNSTOPPABLE	= 666, //The actor is straight up unstoppable, like an NPC with NODAMAGE, or player with ultimate god mode, should probably run away.
	}
	
	//Order and following system
	Double FollowDist; //If the actor followed is within this range + their radius. Mostly useful to have a distance to check in which the NPC avoids dogpiling whoever they follow.
	Property ActorFollowDist : FollowDist;
	Int CurrentOrder; //What order is the NPC currently following ?
	Enum NPCOrders
	{
		ORDER_NONE = 0, //Null
		ORDER_FOLLOW = 1, //Follow the player when having no target. This one is handled automatically.
		ORDER_STAY = 2, //Stay in place until a target appears or you are ordered to start moving again. Then stand around again once the chase timer is out. Must be handled on its' own, likely in OnWander()
		ORDER_WANDER = 3, //Wander around when having no target, instead of following the player. Has to be handled on its' own.
		//Idea: ORDER_GOTOPOINT ?
		
		ALLORDERS, //Used to get how many orders there are to loop around.
	};
	
	//Constants
	//Const NullVector = (Double.NaN,Double.NaN,Double.NaN);
}

Class KAI_DebugPoint : Actor
{
	Override Void PostBeginPlay(){}
	Override Void Tick(){}
	States
	{
		Spawn:
			PLSS A -1;
			Stop;
	}
}

Class KAI_EventHandler : EventHandler
{
	//Custom command handling
	Override Void NetworkProcess (ConsoleEvent E)
	{
		If (E.Player < 0 || !PlayerInGame[E.Player] || !Players[E.Player].Mo)
			Return;
		
		Let PlrMo = Players[E.Player].Mo;
		
		Array <String> Command;
		Command.Push (E.Name);
		
		If (Command[0] ~== "KAI_GetTargetGroup") //Find the groups the actor in front of the player is in, if any, and print their info.
		{
			FLineTraceData MoFind;
			Double PlrHeight = PlrMo.Height * 0.5 - PlrMo.Floorclip + PlrMo.AttackZOffset*Players[E.Player].CrouchFactor;
			PlrMo.LineTrace (PlrMo.Angle,PLAYERMISSILERANGE,PlrMo.Pitch,TRF_THRUHITSCAN|TRF_SOLIDACTORS,PlrHeight,data:MoFind);
			If (MoFind.HitActor)
			{
				Array <KAI_NPCGroup> GroupList;
				
				KAI_NPCGroup.FindGroupsImIn (MoFind.HitActor,GroupList);
				
				Console.Printf ("\c[Green]KAI_GetTargetGroup: Printing info of all the groups %p is in",MoFind.HitActor);
				Int GroupNum = -1;
				ForEach (CurGroup : GroupList)
				{
					If (!CurGroup) Continue;
					GroupNum++;
					Console.Printf ("\c[Green]KAI_GetTargetGroup: Printing info for group %d",GroupNum);
					CurGroup.PrintGroupInfo(False,"Blue");
				}
				If (GroupNum == -1)
					Console.Printf ("\c[Green]KAI_GetTargetGroup: %p is in no NPC groups",MoFind.HitActor);
			}
		}
		Else If (Command[0] ~== "KAI_GetTargetHazards")
		{
			FLineTraceData MoFind;
			Double PlrHeight = PlrMo.Height * 0.5 - PlrMo.Floorclip + PlrMo.AttackZOffset*Players[E.Player].CrouchFactor;
			PlrMo.LineTrace (PlrMo.Angle,PLAYERMISSILERANGE,PlrMo.Pitch,TRF_THRUHITSCAN|TRF_SOLIDACTORS,PlrHeight,data:MoFind);
			If (MoFind.HitActor)	
			{
				Console.Printf ("\c[Green]KAI_GetTargetGroup: Printing info of all the hazards %p (%s) is in range of:",MoFind.HitActor,MoFind.HitActor.GetClassName());
				Int HazardCount;
				
				//Found KAI actor to print the hazards of
				If (MoFind.HitActor Is "KAI_Actor")
				{
					ForEach (Hazard : KAI_Actor(MoFind.HitActor).Hazards)
					{
						Hazard.PrintHazardInfo();
						HazardCount++;
					}
				}
				//Or we found a KAI_DataToken that is marked as being able to listen in on hazards for us to print out.
				Else If (MoFind.HitActor.FindInventory ("KAI_DataToken") && MoFind.HitActor.FindInventory ("KAI_DataToken").bAvoidHazards)
				{
					Console.Printf ("\c[Green]KAI_GetTargetGroup: %s isn't a KAI_Actor, but has a KAI_DataToken",MoFind.HitActor.GetClassName());
					KAI_DataToken Token = KAI_DataToken(MoFind.HitActor.FindInventory ("KAI_DataToken"));
					ForEach (Hazard : Token.Hazards)
					{
						Hazard.PrintHazardInfo();
						HazardCount++;
					}
				}
				Else
				{
					Console.Printf ("\c[Red]KAI_GetTargetGroup: %s isn't even a KAI_Actor or KAI_DataToken, it's a %s",MoFind.HitActor.GetClassName(),MoFind.HitActor.GetParentClass().GetClassName());
					Return;
				}
				
				If (HazardCount)
					Console.Printf ("\c[Green]KAI_GetTargetGroup: The actor has %d hazards.",HazardCount);
				Else
					Console.Printf ("\c[Red]KAI_GetTargetGroup: The actor has no hazards!");
			}
		}
	}
	
	//Actor lists
	Array <Actor> ProjectileList; //Much faster alternative to just using a ThinkerIterator.
	Array <KAI_BaseVehicle> AllVehicles; //Stores references to the usually few vehicles found in maps.
	
	Override Void WorldThingSpawned(WorldEvent E)
	{
		//Add every spawned projectile to a big list. Except ones that do no damage.
		AddToProjectileList (E.Thing);
		If (E.Thing Is "KAI_BaseVehicle")
			AllVehicles.Push (KAI_BaseVehicle(E.Thing));
	}
	
	Override Void WorldThingDied (WorldEvent E)
	{
		RemoveFromProjectileList (E.Thing); //Delete any destroyed projectiles from the list.
		NPCGroupEventHandler (KAI_NPCGroup.GRPEVNT_DEATH,E.Thing);
	}
	
	Override Void WorldThingDestroyed (WorldEvent E)
	{
		RemoveFromProjectileList (E.Thing); //Delete any removed projectiles from the list.
		RemoveFromVehicleList (KAI_BaseVehicle(E.Thing));
		NPCGroupEventHandler (KAI_NPCGroup.GRPEVNT_ERASED,E.Thing);
	}
	
	Override Void WorldThingRevived (WorldEvent E)
	{
		NPCGroupEventHandler (KAI_NPCGroup.GRPEVNT_REVIVAL,E.Thing);
	}
	
	Void AddToProjectileList (Actor What)
	{
		If (What && What.bMissile && What.GetMissileDamage (1,7) > 0)
			ProjectileList.Push(What);
	}
	
	Void RemoveFromProjectileList (Actor What)
	{
		If (!What.bMissile) Return;
		Let Proj = ProjectileList.Find(What);
		If (Proj < ProjectileList.Size())
			ProjectileList.Delete(Proj);
	}
	
	Void RemoveFromVehicleList (KAI_BaseVehicle Who)
	{
		Let Veh = AllVehicles.Find(Who);
		If (Veh < AllVehicles.Size())
			AllVehicles.Delete(Veh);
	}
	
	//================================================
	//NPC Group system handling.
	Int GroupJanitorTimer;
	
	Map <Int, KAI_NPCGroup> NPCGroups; //Stores all the NPC groups available.
	Override Void WorldTick ()
	{
		//Clean up map keys that don't lead to a pointer to a group.
		If (!GroupJanitorTimer--)
		{
			Array<Int> DirtyKeys;
			ForEach (K, V : NPCGroups)
			{
				//Console.printf ("Iterated through key %d, value %p",K,V);
				//If (KAI_DebugPrintMessages) NPCGroups.Get(K).PrintGroupInfo(); //DEBUG
				//This group has no members in it, remove it.
				If (!NPCGroups.Get(K).Members.Size())
				{
					NPCGroups.Get(K).QuickDestruction = True; //You're getting removed from the map automatically, no need to try removing yourself.
					DirtyKeys.Push(K);
				}
			}
			
			ForEach (K : DirtyKeys)
			{
				If (K)
				{
					If (KAI_DebugPrintMessages) Console.Printf ("NPC group janitor: Removed group with no members");
					Let EmptyGroup = NPCGroups.GetIfExists(K);
					If (EmptyGroup) EmptyGroup.Destroy(); //Destroy empty group.
					NPCGroups.Remove(K);
				}
			}
			GroupJanitorTimer = Random (GameTicRate,GameTicRate*3); //Run this every 1-3 seconds.
		}
	}
	
	//Add an NPC group to NPCGroups. THIS ASSUMES IT'S NOT IN ALREADY !
	Bool AddNPCGroup (KAI_NPCGroup Group) Const
	{
		If (!Group)
			Return False;
		
		Int ID;
		Bool Used;
		For (Int I = 32; I >= 0; I--) //Find an unused random key to to put the group in.
		{
			ID = Random (INT.MIN+1,INT.MAX-1);
			
			Used = NPCGroups.CheckKey(ID); //Random key already in use, try finding another one.
			
			If (!Used) //Found unused key, terminate.
				Break;
		}
		If (Used) //The code tried 32 times to find an unused key and failed, either RNGesus was extraordinarily punishing or there's somehow over 1 billion groups.
			Return False;
		
		NPCGroups.Insert (ID,Group);
		Return True;
	}
	
	//Find a specific NPC group by its' ID, if you need that for some reason, instead of iterating all groups.
	KAI_NPCGroup FindNPCGroupByID (Int ID)
	{
		Return NPCGroups.GetIfExists(ID);
	}
	
	//Find NPC group(s) by name. Since group names are not unique, you need an array in case multiple groups have the same name.
	Bool FindNPCGroupsByName (String GroupName, Bool CaseSensitive, Array<KAI_NPCGroup> &Groups)
	{
		If (!Groups) Return False;
		
		ForEach (K, V : NPCGroups)
		{
			Let Group = NPCGroups.CheckValue(K);
			//Found an identically named group, pass it to the return array.
			If (CaseSensitive && GroupName == Group.GroupName || !CaseSensitive && GroupName ~== Group.GroupName)
				Groups.Push (Group);
		}
		
		Return Groups.Size();
	}
	
	//Handle the occurance of an event involving an NPC group and its' individual members.
	Void NPCGroupEventHandler (Int EventType, Actor Affected)
	{
		If (EventType == KAI_NPCGroup.GRPEVNT_NONE || !Affected)
			Return;
		
		//HACK: KAI NPCs for some reason remove themselves from their groups BEFORE this function calls the ERASED event. So they also handle this event themselves.
		If (EventType == KAI_NPCGroup.GRPEVNT_ERASED && Affected Is "KAI_Actor")
			Return;
		
		Array <KAI_NPCGroup> AffectedGroups;
		
		KAI_NPCGroup.FindGroupsImIn (Affected,AffectedGroups);
		
		ForEach (CurGroup : AffectedGroups)
		{
			If (!CurGroup) Continue;
			CurGroup.HandleGroupEvent (EventType, Affected);
			If (EventType == CurGroup.GRPEVNT_DEATH)
			{
				If (CurGroup.AreWeAllDead()) //Update whether all group members died.
					CurGroup.ChangeNPCGroupFlags (CurGroup.NPCGRP_EVERYONEDIED,0);
				Else
					CurGroup.ChangeNPCGroupFlags (0,CurGroup.NPCGRP_EVERYONEDIED);
			}
			If (KAI_DebugPrintGroupEvents) //Print debug info on events caught by the built-in event handlers.
			{
				If (EventType == KAI_NPCGroup.GRPEVNT_DEATH)
					Console.Printf ("HandleGroupEvent(), Group %p(%s): Member %p(%s) died", CurGroup, CurGroup.GetClassName(), Affected, Affected.GetClassName());
				Else If (EventType == KAI_NPCGroup.GRPEVNT_ERASED)
					Console.Printf ("HandleGroupEvent(), Group %p(%s): Member %p(%s) was removed", CurGroup, CurGroup.GetClassName(), Affected, Affected.GetClassName());
				Else If (EventType == KAI_NPCGroup.GRPEVNT_REVIVAL)
					Console.Printf ("HandleGroupEvent(), Group %p(%s): Member %p(%s) was resurrected", CurGroup, CurGroup.GetClassName(), Affected, Affected.GetClassName());
			}
		}
	}
}

//DOCUMENT: Write instructions on using this to add support for KAI NPCs without making the library needed for the non-KAI mod to run.
//This inventory token is a surrogate to allow non-KAI NPCs and mods to use certain types of KAI info. Such as threat levels.
//This token is useful for tasks like:
//Adding optional KAI support to your mod without turning your actors into KAI NPCs. And also without needing to make a compatibility patch, or getting startup errors without the library loaded.
/*Making something like an event handler addon that gives specific NPCs tokens with hardcoded threat levels. Like for example giving all Pain Elementals this token,
to specify that Elementals are THREAT_DANGEROUS instead of THREAT_ABOVENORMAL, due to their constant spamming of tanky Lost Souls.*/
Class KAI_DataToken : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
		+Inventory.Quiet;
		+Inventory.Undroppable;
		+Inventory.Unclearable;
		+Inventory.Untossable;
		+Inventory.HubPower;
		+Inventory.NoScreenFlash;
		//+AvoidHazards; //Token listens in on and takes hazards if this flag is on.
	}
	
	Actor ErasedOwner; //A pointer to the owner before they were erased.
	
	//HACK: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	//Check if the  ̶N̶P̶C̶ TOKEN OWNER is in range of the specified hazard. Either the origin actor, position, or sector.
	Bool InHazardRange (HazardInfo Hazard)
	{
		//No hazard.
		If (!Hazard)
			Return False;
		
		//No range specified for point hazard, or there's no valid position, or a sector hazard is not on any sector.
		If (!(Hazard.Flags & HazardInfo.HAZ_SECTOR) && Hazard.Range <= 0 || !Hazard.Origin && Hazard.Position != Hazard.Position)
			Return False;
		
		Sector PointSec = Level.PointInSector (Hazard.Position.XY);
		
		//Sector hazard not actually on a sector.
		If (Hazard.Flags & HazardInfo.HAZ_SECTOR && !PointSec)
			Return False;
		
		If (Hazard.Flags & HazardInfo.HAZ_SECTOR && CurSector == PointSec)
			 Return True;
		
		If (Hazard.Origin && Distance3DSquared (Hazard.Origin) < Hazard.Range*Hazard.Range || Level.Vec3Diff (Hazard.Position,Owner.Pos).Length() < Hazard.Range) //In range.
			Return True;
		
		Return False;
	}
	
	//The token is getting ditched by the owner, either because they are removing it for some reason, or because the owner was erased.
	Override Void DoEffect()
	{
		Super.DoEffect();

		If (Owner)
			ErasedOwner = Owner;
		
		//Update hazard list, removing entries that are by now out of range.
		If (bAvoidHazards && Owner && GetAge() % (GameTicRate/2) == 0)
		{
			For (Int I = Hazards.Size()-1; I >= 0; I--)
			{
				HazardInfo CurHaz = Hazards[I];
				//Remove hazards that are out of range, or that are actor-type hazards but have no actual source actor.
				If (!InHazardRange(CurHaz) || CurHaz.Type == HazardInfo.HAZARD_ACTOR && !CurHaz.Origin)
					Hazards.Delete(I);
			}
		}
	}
	Override Void OnDestroy()
	{
		If (ErasedOwner)
		{
			ForEach (Group : Groups) //Remove the tokens' owner from any groups they may be in. To handle non-KAI NPCs being erased while in a group.
			{
				If (Group) Group.RemoveNPCFromGroup (ErasedOwner,True);
			}
		}
	}
	
	Int ThreatLevel; //The threat level of the tokens' owner.
	Bool VelocityMonster;	//This actor moves with actual momentum instead of using TryMove() like normal monsters do.
							//Non-KAI actors that genuinely move need to mark themselves with this to be detected
							//as moving with momentum by the target prediction code.
	Array <KAI_NPCGroup> Groups; //The groups this non-KAI NPC is in.
	Array <HazardInfo> Hazards; //The hazards that are in range of the tokens' owner.
}

//DEBUG: Assesses the threat level of an actor in front of it, to see if the system works as intended.
//TODO: Replace this with a KAI_GetThreatLevel netevent command. That also has a parameter for passing what classes' AssessThreatLevel() to use.
Class ThreatAssess : KAI_Actor
{
	Default {+NoTarget;}
	States
	{
		Spawn:
			TNT1 A 1 A_LookEx(fov:360);
			loop;
		See:
			TNT1 A 1
			{
				String Text;
				Switch (AssessThreatLevel (Target))
				{
					Case THREAT_SUPERDANGER:
						Text = "THREAT_SUPERDANGER";
						Break;
					Case THREAT_VERYDANGEROUS:
						Text = "THREAT_VERYDANGEROUS";
						Break;
					Case THREAT_DANGEROUS:
						Text = "THREAT_DANGEROUS";
						Break;
					Case THREAT_ABOVENORMAL:
						Text = "THREAT_ABOVENORMAL";
						Break;
					Case THREAT_NORMAL:
						Text = "THREAT_NORMAL";
						Break;
					Case THREAT_MILD:
						Text = "THREAT_MILD";
						Break;
					Case THREAT_LOW:
						Text = "THREAT_LOW";
						Break;
					Case THREAT_VERYLOW:
						Text = "THREAT_VERYLOW";
						Break;
					Case THREAT_UNSTOPPABLE:
						Text = "THREAT_UNSTOPPABLE";
						Break;
					Case THREAT_NONE:
						Text = "THREAT_NONE";
						Break;
					Default:
						Text = "Oops";
						Break;
				}
				Console.Printf ("%s threat level:%s",Target.GetClassName(),Text);
			}
			Stop;
	}
}