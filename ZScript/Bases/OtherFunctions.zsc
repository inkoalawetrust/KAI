//$GZDB_SKIP
//Non AI related functions 
Extend Class KAI_Actor
{
	//Allows NPCs to lead their shots based on their targets' movement, regardless of whether or not it's a player or monster. Unlike VelIntercept().
	//This is called after the projectile has been spawned, to modify its' trajectory post-spawn. Code is also run in the NPCs' tick for target position updates.
	//Projectile: The projectile to modify.
	//SpreadHorz/SpreadVert: Maximum and minimum horizontal and vertical spread, stored in Vector2s.
	//MinDist: The minimum distance below which target prediction won't be used. And the projectile will be fired straight at the target instead.
	//FOV: The field of view that the target must be in for the function to run. Useful for preventing monsters from doing things like shooting behind themselves.
	Void VelInterceptEx (Actor Projectile, Vector2 SpreadHorz = (0,0), Vector2 SpreadVert = (0,0), Double MinDist = 1024, Double FOV = 90/2)
	{
		Vector3 OldVel;
		If (!Projectile || !Target) Return;
		
		//No movement prediction, other actor is too far, or out of the FOV, so just shoot normally and move on.
		If (bNoTargetPrediction || (Target && !CheckFOV(Target,FOV) )|| Distance3DSquared(Target) <= MinDist*MinDist)
		{
			AddProjectileSpread (Projectile,SpreadHorz,SpreadVert);
			Return;
		}
		
		//Target has no velocity for VelIntercept to work with. This is almost always the case for normal NPCs, which move using small teleport steps, instead of actual movement.
		If (IsTeleportingMonster (Target))
		{
			OldVel = Target.Vel;
			
			Vector3 Diff = Level.Vec3Diff (LastEnemyPosition,Target.Pos);
			Vector3 TPOnly = Level.Vec3Diff (Diff,Target.Vel); //Get the teleport movement, sans velocity.
			TPOnly = GetTeleportMoveDivision();
			console.printf ("tponly is %.3f %.3f %.3f",tponly.x,tponly.y,tponly.z);
			Vector3 FakeVel = Level.Vec3Offset (TPOnly,Target.Vel);
			console.printf ("fakevel is %.3f %.3f %.3f",fakevel.xy,fakevel.z);
			Target.Vel = FakeVel;
			Projectile.VelIntercept (Target);
			AddProjectileSpread (Projectile,SpreadHorz,SpreadVert);
			Target.Vel = OldVel;
		}
		//Target has velocity, like if it's a player or a custom actor with velocity-based movement.
		Else
		{
			Projectile.VelIntercept (Target);
			AddProjectileSpread (Projectile,SpreadHorz,SpreadVert);
		}
	}
	
	//Divide teleport based monster movement by the duration of the monsters' movement state.
	Vector3 GetTeleportMoveDivision()
	{
		If (Target.CurState.Tics)
			Return Level.Vec3Diff (LastEnemyPosition,CurrentEnemyPosition) / Target.CurState.Tics;
		Else //Fallback to prevent division by zero.
			Return Level.Vec3Diff (LastEnemyPosition,CurrentEnemyPosition);
	}
	
	//Adds projectile spread and adjusts the projectiles' velocity accordingly.
	Void AddProjectileSpread (Actor Projectile, Vector2 SpreadHorz, Vector2 SpreadVert)
	{
		Projectile.A_FaceMovementDirection();
		Projectile.Angle += FRandom (SpreadHorz.X,SpreadHorz.Y);
		Projectile.Pitch += FRandom (SpreadVert.X,SpreadVert.Y);
		Projectile.Vel3DFromAngle (Projectile.Speed,Projectile.Angle,Projectile.Pitch);
	}
	
	//Used to check if the specified position with the specified hitbox size is valid.
	Bool ValidPositionAt (Vector2 Offset = (0,0), Double TempRadius = 32, Double TempHeight = 56)
	{
		//Store the previous position and dimensions of the vehicle.
		Vector3 PrevPos = Pos;
		Double PrevRadius = Radius;
		Double PrevHeight = Height;
		
		A_SetSize (TempRadius,TempHeight);
		SetXYZ (KAI_Math.Vec3OffsetRelative (Self,(Offset,Pos.Z),flags:KAI_Math.V3R_ANGLEONLY));
		
		Bool Ok = CheckPosition (Pos.XY);
		
		A_SetSize (PrevRadius,PrevHeight);
		SetXYZ (PrevPos);
		
		Return Ok;
	}
	
	//CREDIT: Written by Lewisk3.
	//Mathemagically gets the nearest sprite angle (https://zdoom.org/wiki/Sprite#Angles) based on the actors' current angle.
	Double GetNearestCardinalAngle (Bool SixteenAngles = False)
	{
		Double NAngle = Normalize180(Angle) + 180;
		Double Parts = 360 / (SixteenAngles ? 16.0 : 8.0);
		Return (Round(NAngle / Parts) * Parts);
	}
	
	//Gets the angle to the other actor, and also has a limit that can be used to get the angle to the other actor up to a certain point.
	//Basically this is what A_Face()'s max_turn property does, sans the actual angle change on the caller.
	Double GetAngleTo (Actor Other, Double AngleLimit = 10)
	{
		If (!Other) Return 0;
		If (AngleLimit == 0) Return AngleTo (Other);
		Double AngleTo = AngleTo (Other);
		Double Delta = -DeltaAngle (Angle,AngleTo);
		
		If (AngleLimit != 0)
		{
			If (Delta > 0)
				Return Angle - AngleLimit;
			Else
				Return Angle + AngleLimit;
		}
		
		Return 0;
	}
	
	//Same as GetAngleTo, but directly uses a vector.
	//BUG: This seems to cause a bug in KAI_MoveTowards, where actors will either have a NextAngle of -AngleLimit. Or just never actually face the target.
	Double GetAngleToPos (Vector3 Position, Double AngleLimit = 10)
	{
		Vector3 SCoords = Level.SphericalCoords (Pos,Position);
		If (AngleLimit == 0) Return -SCoords.X;
		Double AngleTo = -SCoords.X;
		Double Delta = -DeltaAngle (Angle,AngleTo);
		
		If(Abs(Delta) <= AngleLimit)
			Return AngleTo;
		If (AngleLimit != 0)
		{
			If (Delta > 0)
				Return Angle - AngleLimit;
			Else
				Return Angle + AngleLimit;
		}
		
		Return 0;
	}
	
	//Gets the sprite angle relative to the specified camera position, which is usually the consoleplayers' view.
	//This is more or less a rip of this: https://github.com/ZDoom/gzdoom/blob/62f37079a7834b813f251818d1db6c80e644d209/src/rendering/hwrenderer/scene/hw_sprites.cpp#L860-L888
	//It returns the sprite angle that should be shown. AKA the value it returns internally. And also returns an actual 360 angle, which is more useful.
	Int, Double GetSpriteAngleFromPos (Vector3 CamPos, Bool SixteenAngles)
	{
		Vector3 Coords = Level.SphericalCoords (Pos,CamPos);
		Double Ang = -Coords.X;
		
		Double SprAng = KAI_GetSpriteAngle (Self,Ang,System.GetTimeFrac());
		Double Result;
		If (!SixteenAngles)
		{
			//PLAYTEST: The code for SpriteAngle is untested.
			If (bSpriteAngle)
				Result = BAM (SpriteAngle + 45.0 / 2 * 9) >> 28;
			Else
				Result = BAM (SprAng - (Angle + SpriteRotation) + 45.0 / 2 * 9) >> 28;
		}
		Else
		{
			If (bSpriteAngle)
				Result = BAM (SpriteAngle + 45.0 / 2 * 9 - 180.0 / 16) >> 28;
			Else
				Result = BAM (SprAng - (Angle + SpriteRotation) + 45.0 / 2 * 9 - 180.0 / 16) >> 28;
		}
		Return Int(Result), Result * (!SixteenAngles ? 45.0 : 22.5);
	}
	
	//Finds the closest actor in an array of actors.
	//ActorList: The array of actors to find the closest one from. Usually scrubbed from a blockmap iterator.
	//Pos: The position from which the distance check is performed on each actor.
	//MaxRange: If this is not 0, any actors in the list further than this distance are automatically eliminated.
	Actor GetClosestActor (Out Array <Actor> ActorList, Vector3 Pos, Double MaxRange = 0)
	{
		If (!ActorList) Return Null;
		Array <Actor> TempList;
		TempList.Move (ActorList);
		Double NearestDistance = INT.MAX;
		
		Actor ClosestActor;
		For (Int I = TempList.Size()-1; I >= 0; I--)
		{
			Double CurrentDistance = Level.Vec3Diff(Pos,TempList[I].Pos).LengthSquared();
			If (NearestDistance > CurrentDistance && CurrentDistance <= MaxRange*MaxRange)
			{
				NearestDistance = CurrentDistance;
				ClosestActor = TempList[I];
			}
		}
		
		Return ClosestActor;
	}
	
	//Finds the furthest actor from an array of actors.
	//ActorList: The array of actors to find the closest one from. Usually scrubbed from a blockmap iterator.
	//Pos: The position from which the distance check is performed on each actor.
	//MinDist: If this is not 0, any actors in the list closer than this distance are automatically eliminated.
	Actor GetFurthestActor (Out Array <Actor> ActorList, Vector3 Pos, Double MinDist = 0)
	{
		If (!ActorList) Return Null;
		Array <Actor> TempList;
		TempList.Move (ActorList);
		Double FurthestDistance;
		
		Actor FurthestActor;
		For (Int I = TempList.Size()-1; I >= 0; I--)
		{
			Double CurrentDistance = Level.Vec3Diff(Pos,TempList[I].Pos).LengthSquared();
			If (FurthestDistance < CurrentDistance && CurrentDistance > MinDist*MinDist)
			{
				FurthestDistance = CurrentDistance;
				FurthestActor = TempList[I];
			}
		}
		
		Return FurthestActor;
	}
}