/*NOTE: The order system from the MVP and Smart Marines is not implemented to the KAI, at least for now. As I want to get it to hopefully be more stable.
However, the CurrentOrder variable, bNoRadio flag, and VehicleCommands enum is still included in the KAI.
If I do implement the order system to KAI actors, it will probably be before the marine rewrite. So I'll have to rewrite the vehicle chase function.*/

//PLAYTEST:
//Check how vehicle turret collision is handled, like, if a vehicle drives under a pipe and the turret is blocked, does it just clip through ?

//TODO:
//Add a headlightsound property, that plays a sound when the vehicles' headlights turn on or off.

//FIXME:
/*Try and fix the vehicle turrets to be at the top of their vehicle even at the first tick of their existance.
The first fix I tried was immediately warping the turret to its vehicle. Which somehow turns the turrets into the vehicle they are attached on in the
first tick. Which is literally worse than the turrets spawning on the ground.*/

Class KAI_BaseVehicle : KAI_Actor Abstract
{
	Default
	{
		
		Radius 40;
		Height 54;
		DeathHeight 54;
		CameraHeight 48;
		Mass 4500;
		Speed 8;
		FastSpeed 16;
		FriendlySeeBlocks 48; // 6144 map units, longer than the GZDoom default of 1280 map units, and longer than the KAI_Actor default of 4096 map units.
		MaxStepHeight 32;
		MaxTargetRange 10000;
		KAI_BaseVehicle.MaxCorpseRadius 64;
		KAI_BaseVehicle.MaxCorpseHeight 48;
		KAI_BaseVehicle.HeadlightLevel 104;
		KAI_BaseVehicle.RetreatRange 768;
		Tag "Vehicle Base (You really shouldn't be seeing this in-game)";
		
		//Flags
		+NoForwardFall; //Doesn't make sense for a tank or some shit to slide forward after dying.
		//+AvoidMelee;
		+Telestomp;
		+NoInfightSpecies;
		+DontMorph; //This is just here because ZDoom's morphing code is a mess internally, and having any of the vehicles morph would definitely break something.
		+DontDrain; //How would you suck the life out of an inanimate object ?
		+DontCorpse; //Keeps the vehicles' normal collision even after they are destroyed.
		+NoBlood; //https://www.youtube.com/watch?v=K63AVSCPcSI
		+NoPain;
		+AddLightLevel; //Used for the headlight system.
		-CanUseWalls; //Vehicles shouldn't be able to use walls, well, not the large ones anyway.
	}
	
	//Handles spawning each vehicles' turret, if they have any.
	Virtual Void SpawnVehicleTurret ()
	{
		If (VehicleTurret)
			SpawnTurret (VehicleTurret);
	}
	
	//Used to neatly order the spawning of headlights in vehicle definitions. You could just as easily do the spawning in PostBeginPlay()
	Virtual Void SpawnHeadlights(){}
	
	Override Bool CanAttack()
	{
		Return False; //Vehicles have no attacks by default, of course.
	}
	
	Override Bool ShouldAttack (Bool NoStateJump)
	{
		Return False; //So they also don't decide to attack.
	}
	
	//Return the location that the vehicles' attack will hit at.
	Override Vector3 GetAttackLocation() {Return (Double.NaN,Double.NaN,Double.NaN);} //Vehicles have no attacks by default. So not attack location is returned.
	
	//Should the vehicle stay still and attack ? The base actor class simply houses the most basic conditional check for this.
	//CheckSightFrom is the actor whose sight to their target is checked, to determine if the vehicle can shoot.
	Virtual Bool StayStillAndShoot (Actor CheckSightFrom)
	{
		If (StayStillDelay) Return False; //Too soon
		If (Turret && Turret.bDontStayAround) Return False; //Turret told you to not stop.
		If (Turret && Turret.ElevationState != Turret.ELEVATION_INBOUNDS) Return False; //The turrets' target is too high up or low down to shoot.
		If (IsPatrolling (Self) && bChaseGoal) Return False; //Don't stop if patrolling and "Don't Chase Goal" is on.
		
		Double Distance = (RetreatRange > 0) ? RetreatRange : 512; //Fall back to a distance of 512 MU if the vehicle is set to not retreat.
		//Check if you are far enough from your nearest enemy or target.
		Actor Whomstve = (NearestEnemy ? NearestEnemy : Target);
		If ((Whomstve && Distance3DSquared (Whomstve) >= (Distance*Distance)*1.2))
		{
			If (CheckSightFrom && CheckSightFrom.Target && CheckSightFrom.CheckSight (CheckSightFrom.Target))
				Return True;
		}
		Return False;
	}
	
	//Called when the vehicles' turret is killed. Returns the turret that was killed as well, which should logically just be the vehicles' Turret pointer.
	Virtual Void OnTurretDeath (Actor DeadTurret, Bool Removed = False){}
	
	Override Void BeginPlay()
	{
		Super.BeginPlay();
		
		If (GetClassName() == "KAI_BaseVehicle" || GetClassName() == "KAI_BaseTurret" || GetClassName() == "KAI_BaseProp" || GetClassName() == "KAI_BaseTurretProp")
		{
			Console.Printf ("How the fuck did you spawn this in ?");
			Destroy();
		}
	}
	
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		RetreatState = FindState ("Retreat",True);
		SpawnVehicleTurret();
		SpawnHeadlights();
	}
	
	Override Void Tick()
	{
		Super.Tick();
		
		If (IsFrozen()) Return;
		
		If (StayStillDelay)
			StayStillDelay--;
		
		If (!bNoHeadlights)
			HeadLightsOn = (CurSector && CurSector.LightLevel <= HeadLightLevel);
		
		If (HeadLightsOn)
			TurnHeadlightsOn();
		Else
			TurnHeadlightsOff();
	}
	
	Override Bool CanCollideWith (Actor Other, Bool Passive)
	{
		//Stops the turret from preventing vehicles from going up slopes and steps due to the turret getting in the way.
		If (!Passive && Other && Other == Turret && ((KAI_BaseTurret(Turret).bFallOnDeath && !IsDead (Turret)) || !KAI_BaseTurret(Turret).bFallOnDeath))
			Return False;
		
		Return Super.CanCollideWith (Other, Passive);
	}
	
	Override Void Die (Actor Source, Actor Inflictor, Int DmgFlags, Name MeansOfDeath)
	{
		Super.Die (Source, Inflictor, DmgFlags, MeansOfDeath);
		If (Turret && !IsDead(Turret)) //When dead, kill the turret the same way as the vehicle died.
		{
			Turret.bTransferDamage = False; //Turn the flag off so that the turret can die after the vehicle itself does.
			If (Health < GetGibHealth()) //Same check Die() uses internally to check if an actor was gibbed. 
				Turret.DamageMobj (Inflictor, Source, Turret.Health+(-Turret.GetGibHealth())+1, MeansOfDeath, DMG_FORCED);
			Else
				Turret.DamageMobj (Inflictor, Source, Turret.Health, MeansOfDeath, DMG_FORCED);
		}
		bShootable = bNotAutoaimed = True; //Destroyed vehicles stay shootable and non-autoaimable unless specified otherwise.
		RemoveHeadlights(); //The vehicles aren't resurrectable, so the headlights aren't needed.
		HeadlightsOn = False;
		A_StopSound (CHAN_IDLING);
		A_StopSound (CHAN_MOVING);
	}
	
	Override Void OnDestroy()
	{
		Super.OnDestroy();
		RemoveHeadlights();
		If (Turret) Turret.Destroy(); //Take your turret with you.
	}
	
	Override Void Activate (Actor Activator)
	{
		Super.Activate(Activator);
		
		If (Turret) //Pass it down to turrets as well.
			Turret.Activate (Activator);
	}
	
	Override Void Deactivate (Actor Activator)
	{
		Super.Deactivate(Activator);
		
		If (Turret) //Pass it down to turrets as well.
			Turret.Deactivate (Activator);
	}
	
	Enum VehicleSoundChannels
	{
		CHAN_IDLING = 23500,
		CHAN_MOVING = 23501
	}
	
	//The vehicle order system will stay here
	Enum VehicleCommands
	{
		ORDER_NONE = 0, //Null
		ORDER_FOLLOW = 1, //Follow the player when having no target.
		ORDER_WANDER = 2, //Wander around when having no target, instead of following the player.
		ORDER_STAY = 3, //Stay in place until a target appears or you are ordered to start moving again. Then stand around again once the chase timer is out.
		//ORDER_GOTOPOINT ? Perhaps, but maybe not, since I'm not sure how I could code the vehicles to head to a specified point.
	};
	
	Mixin HumanoidAndVehicleCode; //Code shared between humanoids and vehicles. Usually stuff for smarter NPCs than KAI_Creature.
	
	Const MARINE_RECURSIONS = 32; //How many times marine dropping vehicles can try dropping in an invalid spot before giving up.
	Const DEFAULT_HEARDISTANCE = 4096; //Exactly what it says, the default hear distance the vehicles' and turrets' A_LookEx calls use.
	Const DEFAULT_SEEDISTANCE = 8192; //The default sight distance.
	
	//AI variables
	Actor NearestEnemy; //The enemy closest to the vehicle, if any.
	Int ChaseTimer; //Makes the vehicle only chase its' target for a certain amount of time after it goes out of sight. Is also used to determine how long turreted vehicles stay in one place.
	Int CurrentOrder; //The current order the vehicle is following.
	Int StayStillDelay; //How long before the vehicle can stand still to attack again.
	State RetreatState; //The state the vehicle enters when retreating.
	
	//Internal variables
	Array <KAI_Headlight> Headlights; //Pointers to each headlight the vehicle has.
	Bool HeadlightsOn; //Should the headlights be on ?
	KAI_BaseTurret Turret; //The turret the vehicle has, used to actually spawn said turret.
	Vector3 TurretOffsets; //The offsets of the turret relative to the vehicle.
	Bool LightsOnAlready; //Used to stop the headlight code from constantly iterating through the headlights.
	
	Double MaxCorpseRadius, MaxCorpseHeight; //The maximum dimensions of a corpse that the vehicle can crush, anything above this can't be crushed.
	Property MaxCorpseRadius : MaxCorpseRadius;
	Property MaxCorpseHeight : MaxCorpseHeight;
	
	//Flag variables
	Private Int VehicleFlags;
	FlagDef Transport : VehicleFlags, 0; //The vehicle is marked as being able to transport soldiers.
	FlagDef NoOrders : VehicleFlags, 1; //The vehicle ignores orders given to it by the radio item.
	FlagDef NoHeadlights : VehicleFlags, 2; //The vehicle does not have working headlights. For vehicle props however, this is basically an on/off switch.
	FlagDef PassThreatLevelToTurrets : VehicleFlags, 3; //Turrets will inherit the vehicles' threat level, unless they have a threat level defined.
	FlagDef NoCrushing : VehicleFlags, 4; //The vehicle will never crush enemies and corpses.
	
	//Properties
	Class<KAI_BaseTurret> VehicleTurret; //The vehicles' turret, if any.
	Property VehicleTurret : VehicleTurret;
	Int HeadlightLevel; //If the light level of the sector the vehicle is in is at this value or less. It will turn its' headlights on.
	Property HeadlightLevel : HeadlightLevel;
	Double RetreatRange; //If an enemy is within this range, drive away.
	Property RetreatRange : RetreatRange;
	Int SearchTime; //How much time the vehicle spends looking for its target. The timer resets every time the target is in sight. And decrements with every chase call.
	Property SearchTime : SearchTime;
	
	Int MaxPushableMass; //The maximum amount of mass that the vehicle can shove around. Default is 0, which means the vehicle can't push pushable obstacles.
	Double MaxPushRadius, MaxPushHeight;
	Property MaxPushMass : MaxPushableMass; //The maximum dimensions the blocking actors can have before the vehicle can no longer push them.
	Property MaxPushRadius : MaxPushRadius;
	Property MaxPushHeight : MaxPushHeight;
	
	Int VehicleCrushDamage; //The crushing damage the vehicle does with every step.
	Property CrushDamage : VehicleCrushDamage;
	Double MaxCrushRadius, MaxCrushHeight; //The maximum dimensions an actor blocking a vehicles' way can have before the vehicle can no longer crush it.
	Property MaxCrushRadius : MaxCrushRadius;
	Property MaxCrushHeight : MaxCrushHeight;
	
	States
	{
		StickAround: //Generic state shared by all vehicles, for when they are far enough from any enemies to be able to just sit and let their turrets do the work.
			#### # 0
			{
				//Face sideways from your target, if any.
				If (Target)
				{
					A_FaceTarget ();
					Angle += RandomPick (75,80,85,90,95,100,105);
				}
			}
			#### # 4 //If an enemy has gotten too close, the turret can't attack, or enough time has passed, then stop standing around.
			{
				If (ChaseTimer <= 0 || FindNearestEnemy (RetreatRange/1.4) || Turret && (!Turret.CanAttack() || Turret.bDontStayAround))
				{
					ChaseTimer = 0;
					Return ResolveState ("See");
				}
				
				ChaseTimer--;
				Return State (Null);
			}
			Goto StickAround+1;
	}
}

Class KAI_BaseTurret : KAI_BaseVehicle Abstract
{
	Default
	{
		Speed 0;
		FastSpeed 0;
		RipLevelMin 2;
		MaxStepHeight 0;
		Mass 500;
		KAI_BaseTurret.TurnAmount 0.15;
		KAI_BaseTurret.TurnSoundRadius 2;
		Tag "Vehicle Turret Base (You really shouldn't be seeing this in-game)";
		+NoFear; //Can't really move to run away.
		+DontThrust;
		+StandStill;
		+LookAllAround;
		+DontFollowPlayers;
		+NoSpriteShadow;
		+KAI_BaseVehicle.NoOrders;
		+KAI_BaseVehicle.NoCrushing;
		-AvoidHazards;
		-AvoidMelee;
		-CanBlast; //Turrets are attached to their vehicle.
		-CountKill; //And because of that, they don't count as kills either.
	}
	
	Private Int TurretFlags;
	FlagDef FallOnDeath : TurretFlags, 0; //Turret detached from its' vehicle upon death.
	FlagDef DontStayAround : TurretFlags, 1; //Used to make the turret not make the vehicle stop to sit around and let the turret shoot, even if the latter has a target.
	//Note: If your turret has bTransferDamage, any splash damage the vehicle itself receives will be effectively doubled due to the damage transfer.
	//If you do not want this unintended consequence of the flag, then give the turret the +NORADIUSDMG flag !
	FlagDef TransferDamage : TurretFlags, 2; //The turret will transfer damage taken to its' master (The vehicle it's on). Instead of taking any of its' own.
	FlagDef NoCombatTraverse : TurretFlags, 3; //The stock combat traverse code will not run, can be used to give the turret its' own turn logic when firing.
	//FlagDef AltTurnSoundLogic : TurretFlags, 4; //The turn sound loops & increases or decreases in volume based on on how much it has turned since last tick.
	FlagDef TurnSoundNoStop : TurretFlags, 4; //The turn sound will wait for the last one to stop. Instead of playing every tick the angle diff is big enough.
	
	//Turret turning variables and properties.
	Double MaxPitch, MinPitch, TurnAmount, TurnSoundRadius, CombatAngleTurnRate, CombatPitchTurnRate;
	Sound TurnSound;
	Property MaximumPitch : MaxPitch; //The maximum pitch the turret can go up to.
	Property MinimumPitch : MinPitch; //The minimum pitch the turret can go down to.
	Property TurnAmount : TurnAmount; //How much the turret turns to face the vehicle when it's not snapping into position.
	Property TurnSoundRadius : TurnSoundRadius; //How much the turret has to turn since last tick for the sound to play.
	Property TurnSound : TurnSound; //The sound the turret makes when it turns.
	Property CombatAngleTurnRate : CombatAngleTurnRate; //How fast the turret changes its' angle to face its' target when in combat. In degrees per second.
	Property CombatPitchTurnRate : CombatPitchTurnRate; //How fast the turret changes its' pitch to face its' target when in combat. In degrees per second.
	
	//Target prediction properties.
	Double TurretAttackSpeed, FastTurretAttackSpeed; //The speed (And -fast speed) of the turrets' attack, in MU/tic, used by the target prediction code to estimate where the turret should aim ahead at.
	Property AttackSpeed : TurretAttackSpeed;
	Property FastAttackSpeed : FastTurretAttackSpeed;
	
	Int TurretSnapDelay; //Used for the turret rotating code, to make it so the turret snaps back to the vehicle after some time of not having a target.
	Double TurretRotationOffset; //Can be used to offset the rotation of the turret by this exact amount. Used by turrets when they are destroyed, and by prop turrets.
	
	Enum ElevationStates
	{
		ELEVATION_TOOHIGH = -1, //The turret is aiming too high up.
		ELEVATION_INBOUNDS = 0,	//The turret is within its' elevation limits.
		ELEVATION_TOOLOW = 1	//The turret is aiming too low down.
	}
	Int ElevationState; //Look above for possible elevation states.
	
	Int TurretAimPos; //Where should the turret aim at ? Should be passed at A_Face() functions in their flag parameter. USE THE FAF_ FLAGS FOR THIS !
	
	Override Void PostBeginPlay ()
	{
		KAI_Actor.PostBeginPlay ();
		SpawnVehicleTurret();
		TurretAimPos = FAF_MIDDLE; //Turrets aim in the middle of the targets' hitbox by default.
		//If (bAltTurnSoundLogic) //Start the turn sound and play it on loop, dynamically changing its volume.
		//The sound engine doesn't play sounds with 0 volume, so set the volume at EQUAL_EPSILON instead.
		//	A_StartSound (TurnSound,CHAN_BODY,CHANF_LOOP,(1./65536.),0.8);
		//If (!bFriendly) Species = 'MilitaryHostile';
	}
	
	//It's assumed that a turret can attack by default, as long as it is within its' elevation limits and alive.
	Override Bool CanAttack()
	{
		If (CurSector.Flags & Sector.SECF_NOATTACK) Return False;
		If (IsDead(Self)) Return False; 
		If (ElevationState != ELEVATION_INBOUNDS) Return False;
		
		Return True;
	}
	
	//Default turret checks. Is there even a target to shoot, and can the turret attack ?
	Override Bool ShouldAttack (Bool NoStateJump)
	{
		If (!Target) Return False;
		If (!CanAttack()) Return False;
		
		Return True;
	}
	
	Override Bool StayStillAndShoot(Actor CheckSightFrom) {Return False;} //Turrets already can't move lol.
	
	Override Void Tick()
	{
		Super.Tick();
		
		If (IsFrozen()) Return;
		
		Bool IsDead = IsDead (Self); //Caching
		
		//Combat turret traverse handling.
		If (!bNoCombatTraverse && !IsDead)
			If (IsInAttackState())
				DoCombatTraverse();
		
		//Play the turrets' turning sound whenever it's not dead.
		If (TurnSound && !IsDead)
		{
			Int Flags = (bTurnSoundNoStop ? CHANF_NOSTOP : 0);
			//If (!bAltTurnSoundLogic)
			//{
				//But only play it when the angle has changed a certain amount.
				If (AbsAngle (Angle,OldAngle) >= TurnSoundRadius
				&& !(Master && AbsAngle(Master.Angle,Angle) <= 0.25)) //Stops the turn sound from playing when the turret is snapping to the vehicles' angle.
					A_StartSound (TurnSound,CHAN_BODY,Flags,0.8,0.8);
				Else
				{
					If (bTurnSoundNoStop) //If the angle difference isn't big enough and no stop is on. Then the turn sound is probably long so stop it.
						A_StopSound (CHAN_BODY);
				}
			//}
			/*Else
			{
				//Or always play it, but change the volume based on how much the turret has turned since last tick.
				//The TurnSoundRadius instead acts as a threshold, if the angle change is less than it, no sound plays.
				Double Vol;
				Double AngDiff = AbsAngle (Angle,OldSoundAngle);
				Console.Printf ("AngDiff is %f",AngDiff);
				If (TurnSoundRadius && AngDiff < TurnSoundRadius)
					Vol = 0.0;
				Else
					Vol = -KAI_Math.LinearMap (Vol,AngDiff,TurnSoundRadius,1.,0.);
				Console.Printf ("Volume is %f",Vol);
				A_SoundVolume (CHAN_BODY,Vol);
				//A_StartSound (TurnSound,CHAN_BODY,0,Vol,0.8);
			}*/
		}
		
		ElevationState = GetElevationState();
		If (ElevationState != ELEVATION_INBOUNDS) Pitch = Clamp (Pitch,MaxPitch,MinPitch); //Turrets can't move past their elevation limits.
		
		If (!Master || IsDead && bFallOnDeath) Return;
		
		SetOrigin (KAI_Math.Vec3OffsetRelative(Master,(TurretOffsets.XY,Master.Height+TurretOffsets.Z),flags:KAI_Math.V3R_ANGLEONLY),True); //This is how the turret actually stays on the vehicle.
		A_Stop(); //Make sure it doesn't move on its' own.
		Floorclip = Master.Floorclip; //Copy floorclip offset for TERRAIN liquids.
	}
	
	Override Void Die (Actor Source, Actor Inflictor, Int DmgFlags, Name MeansOfDeath)
	{
		If (Master && Master Is "KAI_BaseVehicle") //Call the OnTurretDeath virtual on the vehicle or turret you are attached to.
			KAI_BaseVehicle(Master).OnTurretDeath (Self);
		
		If (Master && !(Self Is "KAI_BaseTurretProp")) //Prop turrets use TurretRotationOffset differently than living ones.
			TurretRotationOffset = DeltaAngle (Master.Angle,Angle);
		
		A_StopAllSounds ();
		Super.Die (Source, Inflictor, DmgFlags, MeansOfDeath);
		bShootable = bNotAutoaimed = True;
		If (bFallOnDeath) bNoSpriteShadow = False;
		TurretSnapDelay = 0;
	}
	
	Override Int DamageMobj (Actor Inflictor, Actor Source, Int Damage, Name MOD, Int Flags, Double Angle)
	{
		If (bTransferDamage && Master && !bNoDamage)
		{
			//TODO: Expose the internal ReactToDamage() function to ZScript in a PR one day. To call it from here.
			//HACK: This is mostly a copied bit from this unexposed internal code: https://sourcegraph.com/github.com/ZDoom/gzdoom/-/blob/src/playsim/p_interaction.cpp?L894
			If (Damage > 0 && OkayToSwitchTarget(Source))
			{
				If (!LastEnemy)
					LastEnemy = Target; //Remember our last enemy.
				
				Target = Source;
				Threshold = DefThreshold;
			}
			Return Master.DamageMobj (Inflictor, Source, Damage, MOD, Flags, Angle);
		}
		
		Return Super.DamageMobj (Inflictor, Source, Damage, MOD, Flags, Angle);
	}
	
	Override Void OnDestroy()
	{
		Super.OnDestroy();
		If (Master && Master Is "KAI_BaseVehicle") //Call the OnTurretDeath virtual on the turret you are attached to.
			KAI_BaseVehicle(Master).OnTurretDeath (Self, True); //Gone, reduced to atoms.
	}
}

Class KAI_Headlight : DynamicLight
{
	Default
	{
		DynamicLight.Type "Point";
		//+DynamicLight.Attenuate;
		+DynamicLight.Spot;
	}
	
	Bool Active; //The actual internal m_Active variable that reports if a dynamic light is on isn't exposed to ZScript.
	Vector3 Offset; //This needs to be here because SetOffset() doesn't work right after a dynamic light spawns.
	Bool IsBacklight;
	Bool UseSpriteRotation; //Take the Targets' SpriteRotation into account.
	Bool UseCardinalAngles; //Snap the headlights' angle to the nearest of 8 cardinal angles of the vehicle.
	Bool SixteenAngles; //Same, but for 16 angle sprites.
	
	Override Void Tick()
	{
		//The actual location offsets of the lights are handled by the internal m_Ofs variable.
		If (Target && KAI_BaseVehicle(Target).HeadlightsOn)
		{
			SetOrigin (Target.Pos, True);
			If (!UseCardinalAngles)
				Angle = IsBackLight ? Target.Angle-180 : Target.Angle;
			Else
			{
				Angle = KAI_Actor(Target).GetNearestCardinalAngle (SixteenAngles)- (IsBackLight ? 0 : 180);
				//If (IsBackLight)
				//	Angle -= 180;
			}
			If (UseSpriteRotation)
				Angle += Target.SpriteRotation;
			Pitch = Target.Pitch;
		}
	}
	
	//White by default.
	Override Void BeginPlay()
	{
		Super.BeginPlay();
		
		Args[LIGHT_RED] = 255;
		Args[LIGHT_GREEN] = 255;
		Args[LIGHT_BLUE] = 255;
		Args[LIGHT_INTENSITY] = 256;
	}
	
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Deactivate(Self); //Off by default.
		SetOffset(Offset);
	}
}