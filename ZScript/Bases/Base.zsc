/*KLUDGE: Mixins can't be used by different mods, so this class that contains ALL the mixin code in the KAI library is needed. You need to inherit from this
if you want to make something that's not an NPC, but can still use the mixin code the library includes.*/
Class KAI_MixinActor : Actor Abstract
{
	Mixin KAI_UniversalFunctions;
	Mixin KAI_CheckFunctions;
}

Class KAI_Actor : Actor Abstract
{
	Default
	{
		//Properties
		//These are the default player pawns' dimensions, and also my old Smart Marines' dimensions by extension.
		Radius 16;
		Height 56;
		CameraHeight 48; //I think that's about eye level ?
		Mass 100; //Generally, I (inkoalawetrust) interpet ZDooms' mass units as 1 unit being 1 kilogram.
		Speed 8;
		FriendlySeeBlocks 48; //4096 map units, longer than the default of 1280 map units.
		MaxTargetRange 8196; //Maximum range the actor can attack enemies from.
		Obituary "%o managed to be killed by an abstract class, congratulations %o, we are all very proud of you. Or maybe a modder forgot to define a custom obituary.";
		KAI_Actor.AggressionMultiplier 1.0;
		
		//Flags
		Monster; //Of course.
		+AvoidHazards; //Obviously this is on by default for an intelligent NPC base. However, from what I've seen in the code and playtested, this flag doesn't actually do anything on its' own.
		+SeeFriendlyMonsters; //Hostile KAI NPCs can see friendly monsters by default.
		+FloorClip;
	}
	
	Mixin KAI_CheckFunctions; //Of course all KAI NPCs have access to the library's check functions.
	
	//=====|Virtual functions|=====\\
	//NOTE: The code on these virtuals is basically just the default. Different base classes will likely add on this base code or replace it entirely.
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay ();
		UserVariableDefaults(); //User variables cannot be handled in BeginPlay().
		NextMovePos = LastEnemyPosition = CurrentEnemyPosition = (Double.NaN,Double.NaN,Double.NaN); //These should be empty.
		if (!(self is "kai_baseturret"))debugpoint = spawn ("kai_debugpoint",pos);//DEBUG
	}
	actor debugpoint; //DEBUG
	Override Void OnDestroy()
	{
		Super.OnDestroy();
		AttackStates.Clear(); //Clean the array before removal, because the GC can't: https://github.com/ZDoom/gzdoom/issues/2019
	}
	
	Override Void Tick()
	{
		Super.Tick();
		If (IsFrozen()) Return;
		if (!kai_math.isemptyvector3(NextMovePos) && debugpoint) debugpoint.setorigin (NextMovePos,true); //DEBUG
		//Keeps track of the current targets' position for the target prediction code.
		If (Target && Target.Tics != 0 && Target.Tics == Target.CurState.Tics || Target && !IsTeleportingMonster(Target))
		{
			If (KAI_Math.IsEmptyVector3(CurrentEnemyPosition))
				CurrentEnemyPosition = Target.Pos;
			
			LastEnemyPosition = CurrentEnemyPosition;
			CurrentEnemyPosition = Target.Pos;
		}
		Else If (!Target)
			LastEnemyPosition = CurrentEnemyPosition = (Double.NaN,Double.NaN,Double.NaN);
	}
	
	/*Allows actors to define the defaults for their own user variables. This is better than the //$UserDefaultValue editor key,
	because it allows default user variable values to be set for actors that are spawned in-game as well, not just ones placed in UDB*/
	Virtual Void UserVariableDefaults(){}
	
	/*PLAYTEST: For the time being I'm focusing on the vehicles (This codebase IS still mostly a rip from the MVP after all, for now.)
	So I have not actually playtested if the default CanAttack() and ShouldAttack() code works like the native code. Since the vehicles just override it.
	I'll begin putting more attention to the non-vehicle NPC code once I begin rewriting the Smart Marines, to code them more properly this time.*/
	//Used by the chase functions of each NPC type to check for all the different methods each actor has to attack.
	Virtual Bool CanAttack()
	{
		If ((MissileState || MeleeState) && !IsDead(Self) && !(CurSector && CurSector.Flags & Sector.SECF_NOATTACK)) Return True; //Actors just check if they have an attack state, are alive, and not in a NOATTACK sector by default. More or less stock ZDoom.
		Return False;
	}
	
	//Called in NPCs' chase functions to handle the unique attack decision code of each actor.
	//This is basically a customizable version of the native attack decision code: https://github.com/ZDoom/gzdoom/blob/e3f8230035f08116d1a62c74aaa78b9c0408df6e/src/playsim/p_enemy.cpp#L2574-L2601
	//NOTE: The virtual needs to do the jump to an attack state itself !
	//NoStateJump: If true, then the actor should not call SetStateLabel.
	Virtual Bool ShouldAttack (Bool NoStateJump = False)
	{
		If (HandleNativeFright())
		{
			If (MeleeState && KAI_CheckMeleeRange (Target))
			{
				If (AttackSound)
					S_StartSound (AttackSound, CHAN_WEAPON, 0, 1, ATTN_NORM);
				
				If (!NoStateJump) SetState (MeleeState);
				Return True;
			}
			
			If (MissileState)
			{
				If (IsFast(Self) && MoveCount)
					Return False;
				
				If (!KAI_CheckMissileRange (Target))
					Return False;
				
				If (!NoStateJump) SetState (MissileState);
				Return True;
			}
		}
		Return False;
	}
	
	//Called when the actor calls KAI_Wander().
	Virtual Void OnWander(){}
	
	//Return the location that the actors' attack will hit at. This is just whatever the targets' position is by default.
	Virtual Vector3 GetAttackLocation()
	{
		If (Target) Return Target.Pos;
		Return (Double.NaN,Double.NaN,Double.NaN); //This is an actual empty vector. Not one that is (0,0,0), but fully null.
	}
	
	//Returns if the other actor should be considered hostile, can be used to define different criteria for hostility. Like if the other actor is targeting the callers' allies, or a specific actor.
	ClearScope Virtual Bool IsActorHostile (Actor Other)
	{
		Return IsHostile(Other);
	}
	
	Bool ThreatHealthCheck (Actor Other, Int Amount)
	{
		Return (Other.SpawnHealth() >= Amount || Other.Health >= Amount);
	}
	//Tries to heuristically determine how dangerous another actor is. This is pretty hard to do universally. Since stuff like attacks can't be checked.
	//TODO: Add a forceassess parameter, that skips returning the other actors' preset threat level.
	//Other: The actor to check.
	//CheckPlayers: Should the checks factor in players too ? e.g counting players with god or buddha mode as THREAT_UNSTOPPABLE. Useful for say not having NPCs just run away from cheating players.
	Virtual Int AssessThreatLevel (Actor Other, Bool CheckPlayers = True)
	{
		If (!Other || IsDead (Other)) Return THREAT_NONE; //Nonexistent or dead actors aren't a problem.
		
		//KAI NPCs can have specific threat levels set, in which Case, just return whatever the NPCs' threat level is.
		If (Other Is "KAI_Actor" && KAI_Actor(Other).ThreatLevel != THREAT_ASSESS)
			Return KAI_Actor(Other).ThreatLevel;
		
		//Alternatively, if this is a non-KAI NPC. But has the KAI data token, and that token has a threat level specified, pass that instead.
		Inventory Token = Other.FindInventory ("KAI_DataToken");
		If (!(Other Is "KAI_Actor") && Token && KAI_DataToken(Token).ThreatLevel != THREAT_ASSESS)
			Return KAI_DataToken(Token).ThreatLevel;
		
		//It's not even a player or NPC.
		If (IsInanimateObject (Other))
			Return THREAT_NONE;
		
		//If indestructible. Then the other actor is unstoppable (Obviously)
		If (HasGodMode (Other, !CheckPlayers) || HasBuddha (Other, !CheckPlayers) || IsIndestructible (Other) ||
		//Also unstoppable if, more esoterically, it has NONSHOOTABLE (Hitscans go through), NOBLOCKMAP (Projectiles go through), and NORADIUSDMG (No splash damage)
		//NOTE: If you have any FORCERADIUSDMG attacks, you might want to remove these 3 flag checks. Since your actor can harm an enemy with these properties.
		Other.bNonShootable && Other.bNoBlockmap && Other.bNoRadiusDmg)
			Return THREAT_UNSTOPPABLE;
		
		//If the actor has over 10000 health, or has 2500 or more health and can fly super fast, or can deflect.
		If (ThreatHealthCheck (Other,10000) || ThreatHealthCheck(Other,2500) && ( (IsFlying (Other) && Other.Speed >= 25) || (Other.bReflective && Other.bAimReflect) ))
			Return THREAT_SUPERDANGER;
		
		//If the actor has 2500+ health.
		If (ThreatHealthCheck(Other,2500) ||
		//Or it's enormous (3.4m tall and 4.5m wide or bigger, larger than the Challenger 2 tank, which is huge).
		(Other.Height >= 110 && Other.Radius >= 72))
			Return THREAT_VERYDANGEROUS;
		//Alternatively, if the actor has as much health as a THREAT_DANGEROUS actor, but can reflect projectiles back at enemies, it's also very dangerous.
		Else If (ThreatHealthCheck(Other,1000) && Other.bReflective && Other.bAimReflect)
			Return THREAT_VERYDANGEROUS;
		
		//Players are automatically dangerous. Since they have a brain and are intelligent, unless they are me lmfao.
		If (CheckPlayers && Other.Player && !(Other.Player.GetUsername() ~== "inkoalawetrust"))
			Return THREAT_DANGEROUS;
		
		//If the actor has 1000+ health. Or 500+ health and deflects projectiles, then it's dangerous.
		If (ThreatHealthCheck(Other,1000) || ThreatHealthCheck(Other,500) && Other.bReflective)
			Return THREAT_DANGEROUS;
		
		//If the actor has 500+ health.
		If (ThreatHealthCheck(Other,500) ||
		//Or has 100+ health and flies or is fast.
		ThreatHealthCheck(Other,100) && (IsFlying (Other) || Other.Speed >= 15) ||
		//Or is weak, but flies around fast.
		ThreatHealthCheck(Other,50) && IsFlying (Other) && Other.Speed >= 15)
			Return THREAT_ABOVENORMAL;
		
		//If the actor has 100+ health. Or is very weak, but fast.
		If (ThreatHealthCheck(Other,100) || ThreatHealthCheck(Other,20) && Other.Speed >= 15)
			Return THREAT_NORMAL;
		
		//If the actor has 50+ health (About as much as an Imp or Chaingunner)
		If (ThreatHealthCheck(Other,50))
			Return THREAT_MILD;
		
		//If we are this low down, we are checking for very weak NPCs, so if any of these die on contact, they are automatically barely a threat.
		If (Other.bTouchy)
			Return THREAT_VERYLOW;
		
		//If the actor has 20+ health. AKA is about as strong as a Shotgunner or Zombieman.
		If (ThreatHealthCheck(Other,20))
			Return THREAT_LOW;
		
		//If the actor has 10 health OR LESS. Or it's health is lower than 20 (As specified right above) and it dies on contact with anything, then it's super weak.
		If (ThreatHealthCheck(Other,10))
			Return THREAT_VERYLOW;
		
		Return THREAT_NONE; //If it's none of the above, then it's probably not a problem, probably.
	}
	
	//Actor properties and flags.
	Double AggressionMultiplier; //Can be used to further increase the chance of KAI_CheckMissileRange returning true. The LOWER it is the more frequent the attacking.
	Int ThreatLevelThreshold; //If another actors' threat level is at or over this threshold, then the NPC should do some action (Like run away, or be more likely to use stronger attacks).
	Int ThreatLevel; //The NPCs' predetermined threat level. In its basic form it can be used as just a static value. But you could also dynamically change it, e.g based on what attacks your NPC currently has available.
	Property AggressionMultiplier : AggressionMultiplier;
	Property ThreatLevelThreshold : ThreatLevelThreshold;
	Property ThreatLevel : ThreatLevel;
	Private Int NPCFlags;
	FlagDef NoTargetPrediction : NPCFlags, 0; //The NPC will not calculate its' targets' movement and lead its' shots.
	FlagDef MovesWithVelocity : NPCFlags, 1; //Specifies that the NPC moves using real momentum, like players. For the target prediction code, does nothing else on its' own.
	
	//Actor variables
	Array <State> AttackStates; //Can be used to store all of the attack state labels an actor has. Such as for actors with multiple attacks besides a missile and melee attack, like vanilla monsters only have.
	Vector3 LastEnemyPosition; //Used by the target prediction. If the turret has a target with no velocity, it grabs their last position every tick to compare it to the current position.
	Vector3 CurrentEnemyPosition;
	Vector3 NextMovePos; //The next position the NPC should move to. Used by KAI_MoveAway() and KAI_Wander().
	Int NewPosStepCount; //How many steps the actor has taken before NextMovePos is reset, so the actor will get a new point to move to. Like if it gets stuck.
	
	//Keep in mind that the threat level descriptions are mostly based on the stock AssessThreatLevel() code.
	Enum ThreatLevels
	{
		THREAT_ASSESS		= 0, //No threat level specified, this is the default, and means that the threat level is to be determined by the AssessThreatLevel() virtual.
		THREAT_NONE			= 1, //The actor is harmless. e.g a prop or a defenseless enemy
		
		THREAT_VERYLOW		= 2, //The actor poses minimal threat. e.g a mosquito enemy or something
		THREAT_LOW			= 3, //The actor poses little threat. e.g a Zombieman or Shotgunner
		THREAT_MILD			= 4, //The actor is somewhat dangerous. e.g a Chaingunner
		THREAT_NORMAL		= 5, //The actor is an average threat. e.g a Pinky, or Imp
		THREAT_ABOVENORMAL	= 6, //The actor is an above average threat. e.g a Hell Knight, Cacodemon, or Revenant
		THREAT_DANGEROUS	= 7, //The actor is dangerous. e.g a Baron of Hell, Arachnotron or Mancubus
		THREAT_VERYDANGEROUS= 8, //The actor is a major threat. e.g bosses like Cyberdemons and Spider Masterminds
		THREAT_SUPERDANGER	= 9, //The actor is a GIGANTIC THREAT. Like, literally as strong as 5-6 Cyberdemons or more.
		
		THREAT_UNSTOPPABLE	= 666, //The actor is straight up unstoppable, like an NPC with NODAMAGE, or player with ultimate god mode, should probably run away.
	}
	
	//Constants
	//Const NullVector = (Double.NaN,Double.NaN,Double.NaN);
}

//IDEA: Make a custom ripping system, where the ripper rips once per actor. Simplifying the damage process, and make it easier to make LOF checks for rippers.
//IDEA: Make the deflection chance increase the more a shoot grazes the other actor, target wise.
//NOTE: This code is kinda mostly made for bullets and other such projectiles, hence the bullet tracer-like code and deflection system. But can be used for fireballs and the likes just fine !
//The base projectile for KAI actors, it's not necessary to really use this. But it does have some advantages:
//It's based on FastProjectile, so it can properly move both with fast and slow velocities.
/*It's got a toggleable custom trail system. The default trail spawn code for FastProjectile works for actors faster than normal projectiles.
But begins Breaking up with truly fast projectiles, this custom trail code doesn't. You can reenable the stock FastProjectile trails.*/
//It has a deflection function, which makes the projectile deflect like a bullet.
//It has code that allows you to change the visual pitch of the projectile based on its' actual pitch. Similar to what KAI_BaseTurret allows for on the vehicle base.
//Has a virtual that is called for each trail spawned, with a pointer to the trail.
Class KAI_BaseProjectile : FastProjectile
{
	Default
	{
		MissileHeight 8;
		KAI_BaseProjectile.TrailLineSpacing 2;
		Projectile;
	}
	
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		If (Target) Species = Target.Species; //MAYDO: Have this rely on a flag ? It's kinda here because of the MVP where it was ripped from.
		A_FaceMovementDirection(); //Projectile faces where it's going, used by the trail line spawning code.
		LastTracerPosition = CurrentTracerPosition = (Double.NaN,Double.NaN,Double.NaN); //These should be empty.
	}
	
	Bool TrailSpawned;
	Vector3 OldPos;
	
	Override Void Tick ()
	{
		OldPos = Pos;
		Super.Tick();
		//bMissile is removed when a projectile explodes.
		If (!bMissile || IsFrozen()) Return;
		
		//Keeps track of the current Tracers' position for the Tracer prediction code.
		If (Tracer && Tracer.Tics != 0 && Tracer.Tics == Tracer.CurState.Tics || Tracer && !IsTeleportingMonster(Tracer))
		{
			If (KAI_Math.IsEmptyVector3(CurrentTracerPosition))
				CurrentTracerPosition = Tracer.Pos;
			
			LastTracerPosition = CurrentTracerPosition;
			CurrentTracerPosition = Tracer.Pos;
		}
		Else If (!Tracer)
			LastTracerPosition = CurrentTracerPosition = (Double.NaN,Double.NaN,Double.NaN);
		
		If (TrailDelay)
		{a_log ("waiting");
			TrailDelay--;
			Return;
		}
		
		If (bNoTrailLine) //Use stock FastProjectile trail. Simple as.
		{
			Effect();
			Return;
		}
		
		//CREDIT: Boondorl wrote the original code that draws a line of tracers between the current and previous position.
		If (TrailActor && !TrailSpawned)
		{
			Vector3 Path = Level.Vec3Diff( Pos, OldPos );
			Double Distance = Path.Length();
			If (Distance <= 1) Return;
			Path /= Distance;
			
			Double CurScaleX = ScaleAmountX;
			Double CurScaleY = ScaleAmountY;
			Double CurAlpha = FadeAmount;
			
			For( Double I = InitialTrailsSkipped; I < Distance; I += TrailLineSpacing )
			{
				If (MaxTrails != 0 && MaxTrails <= I) Break; //Too many trail actors.
				Vector3 SpawnPos = level.Vec3Offset(pos, Path*i);
				Let Trail = Spawn(TrailActor,SpawnPos);
				If (Trail)
				{
					TrailSpawn (Trail); //Return spawned trail.
					If (Trail Is "KAI_Tracer") KAI_Tracer(Trail).WarpOffsets = (-(Path*I).Length(),0,0);
					//If it's time to begin scaling and fading the trail.
					If (I >= TrailFadeAndScaleStart)
					{
						Trail.Scale.X += CurScaleX;
						Trail.Scale.Y += CurScaleY;
						Trail.Alpha += CurAlpha;
						CurScaleX += ScaleAmountX;
						CurScaleY += ScaleAmountY;
						CurAlpha += FadeAmount;
					}
				}
			}
			
			TrailSpawned = True;
		}
	}
	
	//Mostly ripped from the native FastProjectile, with some changes and additions.
	Override Void Effect()
	{
		If (!bNoTrailLine || TrailDelay) Return;
		Class<Actor> Trail = MissileName;
		Actor Act;
		If (Trail != Null)
		{
			Double HitZ = Pos.Z - 8;

			If (HitZ < FloorZ)
			{
				HitZ = FloorZ;
			}
			// Do not clip this offset to the floor.
			HitZ += MissileHeight;
			
			Act = Spawn (Trail, (Pos.XY, HitZ), ALLOW_REPLACE);
			If (Act != Null)
			{
				TrailSpawn (Act);
				//These are handled by TrailSpawn().
				/*If (bGetOwner && Target != Null)
					Act.Target = Target;
				Else
					Act.Target = Self;
				
				Act.Angle = Angle;
				Act.Pitch = Pitch;*/
			}
		}
	}
	
	//Returns each trail actor spawned, allowing you to perform per-trail modifications.
	Virtual Void TrailSpawn (Actor Trail)
	{
		If (!Trail) Return;
		
		If (bGetOwner && Target != Null)
			Trail.Target = Target;
		Else
			Trail.Target = Self;
		Vector3 OldVel = Trail.Vel;
		Trail.Vel = Level.Vec3Diff (OldPos,Pos);
		Trail.A_FaceMovementDirection();
		Trail.Vel = OldVel;
	}
	
	//TODO: Maybe move the projectile class to its' own file at this point ?
	//Called in SpecialMissileHit() to handle bullet-like projectiles bouncing off actors.
	Bool DeflectProjectile (Actor Victim, Int DeflectChance, Double DamageReductionFactor, Double SlowDownFactor = 1,
	Vector2 RandomAngle = (0,0), Vector2 RandomPitch = (0,0), Double Volume = 1, Double Attenuation = 0.9)
	{
		If (Random (0,255) < DeflectChance) Return False; //Fission mailed.
		
		Int Damage = GetMissileDamage(7,1); //Get your damage, be it a static number or a damage function.
		Victim.DamageMobj (Self,Target,Int(Damage*DamageReductionFactor),DamageType); //Harm the caller even when deflected.
		Angle -= 180; //Turn around.
		Vel *= -1; //Opposite day today
		Speed *= SlowDownFactor; //Slow down by a set amount. Can just be randomized in the parameters instead.
		//Randomize the direction you'll fly to.
		Angle += FRandom (RandomAngle.X,RandomAngle.Y);
		Pitch += FRandom (RandomPitch.X,RandomPitch.Y);
		Vel3DFromAngle (Speed,Angle,Pitch);
		
		//Spark effect.
		//MAYDO: Make the spark effect customizable ? Potentially by handling it in an OnDeflection() virtual.
		TextureID NullTex;
		For (Int I = 0; I < 24; I++)
		{
			A_SpawnParticleEx (
			"yellow",
			NullTex,
			STYLE_Add,
			lifetime:23,
			size:3,
			xoff:FRandom (6,-6),
			yoff:FRandom (6,-6),
			zoff:FRandom (6,-6),
			velx:FRandom (1,-1),
			vely:FRandom (1,-1),
			velz:FRandom (1,3),
			accelz: FRandom (-0.1,-0.25)
			);
		}
		Victim.A_StartSound (BounceSound,flags:CHANF_OVERLAP,Volume,Attenuation); //Ricochet sound, uses the BounceSound property, naturally.
		DontCollide = Victim; //You should no longer collide with the actor you just deflected, to avoid getting stuck inside it.
		
		Return True;
	}
	
	Enum SeekerMissileFlags
	{
		//Same as A_SeekerMissile.
		//SMF_LOOK 	= 1 << 0,
		//SMF_PRECISE	= 1 << 1, //Does nothing. This already uses full 3D tracking.
		//SMF_CURSPEED= 1 << 2,
		SMF_SMART	= 1 << 3, //When enabled, the projectile will move to where the tracer will be IN the future. Similar to the vehicle turret prediction code.
		SMF_FACE	= 1 << 4, //Make the projectile face it's movement direction.
	}
	
	//An improved A_SeekerMissile.
	//Strength: How much to adjust the angle and pitch of the projectile, a value of 1 makes the projectile instantly face the tracer.
	//Flags: The flags that define the behavior of the function. Supports most A_SeekerMissile flags along with new ones.
	//Inaccuracy: How inaccurate should the projectile be while tracking its' tracer, in each axis ?
	//Distance: Used by SMF_LOOK. Specifies how many blockmap chunks (128x128 map units) to check around the projectile for a new seekable enemy.
	//Chance: The chance that the SMF_LOOK sight check will run.
	Bool KAI_SeekerMissile (Double Threshold, Double Strength, Int Flags = 0, Vector3 Inaccuracy = (0,0,0), Double Distance = 10, Int Chance = 50)
	{
		//Perform basic monster search, in blockmap blocks, instead of actual distance.
		If (Flags & SMF_LOOK && Tracer == Null && Random (0,255) < Chance)
			Tracer = RoughMonsterSearch (Distance,True);
		
		If (!Tracer || !CanSeek (Tracer)) Return False;
		
		If (!Tracer.bShootable)
		{
			Tracer = Null;
			Return False;
		}
		
		Speed = (Flags & SMF_CURSPEED) ? Vel.Length() : Speed;
		Vector3 TrackPos;
		If (Flags & SMF_SMART)
			TrackPos = GetFutureTrajectory(Inaccuracy);
		Else
			TrackPos = Level.Vec3Offset(Tracer.Pos,(FRandom(Inaccuracy.X,-Inaccuracy.X),FRandom(Inaccuracy.Y,-Inaccuracy.Y),FRandom(Inaccuracy.Z,-Inaccuracy.Z)));
		Vector3 Coords = Level.SphericalCoords (Pos,TrackPos,(Angle,Pitch));
		If (AbsAngle (Angle,Coords.X) < Threshold)
			Strength = 1; //Lock straight into the target if the angle difference is small enough.
		A_SetAngle(Angle - (Coords.X * Strength), SPF_INTERPOLATE);
		If (!bFloorHugger && !bCeilingHugger)
			A_SetPitch(Pitch - (Coords.Y * Strength), SPF_INTERPOLATE);
		
		Vel3DFromAngle (Speed,Angle,Pitch);
		
		If (Flags & SMF_FACE)
			A_FaceMovementDirection();
		
		Return True;
	}
	
	/*FIXME: This target prediction code is totally fucking broken, VelIntercept() works, but can't be configured to KAI_SeekerMissiles' parameters,
	does not work with monster movement (Which is the reason I wrote the target prediction code in the first place), works by directly altering the velocity
	instead of getting a position for the actor to face and go to, and the math can't even be translated from C++ to ZScript due to using matrix math.
	Let alone the fact that I don't UNDERSTAND the math in the first place*/
	//Get the tracers' future trajectory, used by homing projectiles.
	Vector3 GetFutureTrajectory (Vector3 Inaccuracy = (0,0,0))
	{
		If (!Tracer) Return (Double.NaN, Double.NaN, Double.NaN);
		Int TravelTics;
		Float FloatTics;
		//Estimate the travel time the projectile needs.
		If (Vel.Length() != 0)
			TravelTics = Distance3D (Tracer)/Vel.Length();
			//console.printf ("traveltics %.2f",traveltics);
		TravelTics = Clamp (TravelTics,1,INT.MAX); //Needs at least 1 tic.
		FloatTics = TravelTics; //Finer precision on multiplier the extrapolated velocity, for extra accuracy.
		Vector3 OldPos = Tracer.Pos;
		//BUG: When there's no LastTracerPosition, or the values are the same I guess ? The turret will instantly face the Tracer.
		Vector3 Diff = Level.Vec3Diff (LastTracerPosition,Tracer.Pos);
		If (IsTeleportingMonster(Tracer))
		{
			Vector3 TPOnly = Level.Vec3Diff (Diff,Tracer.Vel); //Get the teleport movement, sans velocity.
			TPOnly = GetTeleportMoveDivision();
			//console.printf ("tponly is %.3f %.3f %.3f",tponly.x,tponly.y,tponly.z);
			Diff = Level.Vec3Offset (TPOnly,Tracer.Vel);
		}
		Vector3 Result = Level.Vec3Offset (Tracer.Pos.PlusZ(Tracer.Height/2),Diff/**FloatTics*/); //FIXME: Commented out to stop this: https://streamable.com/d9g6g1
		Result = Level.Vec3Offset(Result,(FRandom(Inaccuracy.X,-Inaccuracy.X),FRandom(Inaccuracy.Y,-Inaccuracy.Y),FRandom(Inaccuracy.Z,-Inaccuracy.Z)));
		//console.printf ("the tracers' current trajectory is %d %d %d",pos);
		//console.printf ("the tracers' future trajectory is %d %d %d",result);
		FSpawnParticleParams P; P.Color1 = "White"; P.Style = STYLE_None; P.Lifetime = 1; P.Size = 4; P.StartAlpha = 1; P.FadeStep = -1; P.Flags = SPF_FULLBRIGHT;
		KAI_LOFRaycast.VisualizeTracePath(Pos,result,distance3d(tracer),8,p);
		Return Result;
	}
	
	Vector3 GetTeleportMoveDivision()
	{
		If (Tracer.CurState.Tics)
			Return Level.Vec3Diff (LastTracerPosition,CurrentTracerPosition) / Tracer.CurState.Tics;
		Else //Fallback to prevent division by zero.
			Return Level.Vec3Diff (LastTracerPosition,CurrentTracerPosition);
	}
	
	//Has different values than UpdateTurretElevation().
	//Mirror: Mirror the bottom sprites with +YFLIP. If you aren't showing a bottom sprite, revert the flag to default.
	Int UpdateProjectileElevation (Int FaceDown, Int FaceDown2, Int FaceStraight, Int FaceUp, Int FaceUp2, Bool Mirror = False)
	{
		If (Pitch >= 70)
		{
			If (Mirror) bYFlip = True;
			Return FaceDown2;
		}
		Else If (Pitch >= 30 && Pitch < 70)
		{
			If (Mirror) bYFlip = True;
			Return FaceDown;
		}
		Else If (Pitch < 30 && Pitch > -30)
		{
			If (Mirror) bYFlip = Default.bYFlip;
			Return FaceStraight;
		}
		Else If (Pitch <= -30 && Pitch > -70)
		{
			If (Mirror) bYFlip = Default.bYFlip;
			Return FaceUp;
		}
		Else If (Pitch <= -70)
		{
			If (Mirror) bYFlip = Default.bYFlip;
			Return FaceUp2;
		}
		If (Mirror) bYFlip = Default.bYFlip;
		Return FaceStraight;
	}
	
	//Is the other actor hostile to the projectiles' shooter ? Useful for SpecialMissileHit checks.
	Bool IsHostileToShooter(Actor Other)
	{
		If (!Target || !Other) Return False;
		
		//KAI NPCs have a custom virtual to check for hostility.
		If (Target Is "KAI_Actor")
			Return KAI_Actor(Target).IsActorHostile (Other);
		
		Return Target.IsHostile (Other); //If not a KAI NPC, use the native IsHostile().
	}
	
	//1 Ignore actor
	//0 Hit actor but do no effects like giving damage, exploding, etc
	//-1 Normal missile behavior
	Override Int SpecialMissileHit (Actor Victim)
	{
		If (!Victim || Victim == DontCollide) Return 1;
		If (bNoFriendlyFire && !IsInanimateObject (Victim) && !IsHostileToShooter (Victim)) Return 1;
		If (Target && Target Is "KAI_BaseTurret" && Victim && Victim == Target.Master) Return 1; //If fired from a turret, ignore the vehicle it's attached on.
		
		//Assume the actor will be hit and ripped. For overrides, this will need to be set manually, if some child class code says it shouldn't collide.
		/*BUG: The RipDepth code is somewhat buggy, it doesn't necessarily rip through however many actors specified when they are tightly packed together.
		And will sometimes do 2-3 rips on victims in despite the RipOnce flag. I've tried a few fixes, including using an array, but they made things worse.*/
		IncrementRipDepth (Victim, False);
		StoreLastRipped (Victim);
		Return -1;
	}
	
	Void StoreLastRipped (Actor Victim)
	{
		//If (bRipper && Victim && !RippedAlready(Victim))
		//	Ripees.Push(Victim);
		If (bRipper && LastRipped != Victim && PreLastRipped != Victim)
		{
			PreLastRipped = LastRipped;
			LastRipped = Victim;
		}
	}
	
	Void IncrementRipDepth (Actor Victim, Bool FromOverride)
	{
		If (!Default.RipDepth || !Victim || !bRipper) Return;
		/*If (RippedAlready(Victim)) Return;
		If (FromOverride) Ripees.Pop(); //Undo the rip from Super.SpecialMissileHit() if called from an override to that virtual.
		If (Ripees.Size()-1 <= RipDepth+1)
		{
			Ripees.Clear();
			a_log ("no more ripping");
			bRipper = False;
			Return;
		}*/
		
		If (Victim == LastRipped || Victim == PreLastRipped) Return;
		If (FromOverride) RipDepth++; //Undo the rip from Super.SpecialMissileHit() if called from an override to that virtual.
		RipDepth--;
		If (RipDepth <= 1)
		{
			RipDepth--; //Now the depth is 0.
			//a_log ("no more ripping");
			bRipper = False;
			Return;
		}
		
		//console.printf ("rip depth %d",ripdepth);
	}
	
	/*Bool RippedAlready (Actor Who)
	{
		If (!Who) Return False;
		For (Int I = Ripees.Size()-1; I >= 0; I--)
		{
			If (Ripees[I] == Who)
				Return True;
		}
		Return False;
	}*/
	
	Override Bool CanCollideWith (Actor Other, Bool Passive)
	{
		//Don't collide with actors you already ripped.
		If (!Passive && bRipper && bRipOnce /*&& RippedAlready (Other)*/ && Other && (Other == LastRipped || Other == PreLastRipped))
			Return False;
		
		Return Super.CanCollideWith (Other, Passive);
	}
	
	Actor DontCollide; //Stores an actor that will be ignored by SpecialMissileHit, so deflected projectiles don't deflect dozens of times when bouncing off. Sorse spaghetti has nothing on Doom spaghet.
	Actor LastRipped, PreLastRipped; //The actor that a ripper last hit. Used for the RIPONCE flag.
	//Array <Actor> Ripees;
	Vector3 LastTracerPosition;
	Vector3 CurrentTracerPosition;
	
	Mixin KAI_UniversalFunctions;
	Mixin KAI_CheckFunctions;
	Private Int ProjectileFlags;
	FlagDef NoTrailLine : ProjectileFlags, 0; //The projectile uses the normal FastProjectile trail spawning code.
	FlagDef NoFriendlyFire : ProjectileFlags, 1; //The projectile should not collide with actors friendly to its' shooter.
	FlagDef RipOnce : ProjectileFlags, 2; //If the projectile is a ripper, it will only rip a victim once, instead of multiple times.
	Class <KAI_Tracer> TrailActor;
	Property TrailActor : TrailActor;
	
	Int TrailDelay, MaxTrails, InitialTrailsSkipped, TrailFadeAndScaleStart;
	Property TrailDelay : TrailDelay;
	Property MaxTrails : MaxTrails;
	Property InitialTrailsSkipped : InitialTrailsSkipped;
	Property TrailFadeAndScaleStart : TrailFadeAndScaleStart;
	
	Double TrailLineSpacing;
	Property TrailLineSpacing : TrailLineSpacing;
	
	Double ScaleAmountX, ScaleAmountY, FadeAmount;
	Property ScaleAmountX : ScaleAmountX;
	Property ScaleAmountY : ScaleAmountY;
	Property FadeAmount : FadeAmount;
	
	Int RipDepth; //How many actors can the ripper with RipOnce rip ?
	Property RipDepth : RipDepth;
}

//A generic tracer effect particle.
//ReactionTime: The tracer code uses this as a timer for how long the trail should last before vanishing.
//bNeverRespawn: Turning on this flag causes the trail to automatically vanish if it has no master or its' master is dead.
//bStandStill: The trail will not warp relative to its' target.
Class KAI_Tracer : Actor
{
	Default {RenderStyle "Add"; Scale 0.5; ReactionTime INT.MAX; +NoBlockmap; +NoInteraction;}
	
	Override Void Tick()
	{
		If (IsFrozen()) Return;
		//Super.Tick(); //Not needed.
		If (GetAge() >= ReactionTime || bNeverRespawn && (!Target || Target.Default.bMissile && !Target.bMissile))
			Destroy();
		
		If (Target && !bStandStill) SetOrigin (KAI_Math.Vec3OffsetRelative (Target,WarpOffsets),True);
	}
	
	Vector3 WarpOffsets;
}

Class KAI_DebugPoint : Actor
{
	Override Void PostBeginPlay(){}
	Override Void Tick(){}
	States
	{
		Spawn:
			PLSS A -1;
			Stop;
	}
}

//DOCUMENT: Write instructions on using this to add support for KAI NPCs without making the library needed for the non-KAI mod to run.
//This inventory token is a surrogate to allow non-KAI NPCs and mods to use certain types of KAI info. Such as threat levels.
//This token is useful for tasks like:
//Adding optional KAI support to your mod without turning your actors into KAI NPCs. And also without needing to make a compatibility patch, or getting startup errors without the library loaded.
/*Making something like an event handler addon that gives specific NPCs tokens with hardcoded threat levels. Like for example giving all Pain Elementals this token,
to specify that Elementals are THREAT_DANGEROUS instead of THREAT_ABOVENORMAL, due to their constant spamming of tanky Lost Souls.*/
Class KAI_DataToken : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
		+Inventory.Quiet;
		+Inventory.Undroppable;
		+Inventory.Unclearable;
		+Inventory.Untossable;
		+Inventory.HubPower;
		+Inventory.NoScreenFlash;
	}
	
	Int ThreatLevel; //The threat level of the tokens' owner.
	Bool VelocityMonster;	//This actor moves with actual momentum instead of using TryMove() like normal monsters do.
							//Non-KAI actors that genuinely move need to mark themselves with this to be detected
							//as moving with momentum by the target prediction code.
	
	/*override void attachtoowner (actor other) //DEBUG
	{
		Super.AttachToOwner(Other);
		if (other && other.player)
			ACS_ScriptCall("KAIToken_SetThreatLevel",666);
			//user_threatlevel = 666; //THREAT_UNSTOPPABLE
	}*/
}
//DEBUG: Assesses the threat level of an actor in front of it, to see if the system works as intended.
Class ThreatAssess : KAI_Actor// replaces gibbedmarineextra
{
	Default {+NoTarget;}
	States
	{
		Spawn:
			TNT1 A 1 A_LookEx(fov:360);
			loop;
		See:
			TNT1 A 1
			{
				String Text;
				Switch (AssessThreatLevel (Target))
				{
					Case THREAT_SUPERDANGER:
						Text = "THREAT_SUPERDANGER";
						Break;
					Case THREAT_VERYDANGEROUS:
						Text = "THREAT_VERYDANGEROUS";
						Break;
					Case THREAT_DANGEROUS:
						Text = "THREAT_DANGEROUS";
						Break;
					Case THREAT_ABOVENORMAL:
						Text = "THREAT_ABOVENORMAL";
						Break;
					Case THREAT_NORMAL:
						Text = "THREAT_NORMAL";
						Break;
					Case THREAT_MILD:
						Text = "THREAT_MILD";
						Break;
					Case THREAT_LOW:
						Text = "THREAT_LOW";
						Break;
					Case THREAT_VERYLOW:
						Text = "THREAT_VERYLOW";
						Break;
					Case THREAT_UNSTOPPABLE:
						Text = "THREAT_UNSTOPPABLE";
						Break;
					Case THREAT_NONE:
						Text = "THREAT_NONE";
						Break;
					Default:
						Text = "Oops";
						Break;
				}
				Console.Printf ("%s threat level:%s",Target.GetClassName(),Text);
			}
			Stop;
	}
}